import "glass" from "packages" as "glass"

permission "request" "start run"
permission "request" "file admin"
permission "request" "terminal"
permission "request" "windows"

save "Dock@System" "set_directory"
open = 0

window "responsive" true
window "hide"

local board @= "origin.keyboard".eval()
data = open("~/application data/settings/keybinds.json")
if data.len != 0 (
  data.JsonParse()
  board.keybinds = data
)

window.no_desktop = true
window.pinned = true
// pin to the top to stop other windows from overlapping

window "y" screensize_y / -2 + 35

segments = user.origin_dock
if typeof(segments) != "array" (
  segments = [
    "Origin/(A) System/Docks/Modules/main.osl",
    "Origin/(A) System/Docks/Modules/applications.osl",
    "Origin/(A) System/Docks/Modules/running.osl",
    "Origin/(A) System/Docks/Modules/folders.osl",
    "Origin/(A) System/Docks/Modules/time.osl",
    "Origin/(A) System/Docks/Modules/battery.osl"
  ]
  network "update" "origin_dock" segments
)

// reset the user time format if it is not set
if user.timeformat == null (
  network "update" "timeformat" {
    "hours": "24h",
    "show_seconds": true,
  }
)

eval "origin.windows.area.bottom += 70"

window.on("close", def() -> (
  eval "origin.windows.area.bottom -= 70"
))

goto 0 y
dock_x = 0
dock_width = 0
segment_classes = []
for syscount segments.len (
  local name = segments[syscount]
    .replace(".ode", ".osl")

  local imp @= import(name)
  imp.name = name

  if imp.main == null (
    say "Failed to load: " ++ name ++ "\nMissing main() function"
    continue
  ) else if imp.init != null (
    imp.init()
  )
  if imp.conditions == null (
    imp.conditions @= () -> (true)
  )
  dock_width += max(0,imp.width.toNum())
  void segment_classes.append(imp)
)
dock_width_temp = dock_width

// Parameter setup
dock_x = dock_width.round() / -2
y = -100
dock_y_target = 0
height = 36

// theme
if user.theme.len < 5 or typeof(user.theme) != "object" (
  network "update" "theme" {
    "primary":"#222",
    "secondary":"#555",
    "tertiary":"#777",
    "text":"#fff",
    "background":"#050505",
    "accent":"#57cdac"
  }
)

file_loc = user_folder ++ "/Dock"

network "update" "hostOS" system_os
network "update" "timezone" timezone

run = (1 to segment_classes.len).fill(false)

mainloop:
dock_colour = user.theme.background
icon_colour = user.theme.text

if segments != user.origin_dock (
  segments = user.origin_dock
  window.callRender()
)
if dock_colour + icon_colour != tempcol (
  tempcol = dock_colour + icon_colour
  window.callRender()
)
movefileloc file_loc
if mouse_down.not() (
  canclick = true
)
window.resize(screensize_x, 70)
window.y = screensize_y / -2 + 35
y += dock_y_target - round(y) * delta_time * 3
if y > 0 (
  y = 0
)

if round(y) != round(dock_y_target) (
  window.callRender()
)
if y > -80 (
  width = 0
  local x = dock_width / -2 + 15
  dock_width = 0

  goto x y
  c dock_colour
  local hovering = null
  for bg segment_classes.len (
    local cur @= segment_classes[bg]
    if cur.enabled == false (
      continue
    )
    local w = max(0, cur.width.toNum())
    dock_width += w + 30
    cur.width = w
    change_x w / 2
    square w height 20 0 1
    run[bg] = cur.conditions() == true or mouse_touching or bg_redrawn or dock_changed_w
    if run[bg] (
      square w height 20
    )
    change_x w / 2 + 30
  )
  
  for i segment_classes.len (
    local cur @= segment_classes[i]
    if cur.enabled == false (
      continue
    )
    local w = cur.width
    c dock_colour
    if run[i] (
      local w2 = w / 2 + 10
      local h2 = height / 2 + 10
      goto x + (w / 2) y
      frame x_position + w2 y_position + h2 x_position - w2 y_position - h2
        effect "transparency" 70
        goto frame.x * -1 frame.y * -1
    
        image "wallpaper_blur" background_width background_height
        effect "clear"
      frame "clear"
      goto x y
      void cur.main()
      run[i] = false
    )
    x += w + 30
  )

  if dock_width != dock_width_temp (
    dock_width_temp = dock_width
    dock_changed_w = true
    window "refresh_bg"
  ) else (
    dock_changed_w = false
  )
  dock_x = dock_width / -2
)
if open != 0 and mouse_down.not() (
  local wins @= windows()
  local exists = false
  for i wins.len (
    if wins[i].window.file.path == open (
      exists = true
    )
  )
  if exists.not() (
    window.create(open)
  )
  open = 0
)
