permission "request" "start run"
permission "request" "file admin"
permission "request" "terminal"
permission "request" "windows"

save "Dock@System" "set_directory"
open = 0

window "responsive" true
window "hide"

window.no_desktop = true
window.pinned = true
// pin to the top to stop other windows from overlapping

window "y" screensize_y / -2 + 35

segments = user.origin_dock
if typeof(segments) != "array" (
  segments = [
    "Origin/(A) System/Docks/Modules/main.ode",
    "Origin/(A) System/Docks/Modules/applications.ode",
    "Origin/(A) System/Docks/Modules/running.ode",
    "Origin/(A) System/Docks/Modules/folders.ode",
    "Origin/(A) System/Docks/Modules/time.ode",
    "Origin/(A) System/Docks/Modules/battery.ode"
  ]
  network "update" "origin_dock" segments
)

// reset the user time format if it is not set
if user.timeformat == null (
  network "update" "timeformat" {
    "hours": "24h",
    "show_seconds": true,
  }
)

// Parameter setup
height = 36
dock_x = 0
dock_changed_w = false
y = -100
dock_y_target = 0
tempcol = ""

// run the segments once to calculate the width
goto 0 y
dock_x = 0
for syscount segments.len (
  import segments[syscount] "ode" : c#dock_colour chx#15
  goto width / 2 + x + 15 y
)
dock_width = x_position
dock_width_temp = dock_width

// find the proper starting x
dock_x = round(dock_width) / -2

// theme
if user.theme.len < 5 or typeof(user.theme) != "object" (
  network "update" "theme" {
    "primary":"#222",
    "secondary":"#555",
    "tertiary":"#777",
    "text":"#fff",
    "background":"#050505",
    "accent":"#57cdac"
  }
)

file_loc = user_folder ++ "/Dock"

network "update" "hostOS" system_os
network "update" "timezone" timezone

mainloop:
dock_colour = user.theme.background
icon_colour = user.theme.text

if segments != user.origin_dock (
  segments = user.origin_dock
  window "refresh_bg"
)
if dock_colour + icon_colour != tempcol (
  tempcol = dock_colour + icon_colour
  window "refresh_bg"
)
movefileloc file_loc
if mouse_down.not() (
  canclick = true
)
window.resize(screensize_x, 70)
window.y = screensize_y / -2 + 35
if delta_time < 0.1 (
  y += dock_y_target - round(y) * delta_time * 3
  if round(y) != round(dock_y_target) (
    window "refresh_bg"
  )
)
if y > -80 (
  width = 0
  goto dock_x y
  each segment segments (
    import segment "ode" : c#dock_colour chx#15
    goto width / 2 + x + 15 y
  )
  dock_width = round(x_position - dock_x)
  if dock_width != dock_width_temp (
    dock_width_temp = dock_width
    dock_changed_w = true
    window "refresh_bg"
  ) else (
    dock_changed_w = false
  )
  dock_x = dock_width / -2
)
if open != 0 and mouse_down.not() (
  local wins @= windows()
  local exists = false
  for i wins.len (
    if wins[i].window.file.path == open (
      exists = true
    )
  )
  if exists.not() (
    window.create(open)
  )
  open = 0
)
