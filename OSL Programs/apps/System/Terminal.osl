import as "glass" from "packages"
import "window_tools"

file "use_type" "ots"
permission "request" "terminal"
permission "request" "file admin"
save "system@terminal" "set_directory"
network "set_app_id" "terminal@system"

class terminal (
  lines = []
  waiting = false
  show_input = true
  input_message = null
  pwd = user_folder
  
  def writeLine(data) (
    void self.lines.append(data)
  )
  
  def write(data) (
    self.lines[self.lines.len] += data
  )
  
  def input(query) (
    self.show_input = true
    self.input_message = query
    while self.show_input (
      defer
    )
    self.input_message = null
    return last.pop()
  )
  
  def clear() (
    self.lines = []
  )
  
  self.user_start = {_get: def() -> (
    if input_message != null (
      return input_message ++ ": "
    )
    local pos = self.pwd
    if pos == user_folder (
      pos = "~"
    ) else (
      pos = pos.split("/")[-1]
    )
    return username ++ "@originos " ++ pos ++ " % "
  )}
)

def evalCmd(cmd) (
  local tokens = cmd.oslTokenise()
  local path = parseFilePath("~/:path/" ++ tokens[1] ++ ".osl")
  if self.cache.contains(path).not() (
    file "exists" path
    local data = open(path)
    if data == null or exists.not() (
      terminal cmd
      terminal.lines @= terminal.lines.trim(1, terminal_length) ++ terminal_output
      return
    ) else (
      self.cache[path] @= function("args", data)
    )
  )
  void tokens.shift()
  local lines = terminal.lines
  for i tokens.len (
    local cur = tokens[i]
    if cur[1] == "\"" and cur[-1] == "\"" (
      tokens[i] = cur.trim(2, -2).replace("\\", "")
    )
    if cur[1] == "(" and cur[-1] == ")" (
      terminal.lines = []
      evalCmd(cur.trim(2, -2))
      if terminal.lines.len > 0 (
        tokens[i] @= terminal.lines.join("\n")
      ) else (
        tokens[i] = null
      )
    )
  )
  terminal.lines = lines
  void self.cache[path](tokens)
)

terminal_worker @= worker({
  cmd: null,
  isThread: true,
  cache: {},
  onframe: def() -> (
    if cmd != null (
      terminal.show_input = false
      evalCmd(cmd)
      terminal.show_input = true
      self.cmd = null
    )
  )
})

ansi = {
  "\e[30m": "#000",
  "\e[31m": "#f00",
  "\e[32m": "#0f0",
  "\e[33m": "#ff0",
  "\e[34m": "#00f",
  "\e[35m": "#f0f",
  "\e[36m": "#0ff",
  "\e[37m": "#fff",
  "\e[90m": "#555",
  "\e[91m": "#f55",
  "\e[92m": "#5f5",
  "\e[93m": "#ff5",
  "\e[94m": "#55f",
  "\e[95m": "#f5f",
  "\e[96m": "#5ff",
  "\e[97m": "#fff"
}

ansi_re = "/\e\[[0-9;]+m/g"

mode = "norm"

canenter = true
inputs.main = null
last = []
last_index = 0

window.setDragbox([2,2,0,0],[-2,-2,0,0])

taking_input = false
ots_i = 1

mainloop:
load_theme

if all_hit.len > 0 and inputs.selected.id != "main" (
  input "focus" "main"
)

glass:frame window.left window.top window.right window.bottom
c window_colour
pen "opacity" 60
icon "w 999 dot 0 0" 100
frame "clear"

if mode == "norm" (
  if "enter".onKeyDown() (
    void last.append(inputs.main)
    last_index = last.len + 1
    void terminal.lines.append(user_start ++ inputs.main)
    terminal_output = []
    terminal_worker.cmd = inputs.main
    inputs.main = ""
    terminal.show_input = false
  )
)

if "arrowup".onKeyDown() (
  last_index --
  last_index.clamp(1,last.len)
  inputs.main = last[last_index]
)
if "arrowdown".onKeyDown() (
  last_index ++
  last_index.clamp(1,last.len + 1)
  inputs.main = last[last_index]
)

c prim
frame window.left window.top window.right + 20 window.bottom loops + 1.5 * 20

c txtc
loops = terminal.lines.len
count = floor(scroll_y / 20).clamp(0,loops)
loop round(frame.height / 20 + 3).clamp(0,loops) (
  count ++
  y = count * -20 + frame.scroll + 5
  loc 2 2 10 y
  local line = terminal.lines[count]
  if line == null (
    break
  )
  if typeof(line) == "array" (
    local i = 0
    loop line.len / 2 (
      i += 2
      c line[i - 1] ?? txtc
      text line[i] 10
      c txtc
    )
  ) else (
    text line 10
  )
)

local user_start = terminal.user_start
if terminal.show_input (
  loc 2 2 10 loops * -20 + scroll_y - 15
  text user_start 10 : c#txtc
  set_x user_start.len * 5 - 10
  pen "opacity" 0
  input window_width - (user_start.len + 2 * 10) 30 "main" null null txtc
)
frame "clear"

import "win-buttons"