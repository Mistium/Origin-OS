save "desktop@system" "set_directory"
permission "request" "file admin"
permission "request" "terminal"
permission "request" "windows"
permission "request" "javascript"

window.no_desktop = true

app_positions = {}

def icons_big() (
  app_size = 2.5
  theme.app_size = app_size
  save "theme.json" "set" theme
)

def icons_norm() (
  app_size = 2
  theme.app_size = app_size
  save "theme.json" "set" theme
)

def icons_small() (
  app_size = 1.7
  theme.app_size = app_size
  save "theme.json" "set" theme
)

def icons_hide() (
  app_size = 0
  theme.app_size = app_size
  save "theme.json" "set" theme
)

def upload_file() (
  terminal "upload /desktop"
)

def "reload_extensions" (
  local extensions @= "window.osl_extensions".eval().getValues()
  
  if extensions != apps_temp (
    apps_temp = extensions
    // only run when the extensions change

    for i extensions.len (
      local extension = extensions[i]
      extensions[i] = extension.JsonParse()
    )
    desktop_rightclick[desktop_rightclick.len] = ["Apps"].concat(extensions)
  )
)

def "handle_dropped_file" (
  loc 2 2 35 -35
  file "open" file_dropped "onlyaccess"
  file "set" "6" round(x_position - mouse_x / -70) * 70
  file "set" "7" round(y_position - mouse_y / -70) * 70
)

def "handle_app_culling" (
  if mouse_down or app_positions.len == 0 or bg_redrawn (
    desktop_apps = desktop
  ) else (
    loc 2 2 35 -35
    x = round(mouse_x - x_position / 70) * 70
    y = round(mouse_y - y_position / 70) * 70
    desktop_apps = []
    cur = app_positions[y][x]
    if desktop.contains(cur) (
      if cur != null (
        void desktop_apps.append(cur)
      )
    ) else (
      app_positions[y][x] = null
    )
  )
)

def "render_selection" (
  sqw = mouse_start_x - mouse_x
  sqh = mouse_start_y - mouse_y
  frame mouse_start_x mouse_start_y mouse_x mouse_y (
    goto 0 0
    c #000
    pen "opacity" 70
    pen "size" frame_width + frame_height
    pen "down"
    pen "up"
    pen "opacity" 100
    fx = frame_x
    fy = frame_y
    fw = frame_width
    fh = frame_height
  )
  window.resize(screensize_x,screensize_y - 70)
  window.callRender()
)

def getUuid(path) (
  if path.startsWith("sys/") (
    local path = "origin/(a) system/user applications/" ++ path.trim(5,-1)
  )
  file "open" path "onlyaccess"
  return fileGet(14)
)

desktop_rightclick = [
  "> " ++ getUuid("user/desktop.folder"),
  "-",
  {"Change Wallpaper": def() -> (
    window.create(getUuid("sys/Settings.osl"), "Style/Background")
  )},
  ["Quick Apps",
    "> " ++ getUuid("sys/Files.osl"),
    "> " ++ getUuid("sys/Settings.osl"),
    "> " ++ getUuid("sys/Activity.osl"),
    "> " ++ getUuid("/(a) system/system apps/Terminal.osl"),
  ],
  "-",
  ["New",
    {"Upload": def() -> (
      terminal "upload user/desktop"
    )},
    {"Folder": def() -> (
      file "download" "New Folder.folder" "" [] parseFilePath("~/desktop")
    )},
    {"File": def() -> (
      window.create("new_file", {
        passed_data: user_folder ++ "/desktop"
      })
    )},
  ],
  "Info",
  "-",
  {"Minimise All": def() -> (
    local shown = Windows().filter(v -> (v.shown == true))
    each this.app shown (
      terminal "mini" + app.id
    )
  )},
  {"Close All": def() -> (
    local shown = Windows().filter(v -> (v.shown == true))
    each this.app shown (
      terminal "kill" + app.id
    )
  )},
  "-",
  ["View",
    {"Big Icons":    icons_big   },
    {"Normal Icons": icons_norm  },
    {"Small Icons":  icons_small },
    "-",
    {"Hide Icons":   icons_hide  }
  ],
  [
    "Apps",
    "None"
  ]
]

desktop_rightclick_temp = desktop_rightclick

if "theme.json".saveExists() (
  theme = "theme.json".saveGet().JsonClean()
  if typeof(theme) != "object" (
    theme = {"app_size":"1.8"}
    save "theme.json" "set" theme
  )
) else (
  theme = {"app_size":"1.8"}
  save "theme.json" "set" theme
)

app_size = theme.app_size

clicked_id = 0
window "x" 0
windowfileloc = user_folder ++ "/Desktop"
desktop_uuid = open(windowfileloc ++ ".folder", [14])[1]
positions = {}
name = null
apps_temp = ""
window "responsive" true

mainloop:
back = user.theme.background
txtc = user.theme.text

include windowfileloc
nhvr = window_id_index != window_top_index
cnrn = desktop != data or bg_redrawn

if cnrn.not() and nhvr "exit"
desktop = data

// set window parameters
window.drop_location = windowfileloc
window.width = screensize_x
window.height = screensize_y - 70
window.y = 35

if nhvr.not() (
  if file_dropped != 0 (
    handle_dropped_file
    window.callRender()
    file_dropped = 0
  )
  if mouse_down and can (
    can = false
    mouse_start_x = mouse_x
    mouse_start_y = mouse_y
    window.callRender()
  )
  if mouse_down (
    render_selection
  ) else (
    if can.not() (
      window.callRender()
    )
    can = true
  )
  reload_extensions

  goto 0 0
  square screensize_x screensize_y 1 0 1

  rightclick desktop_rightclick desktop_uuid
)
if data.len == 0 or app_size == 0 "exit"

handle_app_culling

if desktop_apps.len == 0 "exit"
for i desktop_apps.len (
  app_id @= desktop_apps[i]

  file "open" app_id "onlyaccess"
  x = round(fileGet(6) / 70) * 70
  y = round(fileGet(7) / 70) * 70
  app_positions[y][x] = app_id

  loc 2 2 35 + x -35 + y
  square 30 30 0 0 1
  if mouse_touching or cnrn (
    file "render" app_size "interactable"
    rightclick "file" app_id
  )

  data = fileGet(2)
  if mouse_touching (
    square data.len * 8 5 15 : c#back chy#-35
    centext data 8 : c#txtc
    name = data
  ) else (
    if name == data (
      window.callRender()
      name = null
    )
  )
)
