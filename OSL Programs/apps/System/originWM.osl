// this is a not finished WIP window manager for originOS written in OSL

permission "request" "windows"
permission "request" "javascript"

def checkCollision(x2,y2,w,h) (
  return abs(mouse_x - x2) < w / 2 and abs(mouse_y - y2) < h / 2
)

if origin.version < 600 (
  window.close()
)

origin @= "window.origin".eval()
// get the origin global object
// this gives us a shit ton of apis

origin.windows.area = {
  top: 0,
  bottom: 0,
  right: 0,
  left: 0
}

window_area @= origin.windows.area

window "responsive" true

hitbox_size = 13

x2 = hitbox_size * 2
x25 = hitbox_size / 4

def dragEdge(prop, axis) (
  if !mouse_down (
    state.dragEdge = null
    return
  )
  if mouse_moving (
    local pos = top.tile
    if pos == null (
      pos = ""
    )
    if axis == "x" (
      if pos.startsWith("-1,") or pos.startsWith("1,") (
        local desktop @= "origin.desktop".eval()
        local mouse = pos[1] == "-" ? -mouse_x mouse_x
        local split = (abs(state.resize1 + mouse) / screensize_x).clamp(0.3, 0.7)
        desktop.split[desktop.current + 1] = split
        local left = screen.x / -2 + max(0, window_area.left)
        local right = screen.x / 2 - max(0, window_area.right)

        local wins @= Windows()
        for i wins.len (
          local cur @= wins[i].window
          local tile = cur.tile
          if typeof(tile) != "string" (
            continue
          )
          if cur.desktop == desktop.current and (tile.startsWith("-1,") or tile.startsWith("1,")) (
            if tile[1] == "-" (
              cur.width = split * screen.x - 5
              cur.x = left + (split * screen.x / 2) - 3
            ) else (
              cur.width = 1 - split * screen.x - 5
              cur.x = right - (1 - split * screen.x / 2) - 3
            )
            cur.callRender()
          )
        )
      ) else (
        top.width = abs(state.resize1 - mouse_x).clamp(top.min_width, 999999)
        top.x = state.resize1 + (top.width / state.div)
      )
    ) else (
      top.height = abs(state.resize2 - mouse_y).clamp(top.min_height, 999999)
      top.y = state.resize2 + (top.height / state.div)
    )
    top.callRender()
  )
)

def dragDiagonal() (
  if !mouse_down (
    state.dragDiag = null
    return
  )
  if mouse_moving (
    top.width = abs(state.resize1 - mouse_x).clamp(top.min_width, 999999)
    top.height = abs(state.resize2 - mouse_y).clamp(top.min_height, 999999)
    top.x = state.resize1 + (top.width / state.div1)
    top.y = state.resize2 + (top.height / state.div2)
    
    local w = top.width / 2
    local h = top.height / 2
    
    top.callRender()
  )
)

def moveWindow() (
  if !mouse_down (
      local bottom = screen.y / -2 + max(0, window_area.bottom)
      local win_top = screen.y / 2 - max(0, window_area.top)
      local left = screen.x / -2 + max(0, window_area.left)
      local right = screen.x / 2 - max(0, window_area.right)
      local width = right - left
      local desktop @= "origin.desktop".eval()
      local current = desktop.split[desktop.current + 1]
      if mouse_y > win_top - 13 (
        top.tile = "0,-1"
        top.target_x = left + (width / 2)
        top.target_y = bottom + win_top / 2
        top.target_width = width
        top.target_height = win_top - bottom
      ) else if mouse_x < left + 13 (
        width = current * screen.x
        top.tile = "-1,0"
        top.target_x = left + (width / 2)
        top.target_y = bottom + win_top / 2
        top.target_width = width
        top.target_height = win_top - bottom
      ) else if mouse_x > right - 13 (
        width = 1 - current * screen.x
        top.tile = "1,0"
        top.target_x = right - (width / 2)
        top.target_y = bottom + win_top / 2
        top.target_width = width
        top.target_height = win_top - bottom
      )
      state.move = null
      return
    )
    state.dragDiag = null
    state.cursor = "grabbing"
    if mouse_moving (
      if top.tile != null (
        local relative_x = (mouse_x - top.x) / top.width
        local relative_y = (mouse_y - top.y) / top.height
        
        top.tile = null
        top.target_width = 700
        top.target_height = 450
        
        top.x = mouse_x - (relative_x * top.target_width)
        top.y = mouse_y - (relative_y * top.target_height)

        state.move.x = top.x
        state.move.y = top.y
      ) else (
        top.x = state.move.x + (mouse_x - state.move.mouse_x)
        top.y = state.move.y + (mouse_y - state.move.mouse_y)
        state.move.x = top.x
        state.move.y = top.y
      )
      state.move.mouse_x = mouse_x
      state.move.mouse_y = mouse_y
      top.callRender()
    )
)

def handleResize() (
  // left edge
  if checkCollision(x + top.left, y, hitbox_size, top.height - x25) (
    state.cursor = "ew-resize"
    if mouse_ondown (
      state.changeState("left","width")
    )
  )
  // right edge
  if checkCollision(x + top.right, y, hitbox_size, top.height - x25) (
    state.cursor = "ew-resize"
    if mouse_ondown (
      state.changeState("right","width")
    )
  )
  
  if top.tile == null (
    // bottom edge
    if checkCollision(x, y + top.top, top.width - x25, hitbox_size) (
      state.cursor = "ns-resize"
      if mouse_ondown (
        state.changeState("top","height")
      )
    )
    // top edge
    if checkCollision(x, y + top.bottom, top.width - x25, hitbox_size) (
      state.cursor = "ns-resize"
      if mouse_ondown (
        state.changeState("bottom","height")
      )
    )
    
    if checkCollision(x + top.right, y + top.top, x2, x2) (
      state.cursor = "nesw-resize"
      if mouse_ondown (
        state.changeState("right,top","both")
      )
    )
    
    if checkCollision(x + top.right, y + top.bottom, x2, x2) (
      state.cursor = "nwse-resize"
      if mouse_ondown (
        state.changeState("right,bottom","both")
      )
    )
    
    if checkCollision(x + top.left, y + top.top, x2, x2) (
      state.cursor = "nwse-resize"
      if mouse_ondown (
        state.changeState("left,top","both")
      )
    )
    
    if checkCollision(x + top.left, y + top.bottom, x2, x2) (
      state.cursor = "nesw-resize"
      if mouse_ondown (
        state.changeState("left,bottom","both")
      )
    )
  )
)

def handleMove() (
  drag @= top.dragbox[1]
  goto x y
  change top.width / -drag[1] + drag[3] top.height / drag[2] + drag[4]
  if mouse_x < x_position or mouse_y > y_position (
    return
  )

  drag @= top.dragbox[2]
  goto x y
  change top.width / -drag[1] + drag[3] top.height / drag[2] + drag[4]
  if mouse_x > x_position or mouse_y < y_position (
    return
  )
  state.cursor = "grab"
  if mouse_ondown (
    state.dragDiag = null
    state.dragEdge = null
    state.move = {
      x: top.x,
      y: top.y,
      mouse_x: mouse_x,
      mouse_y: mouse_y,
      tile: top.tile
    }
  )
)

def handleTop() (
  local nodragging = state.dragEdge == null and state.dragDiag == null and state.move == null
  if nodragging and !file_dragging (
    wins @= Windows()
    for i wins.len (
      local cur @= wins[i].window
      x = cur.x
      y = cur.y
      local hovering = checkCollision(x, y, cur.width + x2, cur.height + x2)
      local isntMini = true
      if cur.isMini != null (
        isntMini = cur.isMini().not()
      )
      if hovering and cur.shown and isntMini (
        top @= cur
        if mouse_ondown and i > 1 (
          void top.focus()
        )
        if cur.isResizable() (
          handleResize()
        )
        handleMove()
        break
      )
    )
  )
  nodragging = state.dragEdge == null and state.dragDiag == null and state.move == null
  if nodragging (
    top @= {}
    return
  )
  if top.shown (
    if state.dragEdge != null (
      dragEdge(state.prop,state.axis)
    )
    if state.dragDiag != null (
      dragDiagonal()
    )
    if state.move != null (
      moveWindow()
    )
  )
)

def handleKeybinds(keybinds) (
  local modifiers @= keybinds.getKeys()
  for i modifiers.len (
    // keynames
    local mod = modifiers[i]
    if mod.isKeyDown().not() (
      continue
    )
    local binds @= keybinds[mod]
    local keys @= binds.getKeys()
    for j keys.len (
      local key = keys[j]
      if key.onKeyDown().not() (
        continue
      )
      try (
        void function("", binds[key])()
      )
    )
  )
)

state = {
  dragEdge: null,
  dragDiag: null,
  move: null,
  changeState: def(edge,prop) -> (
    if prop == "both" (
      self.dragDiag = edge.split(",")
      self.axis = "both"
      self.div1 = dragDiag[1] == "left" ? -2 2
      self.div2 = dragDiag[2] == "bottom" ? -2 2
      self.resize1 = top.x - (top.width / div1)
      self.resize2 = top.y - (top.height / div2)
    ) else (
      self.dragEdge = edge
      self.axis = ["width"].contains(prop) ? "x" "y"
      self.div = ["left","bottom"].contains(edge) ? -2 2
      self.resize1 = top.x - (top.width / div)
      self.resize2 = top.y - (top.height / div)
    )
    
    self.prop = prop
    self.last_size = top[prop]
    self.pos = top.tile
  )
}

mainloop:

handleKeybinds(origin.keyboard.keybinds)

screen = {
  x: screensize_x,
  y: screensize_y
}

if wins[1].id == window.id (
  window.resize(0,0)
) else (
  window.resize(screensize_x,screensize_y)
)

if !mouse_down (
  state.cursor = null
)

handleTop()
if state.cursor != null (
  cursor state.cursor
)
