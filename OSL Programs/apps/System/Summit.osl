import "window_tools" as "wt"
import as "glass" from "packages"

summit = {
  pages: {
    current: [],
    loaded: {},
  },
  tabs: {
    current: [],
    all: [],
    queue: []
  },
  system_url: "https://web.rotur.dev/",
  tlds: "https://web.rotur.dev/tlds.json".httpGet().JsonParse(),
  redirect_url: null
}

page_len = 0
tab_info = null
current_tab_name = {}

each key window.getKeys() (
  if window[key]["type"] == "function" (
    window[key] = () -> ()
  )
)

class sandbox (
  def run(fn, data) (
    void fn(data)
    return data
  )
  
  def sanitiseOSL(OSL) (
    local blocked = [
      "save ",
      "window ",
      "network ",
      "file ",
      "run ",
      "permission "
    ]
  
    for i OSL.len (
      local line = OSL[i].strip()
      for i2 blocked.len (
        if line.startsWith(blocked[i2]) (
          line = ""
        )
      )
    )
    return OSL
  )
)

permission "request" "file admin"

window "dimensions" 1000 600

def "add_tab" "url" (
  if url.contains("://").not() (
    url = "web://" ++ url
  )

  local obj = {
    "title": "Loading",
    "position": 1,
    "icon": "refresh",
    "id": ouidNew(),
    "history": [url]
  }
  
  void summit.tabs.queue.append(obj)
)

def "redirect" "url" (
  summit.redirect_url = url
)

def "opentab" "url" (
  add_tab url
)

def "draw_page" "url, page_type, tab_id" (
  void summit.pages.current.append(url)
  
  if url == null (
    return
  )
  
  local page_protocol = url.split(":")[1]
  
  local loaded_pages @= summit.pages.loaded
  
  if loaded_pages.contains(url) (
    local page @= loaded_pages[url]
    local data @= page.data
    
    onload = page.onload
    page.onload = false

    tab_info = null
    current_tab_name = {
      title: url.split("/")[1],
      icon: "network"
    }
    
    switch page_type (
      case "osl"
        try (
          page.vars @= sandbox.run(page.fn, page.vars)
          
          if tab_info != null (
            current_tab_name @= tab_info
          )
        ) catch e (
          say "Page Error: " + url
          void tab.delete(tab_id)
        )
        break
      case "png"
      case "jpg"
        image page.fetch_url 500
        current_tab_name @= {
          "title": url.split("/")[-1],
          "icon": "image" + page.fetch_url + "20"
        }
        break
      default
        goto 0 0
        inputs[url] @= data
        textbox frame.width frame.height url
        break
    )
    local tabs @= summit.tabs.all
    if summit.redirect_url != null (
      if summit.redirect_url.split("/")[-1].contains(".").not() or summit.redirect_url.endsWith(".web") (
        summit.redirect_url ++= "/index.osl"
      )
      tabs[tab_id].url = summit.redirect_url
      tabs[tab_id].position ++
      void tabs[tab_id].history.append(summit.redirect_url)
      summit.redirect_url = null
    )
    
    tabs[tab_id].page_len = page_len
    tabs[tab_id].icon = current_tab_name.icon
    tabs[tab_id].title = current_tab_name.title
    current_tab_name = {}
    page_len = 0
  )
)

def "page_frame" "left, top, right, bottom, url" (

  local tabs @= summit.tabs.all

  local tab_id = url
  
  local idx = tabs.getKeys("id").index(url)
  
  local tab @= tabs[idx]
  
  local url = tab.history[tab.position]
  
  local page_protocol = url.split("://")[1]
  
  local page_type = "text"
 
  if url.startsWith("local://") (
    local url = url.trim(9,-1)
    file "open" url "onlyaccess"
    if [".owf", ".osl"].contains(fileGet(1)) (
      local page_type = "osl"
    )
  )
  if url.startsWith("web://") (
    if url.endsWith("/") (
      local url = url.trim(1,-2)
    )
    local url = url.trim(7,-1)
    if url.endsWith(".osl") (
      local page_type = "osl"
    ) else if url.contains("/").not() (
      local page_type = "osl"
      local url ++= "/index.osl"
    ) else (
      local page_type = url.split("/")[-1].split(".")[-1]
    )
  )
  
  if summit.pages.loaded[url] == null (
    local fetch_url = ""
    if page_protocol == "web" (
      local parts = url.split("/")
      local current_tld = parts[1].split(".").last()
      fetch_url = "https://" ++ summit.tlds[current_tld] ++ url
      local data = fetch_url.getAsync()
    ) else if page_protocol == "local" (
      local data = open(url, ["path","name","type","data"])
      fetch_url = data[1] ++ "/" ++ data[2] ++ data[3]
      data = data[4]
    )
    if data != "Loading" (
      summit.pages.loaded[url] @= {
        data: data.split("\n"),
        onload: true,
        vars: {},
        fetch_url
      }
      if fetch_url.endsWith(".osl") or url.endsWith(".osl") or fetch_url.endsWith(".owf") (
        summit.pages.loaded[url].fn @= function("data", sandbox.sanitiseOSL(data.split("\n")).join("\n"))
      )
    )
  )
  
  local w = abs(right - left)
  local h = abs(top - bottom)
  
  local x = left + (w / 2)
  local y = bottom + (h / 2)
  goto x y
  c window_colour
  square w h 10

  frame left top right bottom tabs[idx].page_len tabs[idx].id (
    scroll_y = frame.scroll
    draw_page url page_type idx
    scroll_y = 0
  )
)

if passed_data != "" (
  add_tab "local://" ++ passed_data
) else (
  add_tab "web://search.web"
)

summit.tabs.current @= [tabs[1].id]

summit.sidebar = {
  width: 300,
  x: -300,
  target_x: 0,
  icons: [
    {
      icn:  "w 3 cutcircle -2 2 8 0 180 w 3.5 line 4 -4 12 -12",
      func: def() -> (
        input "focus" "main"
      )
    },
    {
      icn:  "left-arrow",
      func: def() -> (
      
      )
    },
    {
      icn:  "right-arrow",
      func: def() -> (
      
      )
    }
  ],
  handleSize: def() -> (
    self.x += self.target_x - self.x / 7
  ),
}

summit.sidebar.main = def() -> (
  void self.handleSize()
  
  if mouse_x < window.left + 30 and mouse_ondown (
    self.target_x = 0
  )
  
  window "set_dragbox" [[2,2,100 + self.x,0],[2,2,self.width + self.x - 40,-40]]

  self.left = window.left + self.x
  
  self.edge = self.left + self.width
  
  frame self.left window.top self.edge window.bottom (
    goto 0 0
    square frame.width - 20 frame.height - 20 10 : c#window_colour
    
    c txtc
    loc -2 2 -25 -25
    icon "left" 0.7
    if onclick (
      self.target_x = -300
    )
    
    goto 0 frame.top - 65
    c prim
    square frame.width - 40 30 10
    input frame.width - 50 25 "main" "Enter A URL"
    if "enter".onKeyDown() and selected_input == "main" (
      opentab inputs.main
      inputs.main = ""
    )
    
    if self.x > -280 (
      c txtc
      loc 2 2 25 -25
      for i self.icons.len (
        icon self.icons[i].icn 0.7
        if onclick (
          void self.icons[i].func()
        )
        change_x 30
      )
    
      c seco
      frame frame.left + 10 frame.top - 90 frame.right - 10 frame.bottom summit.tabs.current.len * 45 (
        goto 0 frame.top + frame.scroll - 25
        
        local all_tabs = summit.tabs.all
        for i summit.tabs.all.len (
          local tab @= all_tabs[i]
          set_x 0
          square frame.width 40 0 0 1
          if summit.tabs.current.contains(tab.id) (
            square frame.width - 20 30 15 : c#seco
            square frame.width - 20 30 10 : c#window_colour
          )
          if mouse_touching (
            square frame.width - 20 30 15 : c#global_accent
            square frame.width - 20 30 10 : c#window_colour
            if onclick (
              if "shift".isKeyDown() (
                if summit.tabs.current.contains(tab.id) (
                  if summit.tabs.current.len > 1 (
                    void summit.tabs.current.delete(tab.id)
                  )
                ) else (
                  void summit.tabs.current.append(tab.id)
                )
              ) else (
                summit.tabs.current = [tab.id]
              )
            )
          )
          set_x frame.left + 25
          square 30 30 10 : c#prim
          icon tab.icon 0.7 : c#txtc
          text tab.title.trimText(frame.width - 70 / 9) 9 : c#txtc chx#30
          set_x frame.right - 25
          icon "close" 0.5
          if onclick (
            void summit.tabs.all.delete(i)
          )
          change_y -45
        )
      )
      goto 0 window.top
    )
  )
)

mainloop:
wt:load_theme

if file_dropped != 0 (
  add_tab "local://" ++ file_dropped
  file_dropped = 0
)

summit.pages.current = []

glass:frame window.left window.top window.right window.bottom; frame "clear"

void summit.sidebar.main()

local left = summit.sidebar.edge + 10
local right = window.right - 10
local w = right - left

for i summit.tabs.queue.len (
  local new_tab @= summit.tabs.queue.shift()
  void summit.tabs.all.append(new_tab)
  summit.tabs.current @= [new_tab.id]
)

local tab_count = summit.tabs.current.len
if tab_count == 0 (
  tab_count = 1
)
local tab_w = w / tab_count

local current_left = left
local current_right = left + tab_w

for i summit.tabs.current.len (
  tab_id @= summit.tabs.current[i]
  page_frame current_left window.top - 10 current_right window.bottom + 10 tab_id
  local current_left += tab_w
  local current_right += tab_w
)

import "win-buttons"