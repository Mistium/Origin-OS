// Welcome to OPAL!
// ----------------------------------------
// this is a fully osl based package manager
// and dev companion for your osl projects

// here you can modify your package source
local repo = "https://opal.mistium.com"
// here you can modify the config for opal
local conf = "~/:opal.conf"

local log @= def(d) -> (
  if d.contains("\n") (
    d = d.split("\n")
    for i d.len (
      terminal.writeLine(d[i])
    )
    return
  )
  terminal.writeLine(d)
)

local pwd = terminal.pwd.split("/")
pwd[1] = ""
pwd @= pwd.join("/")

// local config @= open("~/:opal.conf").JsonParse()

local c = {
  err: "#FF2929",
  suc: "",
  opl: "#43c2a7"
}

local opal = {
  about: {
    version: "1.0.0"
  },
  getPackages: def() -> (
    local val @= self.open("packages.folder")
    local resp @= self.resp
    if val.exists (
      local json = val.data.JsonParse()
      if typeof(json) != "array" (
        return resp("log", [
          c.err, "packages/ seems to be corrupted, use ",
          c.opl, "opal init",
          c.err, " to reset your project"
        ])
      )
      if json.len == 0 (
        return resp("log", "No installed opal packages")
      )
      return resp("arr", json.map(v -> open(v, ["name"])[1]))
    ) else (
      return resp("log", [
        c.err, "No packages/ found, use ",
        c.opl, "opal init",
        c.err, " to setup your project"
      ])
    )
  ),
  open: def(path) -> (
    local path = parseFilePath(pwd ++ "/" ++ path)
    file "exists" path
    local data = exists ? open(path) null
    return { exists, data }
  ),
  fetchPackage: def(name) -> (
    local json = self.fetchFile(name, "/package.json")
    local exists = true
    if typeof(json) != "object" (
      json = {}
      exists = false
    )
    return { exists, json }
  ),
  fetchFile: def(name, file) -> (
    return (self.repo ++ "/packages/" ++ name ++ file).httpGet().JsonParse()
  ),
  install: def(name) -> (
    local opal_json = self.open("opal.json").data.JsonParse()
    local v = "latest"
    name = name.split(":")
    if name.len > 1 (
      v = name[2].replace("_", ".")
    )
    
    local data = self.fetchPackage(name[1])
    if !data.exists (
      log([opal.c.err, "No package found with that name"])
      break
    )
    data @= data.json
    
    local cur = null
    local vers @= data.versions
    if v == "latest" (
      cur @= vers[-1]
    ) else (
      for i vers.len (
        if vers[i].version == v (
          cur @= vers[i]
          break
        )
      )
    )
    if cur == null (
      log([c.err, "Unable to find specified version of package"])
      return
    )
    
    log("Install " ++ cur.name ++ "(" ++ cur.version ++ ") - size: " ++ cur.size ++ "?")
    if terminal.input("y/n") == "y" (
      if cur.install != null (
        log("Found install script: " ++ cur.install)
        // run the package's install script
        local fn = function("opal", self.fetchFile(name, "/" ++ cur.version ++ "/" ++ cur.install))
        void fn(opal)
        log("Finished running install script")
      )
      // write the script its to the /packages directory
      file "goto_dir" self.pwd ++ "/packages"
      log("Fetching package script")
      local contents = self.fetchFile(name, "/" ++ cur.version ++ "/" ++ cur.main)
      file "set_file" cur.name ++ ":" ++ cur.version.replace(".", "_") ++ ".osl" contents
      log("Written package to drive")
      
      // write to the opal.json
      file "goto_dir" self.pwd
      log("Writing dependencies to opal.json")
      opal_json.dependencies ??= {}
      opal_json.dependencies[cur.name] = cur.version
      file "set_file" "opal.json" opal_json.JsonFormat()
      log("Installed")
    ) else (
      log("Aborted")
    )
  ),
  format: {
    arr: v -> v.join(", ").wrapText(40)
  }
}

opal.c = c
opal.log = log
opal.pwd = pwd
opal.repo = repo
opal.resp = (t, d) -> {t, d}

local commands = [
  "install",
  "uninstall",
  "describe",
  "list",
  "search",
  "sync",
  "init",
  "export",
  "path"
]

if args.len == 0 (
  log("Opal " ++ opal.about.version)
  log("")
  log("opal <command>")
  log(opal.format.arr(commands))
  return
)

if args[1] != "init" (
  local opal_json = opal.open("opal.json")
  if !opal_json.exists (
    log([opal.c.err, "opal.json doesnt exist"])
    return
  )
  opal_json = opal_json.data.JsonParse()
  if typeof(opal_json) != "object" (
    log([opal.c.err, "opal.json seems to be corrupted"])
    return
  )
)

switch args[1] (
  case "init"
    file "goto_dir" opal.pwd
    log("Create new opal project at " ++ opal.pwd ++ "?")
    if terminal.input("y/n") == "y" (
      try (
        file "open" "packages.folder" "onlyaccess"
        file "delete"
        file "close"
      )
      file "set_file" "packages.folder"
      file "set_file" "opal.json" {
        name: terminal.input("Name your project"),
        version: "1.0.0",
        description: "An awesome package",
        main: "script.osl",
        dependencies: {},
        tags: []
      }.JsonFormat()
      file "set_file" "script.osl" "// welcome to your new opal project"
      log("Finished writing")
    ) else (
      log("Aborted")
    )
    break
  case "install"
    local dat = opal.getPackages()
    if dat.t[1] == c.err (
      log(dat.d)
      break
    )
    
    opal.install(args[2])
    break
  case "uninstall"
    file "goto_dir" opal.pwd ++ "/packages"
    local packages = listFiles()
    log("Found " ++ packages.len ++ " packages")
    for i packages.len (
      if packages[i].startsWith(args[2] ++ ":") (
        try (
          file "open" packages[i] "onlyaccess"
          file "delete"
          file "close"
          log("Uninstalled " ++ packages[i])
        )
      )
    )
    // write to the opal.json
    file "goto_dir" opal.pwd
    opal_json.dependencies ??= {}
    opal_json.dependencies.delete(args[2])
    file "set_file" "opal.json" opal_json.JsonFormat()
    log("Removed dependencies from opal.json")
    break
  case "list"
    local dat = opal.getPackages()
    if dat.t == "arr" (
      dat.d = opal.format.arr(dat.d)
    )
    log(dat.d)
    break
  case "describe"
    local data = opal.fetchPackage(args[2])
    if !data.exists (
      log([opal.c.err, "No package found with that name"])
      break
    )
    data @= data.json
    local v = data.versions[-1]
    log(v.name ++ " - " ++ v.version ++ " - " ++ v.size)
    log("")
    log(v.description.wrapText(60))
    break
  case "search"
    local query = args[2].toLowerCase()
    local dat = opal.getPackages()
    if dat.t[1] == c.err (
      log(dat.d)
      break
    )
    
    local results @= []
    for i dat.d.len (
      if dat.d[i].toLowerCase().contains(query) (
        results.append(dat.d[i])
      )
    )
    
    if results.len == 0 (
      log("No packages found matching: " ++ query)
    ) else (
      log("Found " ++ results.len ++ " packages matching: " ++ query)
      log(opal.format.arr(results))
    )
    break
)