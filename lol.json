[
  [
    {
      "type": "cmd",
      "data": "import",
      "source": "import \"rotur/v1\" from \"packages\" as \"rotur\""
    },
    {
      "type": "str",
      "data": "\"rotur/v1\"",
      "source": "\"rotur/v1\""
    },
    {
      "type": "var",
      "data": "from",
      "source": "from"
    },
    {
      "type": "str",
      "data": "\"packages\"",
      "source": "\"packages\""
    },
    {
      "type": "var",
      "data": "as",
      "source": "as"
    },
    {
      "type": "str",
      "data": "\"rotur\"",
      "source": "\"rotur\""
    }
  ],
  [
    {
      "type": "cmd",
      "data": "import",
      "source": "import as \"glass\" from \"packages\""
    },
    {
      "type": "var",
      "data": "as",
      "source": "as"
    },
    {
      "type": "str",
      "data": "\"glass\"",
      "source": "\"glass\""
    },
    {
      "type": "var",
      "data": "from",
      "source": "from"
    },
    {
      "type": "str",
      "data": "\"packages\"",
      "source": "\"packages\""
    }
  ],
  [
    {
      "type": "cmd",
      "data": "file",
      "source": "file \"use_type\" \"txt\""
    },
    {
      "type": "str",
      "data": "\"use_type\"",
      "source": "\"use_type\""
    },
    {
      "type": "str",
      "data": "\"txt\"",
      "source": "\"txt\""
    }
  ],
  [
    {
      "type": "cmd",
      "data": "save",
      "source": "save \"Studio\" \"set_directory\""
    },
    {
      "type": "str",
      "data": "\"Studio\"",
      "source": "\"Studio\""
    },
    {
      "type": "str",
      "data": "\"set_directory\"",
      "source": "\"set_directory\""
    }
  ],
  [
    {
      "type": "cmd",
      "data": "permission",
      "source": "permission \"request\" \"file admin\""
    },
    {
      "type": "str",
      "data": "\"request\"",
      "source": "\"request\""
    },
    {
      "type": "str",
      "data": "\"file admin\"",
      "source": "\"file admin\""
    }
  ],
  [
    {
      "type": "cmd",
      "data": "permission",
      "source": "permission \"request\" \"notifications\""
    },
    {
      "type": "str",
      "data": "\"request\"",
      "source": "\"request\""
    },
    {
      "type": "str",
      "data": "\"notifications\"",
      "source": "\"notifications\""
    }
  ],
  [
    {
      "type": "cmd",
      "data": "class",
      "source": "class sidebar (\n  mode = \"none\"\n  fn = () -> ()\n  resize = 0.5\n\n  _resizing = false\n  \n  def frameInnerRender(callback) (\n    if self._resizing and mouse_down.not() (\n      self._resizing = false\n    )\n    if self.mode == \"none\" (\n      callback()\n      return\n    )\n    local w = self.resize * frame.width\n    \n    local join_x = frame.right - w\n    \n    frame join_x frame.top frame.right frame.bottom (\n      goto 0 0\n      square frame.width frame.height 10 : c#c_prim\n      self.fn()\n    )\n    if abs(mouse_x - join_x) < 20 (\n      cursor \"ew-resize\"\n      if onclick (\n        self._resizing = true\n      )\n    )\n    frame frame.left frame.top join_x frame.bottom (\n      callback()\n    )\n    if self._resizing (\n      self.resize = frame.right - mouse_x / frame.width\n      self.resize = self.resize.clamp(0.2,0.8)\n    )\n  )\n)"
    },
    {
      "type": "str",
      "data": "sidebar",
      "source": "sidebar"
    },
    {
      "type": "blk",
      "data": [
        [
          {
            "type": "asi",
            "data": "=",
            "source": "mode = \"none\"",
            "left": {
              "type": "var",
              "data": "mode",
              "source": "mode"
            },
            "right": {
              "type": "str",
              "data": "\"none\"",
              "source": "\"none\""
            }
          }
        ],
        [
          {
            "type": "asi",
            "data": "=",
            "source": "fn = () -> ()",
            "left": {
              "type": "var",
              "data": "fn",
              "source": "fn"
            },
            "right": {
              "type": "fnc",
              "data": "function",
              "parameters": [
                {
                  "type": "str",
                  "data": ""
                },
                {
                  "type": "num",
                  "data": 0,
                  "source": "()"
                }
              ]
            }
          }
        ],
        [
          {
            "type": "asi",
            "data": "=",
            "source": "resize = 0.5",
            "left": {
              "type": "var",
              "data": "resize",
              "source": "resize"
            },
            "right": {
              "type": "num",
              "data": 0.5,
              "source": "0.5"
            }
          }
        ],
        [
          {
            "type": "asi",
            "data": "=",
            "source": "_resizing = false",
            "left": {
              "type": "var",
              "data": "_resizing",
              "source": "_resizing"
            },
            "right": {
              "type": "var",
              "data": false,
              "source": "false"
            }
          }
        ],
        [
          {
            "type": "asi",
            "data": "=",
            "source": "def frameInnerRender(callback) (\n    if self._resizing and mouse_down.not() (\n      self._resizing = false\n    )\n    if self.mode == \"none\" (\n      callback()\n      return\n    )\n    local w = self.resize * frame.width\n    \n    local join_x = frame.right - w\n    \n    frame join_x frame.top frame.right frame.bottom (\n      goto 0 0\n      square frame.width frame.height 10 : c#c_prim\n      self.fn()\n    )\n    if abs(mouse_x - join_x) < 20 (\n      cursor \"ew-resize\"\n      if onclick (\n        self._resizing = true\n      )\n    )\n    frame frame.left frame.top join_x frame.bottom (\n      callback()\n    )\n    if self._resizing (\n      self.resize = frame.right - mouse_x / frame.width\n      self.resize = self.resize.clamp(0.2,0.8)\n    )\n  )",
            "left": {
              "type": "var",
              "data": "frameInnerRender",
              "source": "def"
            },
            "right": {
              "type": "fnc",
              "data": "function",
              "parameters": [
                {
                  "type": "str",
                  "data": "callback"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "if",
                        "source": "if self._resizing and mouse_down.not() (\n      self._resizing = false\n    )"
                      },
                      {
                        "type": "log",
                        "data": "and",
                        "source": "and",
                        "left": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "self",
                              "source": "self"
                            },
                            {
                              "type": "var",
                              "data": "_resizing",
                              "source": "_resizing"
                            }
                          ],
                          "source": "self._resizing"
                        },
                        "right": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "mouse_down",
                              "source": "mouse_down"
                            },
                            {
                              "type": "mtv",
                              "data": "not",
                              "parameters": [],
                              "source": "not()"
                            }
                          ],
                          "source": "mouse_down.not()"
                        }
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "self._resizing = false",
                              "left": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "self",
                                    "source": "self"
                                  },
                                  {
                                    "type": "var",
                                    "data": "_resizing",
                                    "source": "_resizing"
                                  }
                                ],
                                "source": "self._resizing"
                              },
                              "right": {
                                "type": "var",
                                "data": false,
                                "source": "false"
                              }
                            }
                          ]
                        ],
                        "source": "(\n      self._resizing = false\n    )"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "if",
                        "source": "if self.mode == \"none\" (\n      callback()\n      return\n    )"
                      },
                      {
                        "type": "cmp",
                        "data": "==",
                        "source": "==",
                        "left": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "self",
                              "source": "self"
                            },
                            {
                              "type": "var",
                              "data": "mode",
                              "source": "mode"
                            }
                          ],
                          "source": "self.mode"
                        },
                        "right": {
                          "type": "str",
                          "data": "\"none\"",
                          "source": "\"none\""
                        }
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "fnc",
                              "data": "callback",
                              "parameters": [],
                              "source": "callback()"
                            }
                          ],
                          [
                            {
                              "type": "cmd",
                              "data": "return",
                              "source": "return"
                            }
                          ]
                        ],
                        "source": "(\n      callback()\n      return\n    )"
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "local w = self.resize * frame.width",
                        "left": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "this",
                              "source": "this"
                            },
                            {
                              "type": "var",
                              "data": "w",
                              "source": "w"
                            }
                          ],
                          "source": "this.w"
                        },
                        "right": {
                          "type": "opr",
                          "data": "*",
                          "source": "*",
                          "left": {
                            "type": "mtd",
                            "data": [
                              {
                                "type": "var",
                                "data": "self",
                                "source": "self"
                              },
                              {
                                "type": "var",
                                "data": "resize",
                                "source": "resize"
                              }
                            ],
                            "source": "self.resize"
                          },
                          "right": {
                            "type": "mtd",
                            "data": [
                              {
                                "type": "var",
                                "data": "frame",
                                "source": "frame"
                              },
                              {
                                "type": "var",
                                "data": "width",
                                "source": "width"
                              }
                            ],
                            "source": "frame.width"
                          }
                        }
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "local join_x = frame.right - w",
                        "left": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "this",
                              "source": "this"
                            },
                            {
                              "type": "var",
                              "data": "join_x",
                              "source": "join_x"
                            }
                          ],
                          "source": "this.join_x"
                        },
                        "right": {
                          "type": "opr",
                          "data": "-",
                          "source": "-",
                          "left": {
                            "type": "mtd",
                            "data": [
                              {
                                "type": "var",
                                "data": "frame",
                                "source": "frame"
                              },
                              {
                                "type": "var",
                                "data": "right",
                                "source": "right"
                              }
                            ],
                            "source": "frame.right"
                          },
                          "right": {
                            "type": "var",
                            "data": "w",
                            "source": "w"
                          }
                        }
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "frame",
                        "source": "frame join_x frame.top frame.right frame.bottom (\n      goto 0 0\n      square frame.width frame.height 10 : c#c_prim\n      self.fn()\n    )"
                      },
                      {
                        "type": "var",
                        "data": "join_x",
                        "source": "join_x"
                      },
                      {
                        "type": "mtd",
                        "data": [
                          {
                            "type": "var",
                            "data": "frame",
                            "source": "frame"
                          },
                          {
                            "type": "var",
                            "data": "top",
                            "source": "top"
                          }
                        ],
                        "source": "frame.top"
                      },
                      {
                        "type": "mtd",
                        "data": [
                          {
                            "type": "var",
                            "data": "frame",
                            "source": "frame"
                          },
                          {
                            "type": "var",
                            "data": "right",
                            "source": "right"
                          }
                        ],
                        "source": "frame.right"
                      },
                      {
                        "type": "mtd",
                        "data": [
                          {
                            "type": "var",
                            "data": "frame",
                            "source": "frame"
                          },
                          {
                            "type": "var",
                            "data": "bottom",
                            "source": "bottom"
                          }
                        ],
                        "source": "frame.bottom"
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "cmd",
                              "data": "goto",
                              "source": "goto 0 0"
                            },
                            {
                              "type": "num",
                              "data": 0,
                              "source": "0"
                            },
                            {
                              "type": "num",
                              "data": 0,
                              "source": "0"
                            }
                          ],
                          [
                            {
                              "type": "cmd",
                              "data": "square",
                              "source": "square frame.width frame.height 10 : c#c_prim"
                            },
                            {
                              "type": "mtd",
                              "data": [
                                {
                                  "type": "var",
                                  "data": "frame",
                                  "source": "frame"
                                },
                                {
                                  "type": "var",
                                  "data": "width",
                                  "source": "width"
                                }
                              ],
                              "source": "frame.width"
                            },
                            {
                              "type": "mtd",
                              "data": [
                                {
                                  "type": "var",
                                  "data": "frame",
                                  "source": "frame"
                                },
                                {
                                  "type": "var",
                                  "data": "height",
                                  "source": "height"
                                }
                              ],
                              "source": "frame.height"
                            },
                            {
                              "type": "num",
                              "data": 10,
                              "source": "10"
                            },
                            {
                              "type": "mod",
                              "data": [
                                "c",
                                {
                                  "type": "var",
                                  "data": "c_prim",
                                  "source": "c_prim"
                                }
                              ],
                              "source": "c#c_prim"
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=??",
                              "source": "self.fn()",
                              "left": {
                                "type": "var",
                                "data": "self",
                                "source": "self"
                              },
                              "right": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "self",
                                    "source": "self"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "fn",
                                    "parameters": [],
                                    "source": "fn()"
                                  }
                                ],
                                "source": "self.fn()"
                              }
                            }
                          ]
                        ],
                        "source": "(\n      goto 0 0\n      square frame.width frame.height 10 : c#c_prim\n      self.fn()\n    )"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "if",
                        "source": "if abs(mouse_x - join_x) < 20 (\n      cursor \"ew-resize\"\n      if onclick (\n        self._resizing = true\n      )\n    )"
                      },
                      {
                        "type": "cmp",
                        "data": "<",
                        "source": "<",
                        "left": {
                          "type": "fnc",
                          "data": "abs",
                          "parameters": [
                            null
                          ],
                          "source": "abs(mouse_x - join_x)"
                        },
                        "right": {
                          "type": "num",
                          "data": 20,
                          "source": "20"
                        }
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "cmd",
                              "data": "cursor",
                              "source": "cursor \"ew-resize\""
                            },
                            {
                              "type": "str",
                              "data": "\"ew-resize\"",
                              "source": "\"ew-resize\""
                            }
                          ],
                          [
                            {
                              "type": "cmd",
                              "data": "if",
                              "source": "if onclick (\n        self._resizing = true\n      )"
                            },
                            {
                              "type": "var",
                              "data": "onclick",
                              "source": "onclick"
                            },
                            {
                              "type": "blk",
                              "data": [
                                [
                                  {
                                    "type": "asi",
                                    "data": "=",
                                    "source": "self._resizing = true",
                                    "left": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "self",
                                          "source": "self"
                                        },
                                        {
                                          "type": "var",
                                          "data": "_resizing",
                                          "source": "_resizing"
                                        }
                                      ],
                                      "source": "self._resizing"
                                    },
                                    "right": {
                                      "type": "var",
                                      "data": true,
                                      "source": "true"
                                    }
                                  }
                                ]
                              ],
                              "source": "(\n        self._resizing = true\n      )"
                            }
                          ]
                        ],
                        "source": "(\n      cursor \"ew-resize\"\n      if onclick (\n        self._resizing = true\n      )\n    )"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "frame",
                        "source": "frame frame.left frame.top join_x frame.bottom (\n      callback()\n    )"
                      },
                      {
                        "type": "mtd",
                        "data": [
                          {
                            "type": "var",
                            "data": "frame",
                            "source": "frame"
                          },
                          {
                            "type": "var",
                            "data": "left",
                            "source": "left"
                          }
                        ],
                        "source": "frame.left"
                      },
                      {
                        "type": "mtd",
                        "data": [
                          {
                            "type": "var",
                            "data": "frame",
                            "source": "frame"
                          },
                          {
                            "type": "var",
                            "data": "top",
                            "source": "top"
                          }
                        ],
                        "source": "frame.top"
                      },
                      {
                        "type": "var",
                        "data": "join_x",
                        "source": "join_x"
                      },
                      {
                        "type": "mtd",
                        "data": [
                          {
                            "type": "var",
                            "data": "frame",
                            "source": "frame"
                          },
                          {
                            "type": "var",
                            "data": "bottom",
                            "source": "bottom"
                          }
                        ],
                        "source": "frame.bottom"
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "fnc",
                              "data": "callback",
                              "parameters": [],
                              "source": "callback()"
                            }
                          ]
                        ],
                        "source": "(\n      callback()\n    )"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "if",
                        "source": "if self._resizing (\n      self.resize = frame.right - mouse_x / frame.width\n      self.resize = self.resize.clamp(0.2,0.8)\n    )"
                      },
                      {
                        "type": "mtd",
                        "data": [
                          {
                            "type": "var",
                            "data": "self",
                            "source": "self"
                          },
                          {
                            "type": "var",
                            "data": "_resizing",
                            "source": "_resizing"
                          }
                        ],
                        "source": "self._resizing"
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "self.resize = frame.right - mouse_x / frame.width",
                              "left": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "self",
                                    "source": "self"
                                  },
                                  {
                                    "type": "var",
                                    "data": "resize",
                                    "source": "resize"
                                  }
                                ],
                                "source": "self.resize"
                              },
                              "right": {
                                "type": "opr",
                                "data": "/",
                                "source": "/",
                                "left": {
                                  "type": "opr",
                                  "data": "-",
                                  "source": "-",
                                  "left": {
                                    "type": "mtd",
                                    "data": [
                                      {
                                        "type": "var",
                                        "data": "frame",
                                        "source": "frame"
                                      },
                                      {
                                        "type": "var",
                                        "data": "right",
                                        "source": "right"
                                      }
                                    ],
                                    "source": "frame.right"
                                  },
                                  "right": {
                                    "type": "var",
                                    "data": "mouse_x",
                                    "source": "mouse_x"
                                  }
                                },
                                "right": {
                                  "type": "mtd",
                                  "data": [
                                    {
                                      "type": "var",
                                      "data": "frame",
                                      "source": "frame"
                                    },
                                    {
                                      "type": "var",
                                      "data": "width",
                                      "source": "width"
                                    }
                                  ],
                                  "source": "frame.width"
                                }
                              }
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "self.resize = self.resize.clamp(0.2,0.8)",
                              "left": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "self",
                                    "source": "self"
                                  },
                                  {
                                    "type": "var",
                                    "data": "resize",
                                    "source": "resize"
                                  }
                                ],
                                "source": "self.resize"
                              },
                              "right": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "self",
                                    "source": "self"
                                  },
                                  {
                                    "type": "var",
                                    "data": "resize",
                                    "source": "resize"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "clamp",
                                    "parameters": [
                                      {
                                        "type": "num",
                                        "data": 0.2,
                                        "source": "0.2"
                                      },
                                      {
                                        "type": "num",
                                        "data": 0.8,
                                        "source": "0.8"
                                      }
                                    ],
                                    "source": "clamp(0.2,0.8)"
                                  }
                                ],
                                "source": "self.resize.clamp(0.2,0.8)"
                              }
                            }
                          ]
                        ],
                        "source": "(\n      self.resize = frame.right - mouse_x / frame.width\n      self.resize = self.resize.clamp(0.2,0.8)\n    )"
                      }
                    ]
                  ],
                  "source": "(\n    if self._resizing and mouse_down.not() (\n      self._resizing = false\n    )\n    if self.mode == \"none\" (\n      callback()\n      return\n    )\n    local w = self.resize * frame.width\n    \n    local join_x = frame.right - w\n    \n    frame join_x frame.top frame.right frame.bottom (\n      goto 0 0\n      square frame.width frame.height 10 : c#c_prim\n      self.fn()\n    )\n    if abs(mouse_x - join_x) < 20 (\n      cursor \"ew-resize\"\n      if onclick (\n        self._resizing = true\n      )\n    )\n    frame frame.left frame.top join_x frame.bottom (\n      callback()\n    )\n    if self._resizing (\n      self.resize = frame.right - mouse_x / frame.width\n      self.resize = self.resize.clamp(0.2,0.8)\n    )\n  )"
                }
              ]
            }
          }
        ]
      ],
      "source": "(\n  mode = \"none\"\n  fn = () -> ()\n  resize = 0.5\n\n  _resizing = false\n  \n  def frameInnerRender(callback) (\n    if self._resizing and mouse_down.not() (\n      self._resizing = false\n    )\n    if self.mode == \"none\" (\n      callback()\n      return\n    )\n    local w = self.resize * frame.width\n    \n    local join_x = frame.right - w\n    \n    frame join_x frame.top frame.right frame.bottom (\n      goto 0 0\n      square frame.width frame.height 10 : c#c_prim\n      self.fn()\n    )\n    if abs(mouse_x - join_x) < 20 (\n      cursor \"ew-resize\"\n      if onclick (\n        self._resizing = true\n      )\n    )\n    frame frame.left frame.top join_x frame.bottom (\n      callback()\n    )\n    if self._resizing (\n      self.resize = frame.right - mouse_x / frame.width\n      self.resize = self.resize.clamp(0.2,0.8)\n    )\n  )\n)"
    }
  ],
  [
    {
      "type": "cmd",
      "data": "class",
      "source": "class editor (\n\n  def renderNorm() (\n    goto 0 0\n    c c_prim\n    textbox frame.width window.height - 45 current_tab 0 {\n      line_numbers: {\n        bg_colour: c_prim\n      },\n      sel_colour: c_seco,\n      text_colour: c_text,\n      ohf: current_ohf\n    }\n  )\n  \n  def renderShare() (\n    window \"responsive\" true\n    current_studio_page = \"Sync\"\n    goto 0 0\n    c c_prim\n    textbox frame.width window.height - 45 \"share\" 0 {\n      line_numbers: {\n        bg_colour: c_prim\n      },\n      sel_colour: c_seco,\n      text_colour: c_text,\n      ohf: current_ohf\n    }\n\n  \n    if inputs.selected.id == \"share\" (\n      if inputs.selected.cursor != last_cursor (\n        last_cursor = inputs.selected.cursor\n        rotur.gMessage(edit_connection.room, {\n          cmd: \"cursor\",\n          data: last_cursor\n        })\n      )\n      if inputs.share.len != last_input_share.len (\n        rotur.gMessage(edit_connection.room, {\n          cmd: \"full\",\n          data: inputs.share.join(\"\\n\")\n        })\n        last_input_share = inputs.share\n      ) else if inputs.share.join(\"\\n\") != last_input_share.join(\"\\n\") (\n        for i inputs.share.len (\n          if inputs.share.[i] != last_input_share.[i] (\n            rotur.gMessage(edit_connection.room, {\n              cmd: \"line\",\n              line: i,\n              data: inputs.share.[i].toStr()\n            })\n          )\n        )\n        last_input_share = inputs.share\n      )\n    )\n  )\n)"
    },
    {
      "type": "var",
      "data": "editor",
      "source": "editor"
    },
    {
      "type": "blk",
      "data": [
        [
          {
            "type": "asi",
            "data": "=",
            "source": "def renderNorm() (\n    goto 0 0\n    c c_prim\n    textbox frame.width window.height - 45 current_tab 0 {\n      line_numbers: {\n        bg_colour: c_prim\n      },\n      sel_colour: c_seco,\n      text_colour: c_text,\n      ohf: current_ohf\n    }\n  )",
            "left": {
              "type": "var",
              "data": "renderNorm",
              "source": "def"
            },
            "right": {
              "type": "fnc",
              "data": "function",
              "parameters": [
                {
                  "type": "str",
                  "data": ""
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "goto",
                        "source": "goto 0 0"
                      },
                      {
                        "type": "num",
                        "data": 0,
                        "source": "0"
                      },
                      {
                        "type": "num",
                        "data": 0,
                        "source": "0"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "c",
                        "source": "c c_prim"
                      },
                      {
                        "type": "var",
                        "data": "c_prim",
                        "source": "c_prim"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "textbox",
                        "source": "textbox frame.width window.height - 45 current_tab 0 {\n      line_numbers: {\n        bg_colour: c_prim\n      },\n      sel_colour: c_seco,\n      text_colour: c_text,\n      ohf: current_ohf\n    }"
                      },
                      {
                        "type": "mtd",
                        "data": [
                          {
                            "type": "var",
                            "data": "frame",
                            "source": "frame"
                          },
                          {
                            "type": "var",
                            "data": "width",
                            "source": "width"
                          }
                        ],
                        "source": "frame.width"
                      },
                      {
                        "type": "opr",
                        "data": "-",
                        "source": "-",
                        "left": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "window",
                              "source": "window"
                            },
                            {
                              "type": "var",
                              "data": "height",
                              "source": "height"
                            }
                          ],
                          "source": "window.height"
                        },
                        "right": {
                          "type": "num",
                          "data": 45,
                          "source": "45"
                        }
                      },
                      {
                        "type": "var",
                        "data": "current_tab",
                        "source": "current_tab"
                      },
                      {
                        "type": "num",
                        "data": 0,
                        "source": "0"
                      },
                      {
                        "type": "obj",
                        "data": {
                          "line_numbers": {
                            "type": "obj",
                            "data": {
                              "bg_colour": {
                                "type": "var",
                                "data": "c_prim",
                                "source": "c_prim"
                              }
                            },
                            "source": "{\n        bg_colour: c_prim\n      }"
                          },
                          "sel_colour": {
                            "type": "var",
                            "data": "c_seco",
                            "source": "c_seco"
                          },
                          "text_colour": {
                            "type": "var",
                            "data": "c_text",
                            "source": "c_text"
                          },
                          "ohf": {
                            "type": "var",
                            "data": "current_ohf",
                            "source": "current_ohf"
                          }
                        },
                        "source": "{\n      line_numbers: {\n        bg_colour: c_prim\n      },\n      sel_colour: c_seco,\n      text_colour: c_text,\n      ohf: current_ohf\n    }"
                      }
                    ]
                  ],
                  "source": "(\n    goto 0 0\n    c c_prim\n    textbox frame.width window.height - 45 current_tab 0 {\n      line_numbers: {\n        bg_colour: c_prim\n      },\n      sel_colour: c_seco,\n      text_colour: c_text,\n      ohf: current_ohf\n    }\n  )"
                }
              ]
            }
          }
        ],
        [
          {
            "type": "asi",
            "data": "=",
            "source": "def renderShare() (\n    window \"responsive\" true\n    current_studio_page = \"Sync\"\n    goto 0 0\n    c c_prim\n    textbox frame.width window.height - 45 \"share\" 0 {\n      line_numbers: {\n        bg_colour: c_prim\n      },\n      sel_colour: c_seco,\n      text_colour: c_text,\n      ohf: current_ohf\n    }\n\n  \n    if inputs.selected.id == \"share\" (\n      if inputs.selected.cursor != last_cursor (\n        last_cursor = inputs.selected.cursor\n        rotur.gMessage(edit_connection.room, {\n          cmd: \"cursor\",\n          data: last_cursor\n        })\n      )\n      if inputs.share.len != last_input_share.len (\n        rotur.gMessage(edit_connection.room, {\n          cmd: \"full\",\n          data: inputs.share.join(\"\\n\")\n        })\n        last_input_share = inputs.share\n      ) else if inputs.share.join(\"\\n\") != last_input_share.join(\"\\n\") (\n        for i inputs.share.len (\n          if inputs.share.[i] != last_input_share.[i] (\n            rotur.gMessage(edit_connection.room, {\n              cmd: \"line\",\n              line: i,\n              data: inputs.share.[i].toStr()\n            })\n          )\n        )\n        last_input_share = inputs.share\n      )\n    )\n  )",
            "left": {
              "type": "var",
              "data": "renderShare",
              "source": "def"
            },
            "right": {
              "type": "fnc",
              "data": "function",
              "parameters": [
                {
                  "type": "str",
                  "data": ""
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "window",
                        "source": "window \"responsive\" true"
                      },
                      {
                        "type": "str",
                        "data": "\"responsive\"",
                        "source": "\"responsive\""
                      },
                      {
                        "type": "var",
                        "data": true,
                        "source": "true"
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "current_studio_page = \"Sync\"",
                        "left": {
                          "type": "var",
                          "data": "current_studio_page",
                          "source": "current_studio_page"
                        },
                        "right": {
                          "type": "str",
                          "data": "\"Sync\"",
                          "source": "\"Sync\""
                        }
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "goto",
                        "source": "goto 0 0"
                      },
                      {
                        "type": "num",
                        "data": 0,
                        "source": "0"
                      },
                      {
                        "type": "num",
                        "data": 0,
                        "source": "0"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "c",
                        "source": "c c_prim"
                      },
                      {
                        "type": "var",
                        "data": "c_prim",
                        "source": "c_prim"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "textbox",
                        "source": "textbox frame.width window.height - 45 \"share\" 0 {\n      line_numbers: {\n        bg_colour: c_prim\n      },\n      sel_colour: c_seco,\n      text_colour: c_text,\n      ohf: current_ohf\n    }"
                      },
                      {
                        "type": "mtd",
                        "data": [
                          {
                            "type": "var",
                            "data": "frame",
                            "source": "frame"
                          },
                          {
                            "type": "var",
                            "data": "width",
                            "source": "width"
                          }
                        ],
                        "source": "frame.width"
                      },
                      {
                        "type": "opr",
                        "data": "-",
                        "source": "-",
                        "left": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "window",
                              "source": "window"
                            },
                            {
                              "type": "var",
                              "data": "height",
                              "source": "height"
                            }
                          ],
                          "source": "window.height"
                        },
                        "right": {
                          "type": "num",
                          "data": 45,
                          "source": "45"
                        }
                      },
                      {
                        "type": "str",
                        "data": "\"share\"",
                        "source": "\"share\""
                      },
                      {
                        "type": "num",
                        "data": 0,
                        "source": "0"
                      },
                      {
                        "type": "obj",
                        "data": {
                          "line_numbers": {
                            "type": "obj",
                            "data": {
                              "bg_colour": {
                                "type": "var",
                                "data": "c_prim",
                                "source": "c_prim"
                              }
                            },
                            "source": "{\n        bg_colour: c_prim\n      }"
                          },
                          "sel_colour": {
                            "type": "var",
                            "data": "c_seco",
                            "source": "c_seco"
                          },
                          "text_colour": {
                            "type": "var",
                            "data": "c_text",
                            "source": "c_text"
                          },
                          "ohf": {
                            "type": "var",
                            "data": "current_ohf",
                            "source": "current_ohf"
                          }
                        },
                        "source": "{\n      line_numbers: {\n        bg_colour: c_prim\n      },\n      sel_colour: c_seco,\n      text_colour: c_text,\n      ohf: current_ohf\n    }"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "if",
                        "source": "if inputs.selected.id == \"share\" (\n      if inputs.selected.cursor != last_cursor (\n        last_cursor = inputs.selected.cursor\n        rotur.gMessage(edit_connection.room, {\n          cmd: \"cursor\",\n          data: last_cursor\n        })\n      )\n      if inputs.share.len != last_input_share.len (\n        rotur.gMessage(edit_connection.room, {\n          cmd: \"full\",\n          data: inputs.share.join(\"\\n\")\n        })\n        last_input_share = inputs.share\n      ) else if inputs.share.join(\"\\n\") != last_input_share.join(\"\\n\") (\n        for i inputs.share.len (\n          if inputs.share.[i] != last_input_share.[i] (\n            rotur.gMessage(edit_connection.room, {\n              cmd: \"line\",\n              line: i,\n              data: inputs.share.[i].toStr()\n            })\n          )\n        )\n        last_input_share = inputs.share\n      )\n    )"
                      },
                      {
                        "type": "cmp",
                        "data": "==",
                        "source": "==",
                        "left": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "inputs",
                              "source": "inputs"
                            },
                            {
                              "type": "var",
                              "data": "selected",
                              "source": "selected"
                            },
                            {
                              "type": "var",
                              "data": "id",
                              "source": "id"
                            }
                          ],
                          "source": "inputs.selected.id"
                        },
                        "right": {
                          "type": "str",
                          "data": "\"share\"",
                          "source": "\"share\""
                        }
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "cmd",
                              "data": "if",
                              "source": "if inputs.selected.cursor != last_cursor (\n        last_cursor = inputs.selected.cursor\n        rotur.gMessage(edit_connection.room, {\n          cmd: \"cursor\",\n          data: last_cursor\n        })\n      )"
                            },
                            {
                              "type": "cmp",
                              "data": "!=",
                              "source": "!=",
                              "left": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "inputs",
                                    "source": "inputs"
                                  },
                                  {
                                    "type": "var",
                                    "data": "selected",
                                    "source": "selected"
                                  },
                                  {
                                    "type": "var",
                                    "data": "cursor",
                                    "source": "cursor"
                                  }
                                ],
                                "source": "inputs.selected.cursor"
                              },
                              "right": {
                                "type": "var",
                                "data": "last_cursor",
                                "source": "last_cursor"
                              }
                            },
                            {
                              "type": "blk",
                              "data": [
                                [
                                  {
                                    "type": "asi",
                                    "data": "=",
                                    "source": "last_cursor = inputs.selected.cursor",
                                    "left": {
                                      "type": "var",
                                      "data": "last_cursor",
                                      "source": "last_cursor"
                                    },
                                    "right": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "inputs",
                                          "source": "inputs"
                                        },
                                        {
                                          "type": "var",
                                          "data": "selected",
                                          "source": "selected"
                                        },
                                        {
                                          "type": "var",
                                          "data": "cursor",
                                          "source": "cursor"
                                        }
                                      ],
                                      "source": "inputs.selected.cursor"
                                    }
                                  }
                                ],
                                [
                                  {
                                    "type": "asi",
                                    "data": "=??",
                                    "source": "rotur.gMessage(edit_connection.room, {\n          cmd: \"cursor\",\n          data: last_cursor\n        })",
                                    "left": {
                                      "type": "var",
                                      "data": "rotur",
                                      "source": "rotur"
                                    },
                                    "right": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "rotur",
                                          "source": "rotur"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "gMessage",
                                          "parameters": [
                                            {
                                              "type": "mtd",
                                              "data": [
                                                {
                                                  "type": "var",
                                                  "data": "edit_connection",
                                                  "source": "edit_connection"
                                                },
                                                {
                                                  "type": "var",
                                                  "data": "room",
                                                  "source": "room"
                                                }
                                              ],
                                              "source": "edit_connection.room"
                                            },
                                            {
                                              "type": "obj",
                                              "data": {
                                                "cmd": {
                                                  "type": "str",
                                                  "data": "\"cursor\"",
                                                  "source": "\"cursor\""
                                                },
                                                "data": {
                                                  "type": "var",
                                                  "data": "last_cursor",
                                                  "source": "last_cursor"
                                                }
                                              },
                                              "source": "{\n          cmd: \"cursor\",\n          data: last_cursor\n        }"
                                            }
                                          ],
                                          "source": "gMessage(edit_connection.room, {\n          cmd: \"cursor\",\n          data: last_cursor\n        })"
                                        }
                                      ],
                                      "source": "rotur.gMessage(edit_connection.room, {\n          cmd: \"cursor\",\n          data: last_cursor\n        })"
                                    }
                                  }
                                ]
                              ],
                              "source": "(\n        last_cursor = inputs.selected.cursor\n        rotur.gMessage(edit_connection.room, {\n          cmd: \"cursor\",\n          data: last_cursor\n        })\n      )"
                            }
                          ],
                          [
                            {
                              "type": "cmd",
                              "data": "if",
                              "source": "if inputs.share.len != last_input_share.len (\n        rotur.gMessage(edit_connection.room, {\n          cmd: \"full\",\n          data: inputs.share.join(\"\\n\")\n        })\n        last_input_share = inputs.share\n      ) else if inputs.share.join(\"\\n\") != last_input_share.join(\"\\n\") (\n        for i inputs.share.len (\n          if inputs.share.[i] != last_input_share.[i] (\n            rotur.gMessage(edit_connection.room, {\n              cmd: \"line\",\n              line: i,\n              data: inputs.share.[i].toStr()\n            })\n          )\n        )\n        last_input_share = inputs.share\n      )"
                            },
                            {
                              "type": "cmp",
                              "data": "!=",
                              "source": "!=",
                              "left": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "inputs",
                                    "source": "inputs"
                                  },
                                  {
                                    "type": "var",
                                    "data": "share",
                                    "source": "share"
                                  },
                                  {
                                    "type": "var",
                                    "data": "len",
                                    "source": "len"
                                  }
                                ],
                                "source": "inputs.share.len"
                              },
                              "right": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "last_input_share",
                                    "source": "last_input_share"
                                  },
                                  {
                                    "type": "var",
                                    "data": "len",
                                    "source": "len"
                                  }
                                ],
                                "source": "last_input_share.len"
                              }
                            },
                            {
                              "type": "blk",
                              "data": [
                                [
                                  {
                                    "type": "asi",
                                    "data": "=??",
                                    "source": "rotur.gMessage(edit_connection.room, {\n          cmd: \"full\",\n          data: inputs.share.join(\"\\n\")\n        })",
                                    "left": {
                                      "type": "var",
                                      "data": "rotur",
                                      "source": "rotur"
                                    },
                                    "right": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "rotur",
                                          "source": "rotur"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "gMessage",
                                          "parameters": [
                                            {
                                              "type": "mtd",
                                              "data": [
                                                {
                                                  "type": "var",
                                                  "data": "edit_connection",
                                                  "source": "edit_connection"
                                                },
                                                {
                                                  "type": "var",
                                                  "data": "room",
                                                  "source": "room"
                                                }
                                              ],
                                              "source": "edit_connection.room"
                                            },
                                            {
                                              "type": "obj",
                                              "data": {
                                                "cmd": {
                                                  "type": "str",
                                                  "data": "\"full\"",
                                                  "source": "\"full\""
                                                },
                                                "data": {
                                                  "type": "mtd",
                                                  "data": [
                                                    {
                                                      "type": "var",
                                                      "data": "inputs",
                                                      "source": "inputs"
                                                    },
                                                    {
                                                      "type": "var",
                                                      "data": "share",
                                                      "source": "share"
                                                    },
                                                    {
                                                      "type": "mtv",
                                                      "data": "join",
                                                      "parameters": [
                                                        {
                                                          "type": "str",
                                                          "data": "\"\\n\"",
                                                          "source": "\"\\n\""
                                                        }
                                                      ],
                                                      "source": "join(\"\\n\")"
                                                    }
                                                  ],
                                                  "source": "inputs.share.join(\"\\n\")"
                                                }
                                              },
                                              "source": "{\n          cmd: \"full\",\n          data: inputs.share.join(\"\\n\")\n        }"
                                            }
                                          ],
                                          "source": "gMessage(edit_connection.room, {\n          cmd: \"full\",\n          data: inputs.share.join(\"\\n\")\n        })"
                                        }
                                      ],
                                      "source": "rotur.gMessage(edit_connection.room, {\n          cmd: \"full\",\n          data: inputs.share.join(\"\\n\")\n        })"
                                    }
                                  }
                                ],
                                [
                                  {
                                    "type": "asi",
                                    "data": "=",
                                    "source": "last_input_share = inputs.share",
                                    "left": {
                                      "type": "var",
                                      "data": "last_input_share",
                                      "source": "last_input_share"
                                    },
                                    "right": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "inputs",
                                          "source": "inputs"
                                        },
                                        {
                                          "type": "var",
                                          "data": "share",
                                          "source": "share"
                                        }
                                      ],
                                      "source": "inputs.share"
                                    }
                                  }
                                ]
                              ],
                              "source": "(\n        rotur.gMessage(edit_connection.room, {\n          cmd: \"full\",\n          data: inputs.share.join(\"\\n\")\n        })\n        last_input_share = inputs.share\n      )"
                            },
                            {
                              "type": "var",
                              "data": "else",
                              "source": "else"
                            },
                            {
                              "type": "var",
                              "data": "if",
                              "source": "if"
                            },
                            {
                              "type": "cmp",
                              "data": "!=",
                              "source": "!=",
                              "left": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "inputs",
                                    "source": "inputs"
                                  },
                                  {
                                    "type": "var",
                                    "data": "share",
                                    "source": "share"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "join",
                                    "parameters": [
                                      {
                                        "type": "str",
                                        "data": "\"\\n\"",
                                        "source": "\"\\n\""
                                      }
                                    ],
                                    "source": "join(\"\\n\")"
                                  }
                                ],
                                "source": "inputs.share.join(\"\\n\")"
                              },
                              "right": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "last_input_share",
                                    "source": "last_input_share"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "join",
                                    "parameters": [
                                      {
                                        "type": "str",
                                        "data": "\"\\n\"",
                                        "source": "\"\\n\""
                                      }
                                    ],
                                    "source": "join(\"\\n\")"
                                  }
                                ],
                                "source": "last_input_share.join(\"\\n\")"
                              }
                            },
                            {
                              "type": "blk",
                              "data": [
                                [
                                  {
                                    "type": "cmd",
                                    "data": "for",
                                    "source": "for i inputs.share.len (\n          if inputs.share.[i] != last_input_share.[i] (\n            rotur.gMessage(edit_connection.room, {\n              cmd: \"line\",\n              line: i,\n              data: inputs.share.[i].toStr()\n            })\n          )\n        )"
                                  },
                                  {
                                    "type": "str",
                                    "data": "i",
                                    "source": "i"
                                  },
                                  {
                                    "type": "mtd",
                                    "data": [
                                      {
                                        "type": "var",
                                        "data": "inputs",
                                        "source": "inputs"
                                      },
                                      {
                                        "type": "var",
                                        "data": "share",
                                        "source": "share"
                                      },
                                      {
                                        "type": "var",
                                        "data": "len",
                                        "source": "len"
                                      }
                                    ],
                                    "source": "inputs.share.len"
                                  },
                                  {
                                    "type": "blk",
                                    "data": [
                                      [
                                        {
                                          "type": "cmd",
                                          "data": "if",
                                          "source": "if inputs.share.[i] != last_input_share.[i] (\n            rotur.gMessage(edit_connection.room, {\n              cmd: \"line\",\n              line: i,\n              data: inputs.share.[i].toStr()\n            })\n          )"
                                        },
                                        {
                                          "type": "cmp",
                                          "data": "!=",
                                          "source": "!=",
                                          "left": {
                                            "type": "mtd",
                                            "data": [
                                              {
                                                "type": "var",
                                                "data": "inputs",
                                                "source": "inputs"
                                              },
                                              {
                                                "type": "var",
                                                "data": "share",
                                                "source": "share"
                                              },
                                              {
                                                "type": "mtv",
                                                "data": "item",
                                                "parameters": [
                                                  {
                                                    "type": "var",
                                                    "data": "i",
                                                    "source": "i"
                                                  }
                                                ],
                                                "source": "[i]"
                                              }
                                            ],
                                            "source": "inputs.share.[i]"
                                          },
                                          "right": {
                                            "type": "mtd",
                                            "data": [
                                              {
                                                "type": "var",
                                                "data": "last_input_share",
                                                "source": "last_input_share"
                                              },
                                              {
                                                "type": "mtv",
                                                "data": "item",
                                                "parameters": [
                                                  {
                                                    "type": "var",
                                                    "data": "i",
                                                    "source": "i"
                                                  }
                                                ],
                                                "source": "[i]"
                                              }
                                            ],
                                            "source": "last_input_share.[i]"
                                          }
                                        },
                                        {
                                          "type": "blk",
                                          "data": [
                                            [
                                              {
                                                "type": "asi",
                                                "data": "=??",
                                                "source": "rotur.gMessage(edit_connection.room, {\n              cmd: \"line\",\n              line: i,\n              data: inputs.share.[i].toStr()\n            })",
                                                "left": {
                                                  "type": "var",
                                                  "data": "rotur",
                                                  "source": "rotur"
                                                },
                                                "right": {
                                                  "type": "mtd",
                                                  "data": [
                                                    {
                                                      "type": "var",
                                                      "data": "rotur",
                                                      "source": "rotur"
                                                    },
                                                    {
                                                      "type": "mtv",
                                                      "data": "gMessage",
                                                      "parameters": [
                                                        {
                                                          "type": "mtd",
                                                          "data": [
                                                            {
                                                              "type": "var",
                                                              "data": "edit_connection",
                                                              "source": "edit_connection"
                                                            },
                                                            {
                                                              "type": "var",
                                                              "data": "room",
                                                              "source": "room"
                                                            }
                                                          ],
                                                          "source": "edit_connection.room"
                                                        },
                                                        {
                                                          "type": "obj",
                                                          "data": {
                                                            "cmd": {
                                                              "type": "str",
                                                              "data": "\"line\"",
                                                              "source": "\"line\""
                                                            },
                                                            "line": {
                                                              "type": "var",
                                                              "data": "i",
                                                              "source": "i"
                                                            },
                                                            "data": {
                                                              "type": "mtd",
                                                              "data": [
                                                                {
                                                                  "type": "var",
                                                                  "data": "inputs",
                                                                  "source": "inputs"
                                                                },
                                                                {
                                                                  "type": "var",
                                                                  "data": "share",
                                                                  "source": "share"
                                                                },
                                                                {
                                                                  "type": "mtv",
                                                                  "data": "item",
                                                                  "parameters": [
                                                                    {
                                                                      "type": "var",
                                                                      "data": "i",
                                                                      "source": "i"
                                                                    }
                                                                  ],
                                                                  "source": "[i]"
                                                                },
                                                                {
                                                                  "type": "mtv",
                                                                  "data": "toStr",
                                                                  "parameters": [],
                                                                  "source": "toStr()"
                                                                }
                                                              ],
                                                              "source": "inputs.share.[i].toStr()"
                                                            }
                                                          },
                                                          "source": "{\n              cmd: \"line\",\n              line: i,\n              data: inputs.share.[i].toStr()\n            }"
                                                        }
                                                      ],
                                                      "source": "gMessage(edit_connection.room, {\n              cmd: \"line\",\n              line: i,\n              data: inputs.share.[i].toStr()\n            })"
                                                    }
                                                  ],
                                                  "source": "rotur.gMessage(edit_connection.room, {\n              cmd: \"line\",\n              line: i,\n              data: inputs.share.[i].toStr()\n            })"
                                                }
                                              }
                                            ]
                                          ],
                                          "source": "(\n            rotur.gMessage(edit_connection.room, {\n              cmd: \"line\",\n              line: i,\n              data: inputs.share.[i].toStr()\n            })\n          )"
                                        }
                                      ]
                                    ],
                                    "source": "(\n          if inputs.share.[i] != last_input_share.[i] (\n            rotur.gMessage(edit_connection.room, {\n              cmd: \"line\",\n              line: i,\n              data: inputs.share.[i].toStr()\n            })\n          )\n        )"
                                  }
                                ],
                                [
                                  {
                                    "type": "asi",
                                    "data": "=",
                                    "source": "last_input_share = inputs.share",
                                    "left": {
                                      "type": "var",
                                      "data": "last_input_share",
                                      "source": "last_input_share"
                                    },
                                    "right": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "inputs",
                                          "source": "inputs"
                                        },
                                        {
                                          "type": "var",
                                          "data": "share",
                                          "source": "share"
                                        }
                                      ],
                                      "source": "inputs.share"
                                    }
                                  }
                                ]
                              ],
                              "source": "(\n        for i inputs.share.len (\n          if inputs.share.[i] != last_input_share.[i] (\n            rotur.gMessage(edit_connection.room, {\n              cmd: \"line\",\n              line: i,\n              data: inputs.share.[i].toStr()\n            })\n          )\n        )\n        last_input_share = inputs.share\n      )"
                            }
                          ]
                        ],
                        "source": "(\n      if inputs.selected.cursor != last_cursor (\n        last_cursor = inputs.selected.cursor\n        rotur.gMessage(edit_connection.room, {\n          cmd: \"cursor\",\n          data: last_cursor\n        })\n      )\n      if inputs.share.len != last_input_share.len (\n        rotur.gMessage(edit_connection.room, {\n          cmd: \"full\",\n          data: inputs.share.join(\"\\n\")\n        })\n        last_input_share = inputs.share\n      ) else if inputs.share.join(\"\\n\") != last_input_share.join(\"\\n\") (\n        for i inputs.share.len (\n          if inputs.share.[i] != last_input_share.[i] (\n            rotur.gMessage(edit_connection.room, {\n              cmd: \"line\",\n              line: i,\n              data: inputs.share.[i].toStr()\n            })\n          )\n        )\n        last_input_share = inputs.share\n      )\n    )"
                      }
                    ]
                  ],
                  "source": "(\n    window \"responsive\" true\n    current_studio_page = \"Sync\"\n    goto 0 0\n    c c_prim\n    textbox frame.width window.height - 45 \"share\" 0 {\n      line_numbers: {\n        bg_colour: c_prim\n      },\n      sel_colour: c_seco,\n      text_colour: c_text,\n      ohf: current_ohf\n    }\n\n  \n    if inputs.selected.id == \"share\" (\n      if inputs.selected.cursor != last_cursor (\n        last_cursor = inputs.selected.cursor\n        rotur.gMessage(edit_connection.room, {\n          cmd: \"cursor\",\n          data: last_cursor\n        })\n      )\n      if inputs.share.len != last_input_share.len (\n        rotur.gMessage(edit_connection.room, {\n          cmd: \"full\",\n          data: inputs.share.join(\"\\n\")\n        })\n        last_input_share = inputs.share\n      ) else if inputs.share.join(\"\\n\") != last_input_share.join(\"\\n\") (\n        for i inputs.share.len (\n          if inputs.share.[i] != last_input_share.[i] (\n            rotur.gMessage(edit_connection.room, {\n              cmd: \"line\",\n              line: i,\n              data: inputs.share.[i].toStr()\n            })\n          )\n        )\n        last_input_share = inputs.share\n      )\n    )\n  )"
                }
              ]
            }
          }
        ]
      ],
      "source": "(\n\n  def renderNorm() (\n    goto 0 0\n    c c_prim\n    textbox frame.width window.height - 45 current_tab 0 {\n      line_numbers: {\n        bg_colour: c_prim\n      },\n      sel_colour: c_seco,\n      text_colour: c_text,\n      ohf: current_ohf\n    }\n  )\n  \n  def renderShare() (\n    window \"responsive\" true\n    current_studio_page = \"Sync\"\n    goto 0 0\n    c c_prim\n    textbox frame.width window.height - 45 \"share\" 0 {\n      line_numbers: {\n        bg_colour: c_prim\n      },\n      sel_colour: c_seco,\n      text_colour: c_text,\n      ohf: current_ohf\n    }\n\n  \n    if inputs.selected.id == \"share\" (\n      if inputs.selected.cursor != last_cursor (\n        last_cursor = inputs.selected.cursor\n        rotur.gMessage(edit_connection.room, {\n          cmd: \"cursor\",\n          data: last_cursor\n        })\n      )\n      if inputs.share.len != last_input_share.len (\n        rotur.gMessage(edit_connection.room, {\n          cmd: \"full\",\n          data: inputs.share.join(\"\\n\")\n        })\n        last_input_share = inputs.share\n      ) else if inputs.share.join(\"\\n\") != last_input_share.join(\"\\n\") (\n        for i inputs.share.len (\n          if inputs.share.[i] != last_input_share.[i] (\n            rotur.gMessage(edit_connection.room, {\n              cmd: \"line\",\n              line: i,\n              data: inputs.share.[i].toStr()\n            })\n          )\n        )\n        last_input_share = inputs.share\n      )\n    )\n  )\n)"
    }
  ],
  [
    {
      "type": "asi",
      "data": "=??",
      "source": "window.show()",
      "left": {
        "type": "var",
        "data": "window",
        "source": "window"
      },
      "right": {
        "type": "mtd",
        "data": [
          {
            "type": "var",
            "data": "window",
            "source": "window"
          },
          {
            "type": "mtv",
            "data": "show",
            "parameters": [],
            "source": "show()"
          }
        ],
        "source": "window.show()"
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "def joinEditSession(id) (\n  if edit_connection != null (\n    rotur.unSubscribe(edit_connection.room)\n  )\n  edit_connection @= rotur.subscribe(id, my_id)\n  edit_connection.onmessage = def(packet) -> (\n    switch packet.val.cmd (\n      case \"full\"\n        inputs.share = packet.val.data.split(\"\\n\")\n        last_input_share = inputs.share\n        break\n      case \"reqfull\"\n        rotur.gMessage(edit_connection.room, {cmd:\"full\", data: inputs.share.join(\"\\n\")})\n        break\n      case \"rename\"\n        share_name = packet.val.name\n        break\n      case \"line\"\n        inputs.share.[packet.val.line] = packet.val.data\n        last_input_share.[packet.val.line] = packet.val.data\n        break\n      case \"cursor\"\n        cursors.[packet.origin] = packet.val\n        break\n    )\n  )\n  edit_connection.onclose = def() -> (\n    joinEditSession(edit_connection.room) \n  )\n  edit_connection.onjoin = def() -> (\n    inputs.share = open(sharing_tab).split(\"\\n\")\n    share_name = open(sharing_tab, [\"name\", \"type\"])\n    share_type = share_name.[2]\n    current_ohf = compileOHF(getOHF(share_type))\n    share_name = share_name.join(\"\")\n    add_tab \"^ Live Share\"\n  )\n)",
      "left": {
        "type": "var",
        "data": "joinEditSession",
        "source": "def"
      },
      "right": {
        "type": "fnc",
        "data": "function",
        "parameters": [
          {
            "type": "str",
            "data": "id"
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if edit_connection != null (\n    rotur.unSubscribe(edit_connection.room)\n  )"
                },
                {
                  "type": "cmp",
                  "data": "!=",
                  "source": "!=",
                  "left": {
                    "type": "var",
                    "data": "edit_connection",
                    "source": "edit_connection"
                  },
                  "right": {
                    "type": "unk",
                    "data": null,
                    "source": "null"
                  }
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "asi",
                        "data": "=??",
                        "source": "rotur.unSubscribe(edit_connection.room)",
                        "left": {
                          "type": "var",
                          "data": "rotur",
                          "source": "rotur"
                        },
                        "right": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "rotur",
                              "source": "rotur"
                            },
                            {
                              "type": "mtv",
                              "data": "unSubscribe",
                              "parameters": [
                                {
                                  "type": "mtd",
                                  "data": [
                                    {
                                      "type": "var",
                                      "data": "edit_connection",
                                      "source": "edit_connection"
                                    },
                                    {
                                      "type": "var",
                                      "data": "room",
                                      "source": "room"
                                    }
                                  ],
                                  "source": "edit_connection.room"
                                }
                              ],
                              "source": "unSubscribe(edit_connection.room)"
                            }
                          ],
                          "source": "rotur.unSubscribe(edit_connection.room)"
                        }
                      }
                    ]
                  ],
                  "source": "(\n    rotur.unSubscribe(edit_connection.room)\n  )"
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "@=",
                  "source": "edit_connection @= rotur.subscribe(id, my_id)",
                  "left": {
                    "type": "var",
                    "data": "edit_connection",
                    "source": "edit_connection"
                  },
                  "right": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "rotur",
                        "source": "rotur"
                      },
                      {
                        "type": "mtv",
                        "data": "subscribe",
                        "parameters": [
                          {
                            "type": "var",
                            "data": "id",
                            "source": "id"
                          },
                          {
                            "type": "var",
                            "data": "my_id",
                            "source": "my_id"
                          }
                        ],
                        "source": "subscribe(id, my_id)"
                      }
                    ],
                    "source": "rotur.subscribe(id, my_id)"
                  }
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "edit_connection.onmessage = def(packet) -> (\n    switch packet.val.cmd (\n      case \"full\"\n        inputs.share = packet.val.data.split(\"\\n\")\n        last_input_share = inputs.share\n        break\n      case \"reqfull\"\n        rotur.gMessage(edit_connection.room, {cmd:\"full\", data: inputs.share.join(\"\\n\")})\n        break\n      case \"rename\"\n        share_name = packet.val.name\n        break\n      case \"line\"\n        inputs.share.[packet.val.line] = packet.val.data\n        last_input_share.[packet.val.line] = packet.val.data\n        break\n      case \"cursor\"\n        cursors.[packet.origin] = packet.val\n        break\n    )\n  )",
                  "left": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "edit_connection",
                        "source": "edit_connection"
                      },
                      {
                        "type": "var",
                        "data": "onmessage",
                        "source": "onmessage"
                      }
                    ],
                    "source": "edit_connection.onmessage"
                  },
                  "right": {
                    "type": "fnc",
                    "data": "function",
                    "parameters": [
                      {
                        "type": "str",
                        "data": "packet"
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "cmd",
                              "data": "switch",
                              "source": "switch packet.val.cmd (\n      case \"full\"\n        inputs.share = packet.val.data.split(\"\\n\")\n        last_input_share = inputs.share\n        break\n      case \"reqfull\"\n        rotur.gMessage(edit_connection.room, {cmd:\"full\", data: inputs.share.join(\"\\n\")})\n        break\n      case \"rename\"\n        share_name = packet.val.name\n        break\n      case \"line\"\n        inputs.share.[packet.val.line] = packet.val.data\n        last_input_share.[packet.val.line] = packet.val.data\n        break\n      case \"cursor\"\n        cursors.[packet.origin] = packet.val\n        break\n    )"
                            },
                            {
                              "type": "mtd",
                              "data": [
                                {
                                  "type": "var",
                                  "data": "packet",
                                  "source": "packet"
                                },
                                {
                                  "type": "var",
                                  "data": "val",
                                  "source": "val"
                                },
                                {
                                  "type": "var",
                                  "data": "cmd",
                                  "source": "cmd"
                                }
                              ],
                              "source": "packet.val.cmd"
                            },
                            {
                              "type": "blk",
                              "data": [
                                [
                                  {
                                    "type": "cmd",
                                    "data": "case",
                                    "source": "case \"full\""
                                  },
                                  {
                                    "type": "str",
                                    "data": "\"full\"",
                                    "source": "\"full\""
                                  }
                                ],
                                [
                                  {
                                    "type": "asi",
                                    "data": "=",
                                    "source": "inputs.share = packet.val.data.split(\"\\n\")",
                                    "left": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "inputs",
                                          "source": "inputs"
                                        },
                                        {
                                          "type": "var",
                                          "data": "share",
                                          "source": "share"
                                        }
                                      ],
                                      "source": "inputs.share"
                                    },
                                    "right": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "packet",
                                          "source": "packet"
                                        },
                                        {
                                          "type": "var",
                                          "data": "val",
                                          "source": "val"
                                        },
                                        {
                                          "type": "var",
                                          "data": "data",
                                          "source": "data"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "split",
                                          "parameters": [
                                            {
                                              "type": "str",
                                              "data": "\"\\n\"",
                                              "source": "\"\\n\""
                                            }
                                          ],
                                          "source": "split(\"\\n\")"
                                        }
                                      ],
                                      "source": "packet.val.data.split(\"\\n\")"
                                    }
                                  }
                                ],
                                [
                                  {
                                    "type": "asi",
                                    "data": "=",
                                    "source": "last_input_share = inputs.share",
                                    "left": {
                                      "type": "var",
                                      "data": "last_input_share",
                                      "source": "last_input_share"
                                    },
                                    "right": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "inputs",
                                          "source": "inputs"
                                        },
                                        {
                                          "type": "var",
                                          "data": "share",
                                          "source": "share"
                                        }
                                      ],
                                      "source": "inputs.share"
                                    }
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "break",
                                    "source": "break"
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "case",
                                    "source": "case \"reqfull\""
                                  },
                                  {
                                    "type": "str",
                                    "data": "\"reqfull\"",
                                    "source": "\"reqfull\""
                                  }
                                ],
                                [
                                  {
                                    "type": "asi",
                                    "data": "=??",
                                    "source": "rotur.gMessage(edit_connection.room, {cmd:\"full\", data: inputs.share.join(\"\\n\")})",
                                    "left": {
                                      "type": "var",
                                      "data": "rotur",
                                      "source": "rotur"
                                    },
                                    "right": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "rotur",
                                          "source": "rotur"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "gMessage",
                                          "parameters": [
                                            {
                                              "type": "mtd",
                                              "data": [
                                                {
                                                  "type": "var",
                                                  "data": "edit_connection",
                                                  "source": "edit_connection"
                                                },
                                                {
                                                  "type": "var",
                                                  "data": "room",
                                                  "source": "room"
                                                }
                                              ],
                                              "source": "edit_connection.room"
                                            },
                                            {
                                              "type": "obj",
                                              "data": {
                                                "cmd": {
                                                  "type": "str",
                                                  "data": "\"full\"",
                                                  "source": "\"full\""
                                                },
                                                "data": {
                                                  "type": "mtd",
                                                  "data": [
                                                    {
                                                      "type": "var",
                                                      "data": "inputs",
                                                      "source": "inputs"
                                                    },
                                                    {
                                                      "type": "var",
                                                      "data": "share",
                                                      "source": "share"
                                                    },
                                                    {
                                                      "type": "mtv",
                                                      "data": "join",
                                                      "parameters": [
                                                        {
                                                          "type": "str",
                                                          "data": "\"\\n\"",
                                                          "source": "\"\\n\""
                                                        }
                                                      ],
                                                      "source": "join(\"\\n\")"
                                                    }
                                                  ],
                                                  "source": "inputs.share.join(\"\\n\")"
                                                }
                                              },
                                              "source": "{cmd:\"full\", data: inputs.share.join(\"\\n\")}"
                                            }
                                          ],
                                          "source": "gMessage(edit_connection.room, {cmd:\"full\", data: inputs.share.join(\"\\n\")})"
                                        }
                                      ],
                                      "source": "rotur.gMessage(edit_connection.room, {cmd:\"full\", data: inputs.share.join(\"\\n\")})"
                                    }
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "break",
                                    "source": "break"
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "case",
                                    "source": "case \"rename\""
                                  },
                                  {
                                    "type": "str",
                                    "data": "\"rename\"",
                                    "source": "\"rename\""
                                  }
                                ],
                                [
                                  {
                                    "type": "asi",
                                    "data": "=",
                                    "source": "share_name = packet.val.name",
                                    "left": {
                                      "type": "var",
                                      "data": "share_name",
                                      "source": "share_name"
                                    },
                                    "right": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "packet",
                                          "source": "packet"
                                        },
                                        {
                                          "type": "var",
                                          "data": "val",
                                          "source": "val"
                                        },
                                        {
                                          "type": "var",
                                          "data": "name",
                                          "source": "name"
                                        }
                                      ],
                                      "source": "packet.val.name"
                                    }
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "break",
                                    "source": "break"
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "case",
                                    "source": "case \"line\""
                                  },
                                  {
                                    "type": "str",
                                    "data": "\"line\"",
                                    "source": "\"line\""
                                  }
                                ],
                                [
                                  {
                                    "type": "asi",
                                    "data": "=",
                                    "source": "inputs.share.[packet.val.line] = packet.val.data",
                                    "left": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "inputs",
                                          "source": "inputs"
                                        },
                                        {
                                          "type": "var",
                                          "data": "share",
                                          "source": "share"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "item",
                                          "parameters": [
                                            {
                                              "type": "mtd",
                                              "data": [
                                                {
                                                  "type": "var",
                                                  "data": "packet",
                                                  "source": "packet"
                                                },
                                                {
                                                  "type": "var",
                                                  "data": "val",
                                                  "source": "val"
                                                },
                                                {
                                                  "type": "var",
                                                  "data": "line",
                                                  "source": "line"
                                                }
                                              ],
                                              "source": "packet.val.line"
                                            }
                                          ],
                                          "source": "[packet.val.line]"
                                        }
                                      ],
                                      "source": "inputs.share.[packet.val.line]"
                                    },
                                    "right": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "packet",
                                          "source": "packet"
                                        },
                                        {
                                          "type": "var",
                                          "data": "val",
                                          "source": "val"
                                        },
                                        {
                                          "type": "var",
                                          "data": "data",
                                          "source": "data"
                                        }
                                      ],
                                      "source": "packet.val.data"
                                    }
                                  }
                                ],
                                [
                                  {
                                    "type": "asi",
                                    "data": "=",
                                    "source": "last_input_share.[packet.val.line] = packet.val.data",
                                    "left": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "last_input_share",
                                          "source": "last_input_share"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "item",
                                          "parameters": [
                                            {
                                              "type": "mtd",
                                              "data": [
                                                {
                                                  "type": "var",
                                                  "data": "packet",
                                                  "source": "packet"
                                                },
                                                {
                                                  "type": "var",
                                                  "data": "val",
                                                  "source": "val"
                                                },
                                                {
                                                  "type": "var",
                                                  "data": "line",
                                                  "source": "line"
                                                }
                                              ],
                                              "source": "packet.val.line"
                                            }
                                          ],
                                          "source": "[packet.val.line]"
                                        }
                                      ],
                                      "source": "last_input_share.[packet.val.line]"
                                    },
                                    "right": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "packet",
                                          "source": "packet"
                                        },
                                        {
                                          "type": "var",
                                          "data": "val",
                                          "source": "val"
                                        },
                                        {
                                          "type": "var",
                                          "data": "data",
                                          "source": "data"
                                        }
                                      ],
                                      "source": "packet.val.data"
                                    }
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "break",
                                    "source": "break"
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "case",
                                    "source": "case \"cursor\""
                                  },
                                  {
                                    "type": "str",
                                    "data": "\"cursor\"",
                                    "source": "\"cursor\""
                                  }
                                ],
                                [
                                  {
                                    "type": "asi",
                                    "data": "=",
                                    "source": "cursors.[packet.origin] = packet.val",
                                    "left": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "cursors",
                                          "source": "cursors"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "item",
                                          "parameters": [
                                            {
                                              "type": "mtd",
                                              "data": [
                                                {
                                                  "type": "var",
                                                  "data": "packet",
                                                  "source": "packet"
                                                },
                                                {
                                                  "type": "var",
                                                  "data": "origin",
                                                  "source": "origin"
                                                }
                                              ],
                                              "source": "packet.origin"
                                            }
                                          ],
                                          "source": "[packet.origin]"
                                        }
                                      ],
                                      "source": "cursors.[packet.origin]"
                                    },
                                    "right": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "packet",
                                          "source": "packet"
                                        },
                                        {
                                          "type": "var",
                                          "data": "val",
                                          "source": "val"
                                        }
                                      ],
                                      "source": "packet.val"
                                    }
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "break",
                                    "source": "break"
                                  }
                                ]
                              ],
                              "source": "(\n      case \"full\"\n        inputs.share = packet.val.data.split(\"\\n\")\n        last_input_share = inputs.share\n        break\n      case \"reqfull\"\n        rotur.gMessage(edit_connection.room, {cmd:\"full\", data: inputs.share.join(\"\\n\")})\n        break\n      case \"rename\"\n        share_name = packet.val.name\n        break\n      case \"line\"\n        inputs.share.[packet.val.line] = packet.val.data\n        last_input_share.[packet.val.line] = packet.val.data\n        break\n      case \"cursor\"\n        cursors.[packet.origin] = packet.val\n        break\n    )"
                            }
                          ]
                        ],
                        "source": "(\n    switch packet.val.cmd (\n      case \"full\"\n        inputs.share = packet.val.data.split(\"\\n\")\n        last_input_share = inputs.share\n        break\n      case \"reqfull\"\n        rotur.gMessage(edit_connection.room, {cmd:\"full\", data: inputs.share.join(\"\\n\")})\n        break\n      case \"rename\"\n        share_name = packet.val.name\n        break\n      case \"line\"\n        inputs.share.[packet.val.line] = packet.val.data\n        last_input_share.[packet.val.line] = packet.val.data\n        break\n      case \"cursor\"\n        cursors.[packet.origin] = packet.val\n        break\n    )\n  )"
                      }
                    ]
                  }
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "edit_connection.onclose = def() -> (\n    joinEditSession(edit_connection.room) \n  )",
                  "left": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "edit_connection",
                        "source": "edit_connection"
                      },
                      {
                        "type": "var",
                        "data": "onclose",
                        "source": "onclose"
                      }
                    ],
                    "source": "edit_connection.onclose"
                  },
                  "right": {
                    "type": "fnc",
                    "data": "function",
                    "parameters": [
                      {
                        "type": "str",
                        "data": ""
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "fnc",
                              "data": "joinEditSession",
                              "parameters": [
                                {
                                  "type": "mtd",
                                  "data": [
                                    {
                                      "type": "var",
                                      "data": "edit_connection",
                                      "source": "edit_connection"
                                    },
                                    {
                                      "type": "var",
                                      "data": "room",
                                      "source": "room"
                                    }
                                  ],
                                  "source": "edit_connection.room"
                                }
                              ],
                              "source": "joinEditSession(edit_connection.room)"
                            }
                          ]
                        ],
                        "source": "(\n    joinEditSession(edit_connection.room) \n  )"
                      }
                    ]
                  }
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "edit_connection.onjoin = def() -> (\n    inputs.share = open(sharing_tab).split(\"\\n\")\n    share_name = open(sharing_tab, [\"name\", \"type\"])\n    share_type = share_name.[2]\n    current_ohf = compileOHF(getOHF(share_type))\n    share_name = share_name.join(\"\")\n    add_tab \"^ Live Share\"\n  )",
                  "left": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "edit_connection",
                        "source": "edit_connection"
                      },
                      {
                        "type": "var",
                        "data": "onjoin",
                        "source": "onjoin"
                      }
                    ],
                    "source": "edit_connection.onjoin"
                  },
                  "right": {
                    "type": "fnc",
                    "data": "function",
                    "parameters": [
                      {
                        "type": "str",
                        "data": ""
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "inputs.share = open(sharing_tab).split(\"\\n\")",
                              "left": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "inputs",
                                    "source": "inputs"
                                  },
                                  {
                                    "type": "var",
                                    "data": "share",
                                    "source": "share"
                                  }
                                ],
                                "source": "inputs.share"
                              },
                              "right": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "fnc",
                                    "data": "open",
                                    "parameters": [
                                      {
                                        "type": "var",
                                        "data": "sharing_tab",
                                        "source": "sharing_tab"
                                      }
                                    ],
                                    "source": "open(sharing_tab)"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "split",
                                    "parameters": [
                                      {
                                        "type": "str",
                                        "data": "\"\\n\"",
                                        "source": "\"\\n\""
                                      }
                                    ],
                                    "source": "split(\"\\n\")"
                                  }
                                ],
                                "source": "open(sharing_tab).split(\"\\n\")"
                              }
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "share_name = open(sharing_tab, [\"name\", \"type\"])",
                              "left": {
                                "type": "var",
                                "data": "share_name",
                                "source": "share_name"
                              },
                              "right": {
                                "type": "fnc",
                                "data": "open",
                                "parameters": [
                                  {
                                    "type": "var",
                                    "data": "sharing_tab",
                                    "source": "sharing_tab"
                                  },
                                  {
                                    "type": "arr",
                                    "data": [
                                      {
                                        "type": "str",
                                        "data": "\"name\"",
                                        "source": "\"name\""
                                      },
                                      {
                                        "type": "str",
                                        "data": "\"type\"",
                                        "source": "\"type\""
                                      }
                                    ],
                                    "source": "[\"name\", \"type\"]"
                                  }
                                ],
                                "source": "open(sharing_tab, [\"name\", \"type\"])"
                              }
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "share_type = share_name.[2]",
                              "left": {
                                "type": "var",
                                "data": "share_type",
                                "source": "share_type"
                              },
                              "right": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "share_name",
                                    "source": "share_name"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "item",
                                    "parameters": [
                                      {
                                        "type": "num",
                                        "data": 2,
                                        "source": "2"
                                      }
                                    ],
                                    "source": "[2]"
                                  }
                                ],
                                "source": "share_name.[2]"
                              }
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "current_ohf = compileOHF(getOHF(share_type))",
                              "left": {
                                "type": "var",
                                "data": "current_ohf",
                                "source": "current_ohf"
                              },
                              "right": {
                                "type": "fnc",
                                "data": "compileOHF",
                                "parameters": [
                                  {
                                    "type": "fnc",
                                    "data": "getOHF",
                                    "parameters": [
                                      {
                                        "type": "var",
                                        "data": "share_type",
                                        "source": "share_type"
                                      }
                                    ],
                                    "source": "getOHF(share_type)"
                                  }
                                ],
                                "source": "compileOHF(getOHF(share_type))"
                              }
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "share_name = share_name.join(\"\")",
                              "left": {
                                "type": "var",
                                "data": "share_name",
                                "source": "share_name"
                              },
                              "right": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "share_name",
                                    "source": "share_name"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "join",
                                    "parameters": [
                                      {
                                        "type": "str",
                                        "data": "\"\"",
                                        "source": "\"\""
                                      }
                                    ],
                                    "source": "join(\"\")"
                                  }
                                ],
                                "source": "share_name.join(\"\")"
                              }
                            }
                          ],
                          [
                            {
                              "type": "cmd",
                              "data": "add_tab",
                              "source": "add_tab \"^ Live Share\""
                            },
                            {
                              "type": "str",
                              "data": "\"^ Live Share\"",
                              "source": "\"^ Live Share\""
                            }
                          ]
                        ],
                        "source": "(\n    inputs.share = open(sharing_tab).split(\"\\n\")\n    share_name = open(sharing_tab, [\"name\", \"type\"])\n    share_type = share_name.[2]\n    current_ohf = compileOHF(getOHF(share_type))\n    share_name = share_name.join(\"\")\n    add_tab \"^ Live Share\"\n  )"
                      }
                    ]
                  }
                }
              ]
            ],
            "source": "(\n  if edit_connection != null (\n    rotur.unSubscribe(edit_connection.room)\n  )\n  edit_connection @= rotur.subscribe(id, my_id)\n  edit_connection.onmessage = def(packet) -> (\n    switch packet.val.cmd (\n      case \"full\"\n        inputs.share = packet.val.data.split(\"\\n\")\n        last_input_share = inputs.share\n        break\n      case \"reqfull\"\n        rotur.gMessage(edit_connection.room, {cmd:\"full\", data: inputs.share.join(\"\\n\")})\n        break\n      case \"rename\"\n        share_name = packet.val.name\n        break\n      case \"line\"\n        inputs.share.[packet.val.line] = packet.val.data\n        last_input_share.[packet.val.line] = packet.val.data\n        break\n      case \"cursor\"\n        cursors.[packet.origin] = packet.val\n        break\n    )\n  )\n  edit_connection.onclose = def() -> (\n    joinEditSession(edit_connection.room) \n  )\n  edit_connection.onjoin = def() -> (\n    inputs.share = open(sharing_tab).split(\"\\n\")\n    share_name = open(sharing_tab, [\"name\", \"type\"])\n    share_type = share_name.[2]\n    current_ohf = compileOHF(getOHF(share_type))\n    share_name = share_name.join(\"\")\n    add_tab \"^ Live Share\"\n  )\n)"
          }
        ]
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "def getOHF(string type) (\n  type = type.toUpper()\n  if type.startsWith(\".\") (\n    type.trim(2,-1)\n  )\n  local load_save = false\n  if (type ++ \".ohf\").saveExists() (\n    load_save = timestamp - (type ++ \".ohf\").saveGet(10) < 86400000\n  )\n  if load_save (\n    return (type ++ \".ohf\").saveGet()\n  ) else (\n    local OHF = (\"https://raw.githubusercontent.com/Mistium/Origin-OS/main/Other/OHF/\" ++ type.toUpper() ++ \".ohf\").httpGet()\n    if OHF == \"404: Not Found\" and (type ++ \".ohf\").saveExists() (\n      return (type ++ \".ohf\").saveGet()\n    ) else (\n      save type ++ \".ohf\" \"set\" OHF\n      return OHF\n    )\n  )\n)",
      "left": {
        "type": "var",
        "data": "getOHF",
        "source": "def"
      },
      "right": {
        "type": "fnc",
        "data": "function",
        "parameters": [
          {
            "type": "str",
            "data": "string type"
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "type = type.toUpper()",
                  "left": {
                    "type": "var",
                    "data": "type",
                    "source": "type"
                  },
                  "right": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "type",
                        "source": "type"
                      },
                      {
                        "type": "mtv",
                        "data": "toUpper",
                        "parameters": [],
                        "source": "toUpper()"
                      }
                    ],
                    "source": "type.toUpper()"
                  }
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if type.startsWith(\".\") (\n    type.trim(2,-1)\n  )"
                },
                {
                  "type": "mtd",
                  "data": [
                    {
                      "type": "var",
                      "data": "type",
                      "source": "type"
                    },
                    {
                      "type": "mtv",
                      "data": "startsWith",
                      "parameters": [
                        {
                          "type": "str",
                          "data": "\".\"",
                          "source": "\".\""
                        }
                      ],
                      "source": "startsWith(\".\")"
                    }
                  ],
                  "source": "type.startsWith(\".\")"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "asi",
                        "data": "=??",
                        "source": "type.trim(2,-1)",
                        "left": {
                          "type": "var",
                          "data": "type",
                          "source": "type"
                        },
                        "right": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "type",
                              "source": "type"
                            },
                            {
                              "type": "mtv",
                              "data": "trim",
                              "parameters": [
                                {
                                  "type": "num",
                                  "data": 2,
                                  "source": "2"
                                },
                                {
                                  "type": "num",
                                  "data": -1,
                                  "source": "-1"
                                }
                              ],
                              "source": "trim(2,-1)"
                            }
                          ],
                          "source": "type.trim(2,-1)"
                        }
                      }
                    ]
                  ],
                  "source": "(\n    type.trim(2,-1)\n  )"
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "local load_save = false",
                  "left": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "this",
                        "source": "this"
                      },
                      {
                        "type": "var",
                        "data": "load_save",
                        "source": "load_save"
                      }
                    ],
                    "source": "this.load_save"
                  },
                  "right": {
                    "type": "var",
                    "data": false,
                    "source": "false"
                  }
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if (type ++ \".ohf\").saveExists() (\n    load_save = timestamp - (type ++ \".ohf\").saveGet(10) < 86400000\n  )"
                },
                {
                  "type": "mtd",
                  "data": [
                    {
                      "type": "opr",
                      "data": "++",
                      "source": "(type ++ \".ohf\")",
                      "left": {
                        "type": "var",
                        "data": "type",
                        "source": "type"
                      },
                      "right": {
                        "type": "str",
                        "data": "\".ohf\"",
                        "source": "\".ohf\""
                      }
                    },
                    {
                      "type": "mtv",
                      "data": "saveExists",
                      "parameters": [],
                      "source": "saveExists()"
                    }
                  ],
                  "source": "(type ++ \".ohf\").saveExists()"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "load_save = timestamp - (type ++ \".ohf\").saveGet(10) < 86400000",
                        "left": {
                          "type": "var",
                          "data": "load_save",
                          "source": "load_save"
                        },
                        "right": {
                          "type": "cmp",
                          "data": "<",
                          "source": "<",
                          "left": {
                            "type": "opr",
                            "data": "-",
                            "source": "-",
                            "left": {
                              "type": "var",
                              "data": "timestamp",
                              "source": "timestamp"
                            },
                            "right": {
                              "type": "mtd",
                              "data": [
                                {
                                  "type": "opr",
                                  "data": "++",
                                  "source": "(type ++ \".ohf\")",
                                  "left": {
                                    "type": "var",
                                    "data": "type",
                                    "source": "type"
                                  },
                                  "right": {
                                    "type": "str",
                                    "data": "\".ohf\"",
                                    "source": "\".ohf\""
                                  }
                                },
                                {
                                  "type": "mtv",
                                  "data": "saveGet",
                                  "parameters": [
                                    {
                                      "type": "num",
                                      "data": 10,
                                      "source": "10"
                                    }
                                  ],
                                  "source": "saveGet(10)"
                                }
                              ],
                              "source": "(type ++ \".ohf\").saveGet(10)"
                            }
                          },
                          "right": {
                            "type": "num",
                            "data": 86400000,
                            "source": "86400000"
                          }
                        }
                      }
                    ]
                  ],
                  "source": "(\n    load_save = timestamp - (type ++ \".ohf\").saveGet(10) < 86400000\n  )"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if load_save (\n    return (type ++ \".ohf\").saveGet()\n  ) else (\n    local OHF = (\"https://raw.githubusercontent.com/Mistium/Origin-OS/main/Other/OHF/\" ++ type.toUpper() ++ \".ohf\").httpGet()\n    if OHF == \"404: Not Found\" and (type ++ \".ohf\").saveExists() (\n      return (type ++ \".ohf\").saveGet()\n    ) else (\n      save type ++ \".ohf\" \"set\" OHF\n      return OHF\n    )\n  )"
                },
                {
                  "type": "var",
                  "data": "load_save",
                  "source": "load_save"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "return",
                        "source": "return (type ++ \".ohf\").saveGet()"
                      },
                      {
                        "type": "mtd",
                        "data": [
                          {
                            "type": "opr",
                            "data": "++",
                            "source": "(type ++ \".ohf\")",
                            "left": {
                              "type": "var",
                              "data": "type",
                              "source": "type"
                            },
                            "right": {
                              "type": "str",
                              "data": "\".ohf\"",
                              "source": "\".ohf\""
                            }
                          },
                          {
                            "type": "mtv",
                            "data": "saveGet",
                            "parameters": [],
                            "source": "saveGet()"
                          }
                        ],
                        "source": "(type ++ \".ohf\").saveGet()"
                      }
                    ]
                  ],
                  "source": "(\n    return (type ++ \".ohf\").saveGet()\n  )"
                },
                {
                  "type": "var",
                  "data": "else",
                  "source": "else"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "local OHF = (\"https://raw.githubusercontent.com/Mistium/Origin-OS/main/Other/OHF/\" ++ type.toUpper() ++ \".ohf\").httpGet()",
                        "left": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "this",
                              "source": "this"
                            },
                            {
                              "type": "var",
                              "data": "OHF",
                              "source": "OHF"
                            }
                          ],
                          "source": "this.OHF"
                        },
                        "right": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "opr",
                              "data": "++",
                              "source": "(\"https://raw.githubusercontent.com/Mistium/Origin-OS/main/Other/OHF/\" ++ type.toUpper() ++ \".ohf\")",
                              "left": {
                                "type": "opr",
                                "data": "++",
                                "source": "++",
                                "left": {
                                  "type": "str",
                                  "data": "\"https://raw.githubusercontent.com/Mistium/Origin-OS/main/Other/OHF/\"",
                                  "source": "\"https://raw.githubusercontent.com/Mistium/Origin-OS/main/Other/OHF/\""
                                },
                                "right": {
                                  "type": "mtd",
                                  "data": [
                                    {
                                      "type": "var",
                                      "data": "type",
                                      "source": "type"
                                    },
                                    {
                                      "type": "mtv",
                                      "data": "toUpper",
                                      "parameters": [],
                                      "source": "toUpper()"
                                    }
                                  ],
                                  "source": "type.toUpper()"
                                }
                              },
                              "right": {
                                "type": "str",
                                "data": "\".ohf\"",
                                "source": "\".ohf\""
                              }
                            },
                            {
                              "type": "mtv",
                              "data": "httpGet",
                              "parameters": [],
                              "source": "httpGet()"
                            }
                          ],
                          "source": "(\"https://raw.githubusercontent.com/Mistium/Origin-OS/main/Other/OHF/\" ++ type.toUpper() ++ \".ohf\").httpGet()"
                        }
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "if",
                        "source": "if OHF == \"404: Not Found\" and (type ++ \".ohf\").saveExists() (\n      return (type ++ \".ohf\").saveGet()\n    ) else (\n      save type ++ \".ohf\" \"set\" OHF\n      return OHF\n    )"
                      },
                      {
                        "type": "log",
                        "data": "and",
                        "source": "and",
                        "left": {
                          "type": "cmp",
                          "data": "==",
                          "source": "==",
                          "left": {
                            "type": "var",
                            "data": "OHF",
                            "source": "OHF"
                          },
                          "right": {
                            "type": "str",
                            "data": "\"404: Not Found\"",
                            "source": "\"404: Not Found\""
                          }
                        },
                        "right": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "opr",
                              "data": "++",
                              "source": "(type ++ \".ohf\")",
                              "left": {
                                "type": "var",
                                "data": "type",
                                "source": "type"
                              },
                              "right": {
                                "type": "str",
                                "data": "\".ohf\"",
                                "source": "\".ohf\""
                              }
                            },
                            {
                              "type": "mtv",
                              "data": "saveExists",
                              "parameters": [],
                              "source": "saveExists()"
                            }
                          ],
                          "source": "(type ++ \".ohf\").saveExists()"
                        }
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "cmd",
                              "data": "return",
                              "source": "return (type ++ \".ohf\").saveGet()"
                            },
                            {
                              "type": "mtd",
                              "data": [
                                {
                                  "type": "opr",
                                  "data": "++",
                                  "source": "(type ++ \".ohf\")",
                                  "left": {
                                    "type": "var",
                                    "data": "type",
                                    "source": "type"
                                  },
                                  "right": {
                                    "type": "str",
                                    "data": "\".ohf\"",
                                    "source": "\".ohf\""
                                  }
                                },
                                {
                                  "type": "mtv",
                                  "data": "saveGet",
                                  "parameters": [],
                                  "source": "saveGet()"
                                }
                              ],
                              "source": "(type ++ \".ohf\").saveGet()"
                            }
                          ]
                        ],
                        "source": "(\n      return (type ++ \".ohf\").saveGet()\n    )"
                      },
                      {
                        "type": "var",
                        "data": "else",
                        "source": "else"
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "asi",
                              "data": "++",
                              "left": {
                                "type": "var",
                                "data": "save",
                                "source": "save"
                              },
                              "source": "save type ++ \".ohf\" \"set\" OHF"
                            },
                            {
                              "type": "str",
                              "data": "\"set\"",
                              "source": "\"set\""
                            },
                            {
                              "type": "var",
                              "data": "OHF",
                              "source": "OHF"
                            }
                          ],
                          [
                            {
                              "type": "cmd",
                              "data": "return",
                              "source": "return OHF"
                            },
                            {
                              "type": "var",
                              "data": "OHF",
                              "source": "OHF"
                            }
                          ]
                        ],
                        "source": "(\n      save type ++ \".ohf\" \"set\" OHF\n      return OHF\n    )"
                      }
                    ]
                  ],
                  "source": "(\n    local OHF = (\"https://raw.githubusercontent.com/Mistium/Origin-OS/main/Other/OHF/\" ++ type.toUpper() ++ \".ohf\").httpGet()\n    if OHF == \"404: Not Found\" and (type ++ \".ohf\").saveExists() (\n      return (type ++ \".ohf\").saveGet()\n    ) else (\n      save type ++ \".ohf\" \"set\" OHF\n      return OHF\n    )\n  )"
                }
              ]
            ],
            "source": "(\n  type = type.toUpper()\n  if type.startsWith(\".\") (\n    type.trim(2,-1)\n  )\n  local load_save = false\n  if (type ++ \".ohf\").saveExists() (\n    load_save = timestamp - (type ++ \".ohf\").saveGet(10) < 86400000\n  )\n  if load_save (\n    return (type ++ \".ohf\").saveGet()\n  ) else (\n    local OHF = (\"https://raw.githubusercontent.com/Mistium/Origin-OS/main/Other/OHF/\" ++ type.toUpper() ++ \".ohf\").httpGet()\n    if OHF == \"404: Not Found\" and (type ++ \".ohf\").saveExists() (\n      return (type ++ \".ohf\").saveGet()\n    ) else (\n      save type ++ \".ohf\" \"set\" OHF\n      return OHF\n    )\n  )\n)"
          }
        ]
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "def compileOHF(ohf) (\n  if typeof(ohf) != \"object\" (\n    return \"\"\n  )\n  \n  local output = {\n    tokens: {},\n    overrides: {},\n    parser: {}\n  }\n\n  try (\n    if ohf.categories != null (\n      each o ohf.categories.getValues() (\n        each r o.tokens (\n          output.tokens.[\"tkn:\" ++ r] = o.color\n        )\n      )\n    )\n  \n    if ohf.overrides != null (\n      each o ohf.overrides.getKeys() (\n        output.overrides.[o] = ohf.overrides.[o]\n      )\n    )\n  \n    output.parser = ohf.parser ?? {}\n    output.highlighter = ohf.highlighter ?? {}\n  ) catch o (\n    error o\n    return \"\"\n  )\n\n  return output\n)",
      "left": {
        "type": "var",
        "data": "compileOHF",
        "source": "def"
      },
      "right": {
        "type": "fnc",
        "data": "function",
        "parameters": [
          {
            "type": "str",
            "data": "ohf"
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if typeof(ohf) != \"object\" (\n    return \"\"\n  )"
                },
                {
                  "type": "cmp",
                  "data": "!=",
                  "source": "!=",
                  "left": {
                    "type": "fnc",
                    "data": "typeof",
                    "parameters": [
                      {
                        "type": "var",
                        "data": "ohf",
                        "source": "ohf"
                      }
                    ],
                    "source": "typeof(ohf)"
                  },
                  "right": {
                    "type": "str",
                    "data": "\"object\"",
                    "source": "\"object\""
                  }
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "return",
                        "source": "return \"\""
                      },
                      {
                        "type": "str",
                        "data": "\"\"",
                        "source": "\"\""
                      }
                    ]
                  ],
                  "source": "(\n    return \"\"\n  )"
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "local output = {\n    tokens: {},\n    overrides: {},\n    parser: {}\n  }",
                  "left": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "this",
                        "source": "this"
                      },
                      {
                        "type": "var",
                        "data": "output",
                        "source": "output"
                      }
                    ],
                    "source": "this.output"
                  },
                  "right": {
                    "type": "obj",
                    "data": {
                      "tokens": {
                        "type": "obj",
                        "data": {},
                        "source": "{}"
                      },
                      "overrides": {
                        "type": "obj",
                        "data": {},
                        "source": "{}"
                      },
                      "parser": {
                        "type": "obj",
                        "data": {},
                        "source": "{}"
                      }
                    },
                    "source": "{\n    tokens: {},\n    overrides: {},\n    parser: {}\n  }"
                  }
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "try",
                  "source": "try (\n    if ohf.categories != null (\n      each o ohf.categories.getValues() (\n        each r o.tokens (\n          output.tokens.[\"tkn:\" ++ r] = o.color\n        )\n      )\n    )\n  \n    if ohf.overrides != null (\n      each o ohf.overrides.getKeys() (\n        output.overrides.[o] = ohf.overrides.[o]\n      )\n    )\n  \n    output.parser = ohf.parser ?? {}\n    output.highlighter = ohf.highlighter ?? {}\n  ) catch o (\n    error o\n    return \"\"\n  )"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "if",
                        "source": "if ohf.categories != null (\n      each o ohf.categories.getValues() (\n        each r o.tokens (\n          output.tokens.[\"tkn:\" ++ r] = o.color\n        )\n      )\n    )"
                      },
                      {
                        "type": "cmp",
                        "data": "!=",
                        "source": "!=",
                        "left": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "ohf",
                              "source": "ohf"
                            },
                            {
                              "type": "var",
                              "data": "categories",
                              "source": "categories"
                            }
                          ],
                          "source": "ohf.categories"
                        },
                        "right": {
                          "type": "unk",
                          "data": null,
                          "source": "null"
                        }
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "cmd",
                              "data": "each",
                              "source": "each o ohf.categories.getValues() (\n        each r o.tokens (\n          output.tokens.[\"tkn:\" ++ r] = o.color\n        )\n      )"
                            },
                            {
                              "type": "str",
                              "data": "o",
                              "source": "o"
                            },
                            {
                              "type": "mtd",
                              "data": [
                                {
                                  "type": "var",
                                  "data": "ohf",
                                  "source": "ohf"
                                },
                                {
                                  "type": "var",
                                  "data": "categories",
                                  "source": "categories"
                                },
                                {
                                  "type": "mtv",
                                  "data": "getValues",
                                  "parameters": [],
                                  "source": "getValues()"
                                }
                              ],
                              "source": "ohf.categories.getValues()"
                            },
                            {
                              "type": "blk",
                              "data": [
                                [
                                  {
                                    "type": "cmd",
                                    "data": "each",
                                    "source": "each r o.tokens (\n          output.tokens.[\"tkn:\" ++ r] = o.color\n        )"
                                  },
                                  {
                                    "type": "str",
                                    "data": "r",
                                    "source": "r"
                                  },
                                  {
                                    "type": "mtd",
                                    "data": [
                                      {
                                        "type": "var",
                                        "data": "o",
                                        "source": "o"
                                      },
                                      {
                                        "type": "var",
                                        "data": "tokens",
                                        "source": "tokens"
                                      }
                                    ],
                                    "source": "o.tokens"
                                  },
                                  {
                                    "type": "blk",
                                    "data": [
                                      [
                                        {
                                          "type": "asi",
                                          "data": "=",
                                          "source": "output.tokens.[\"tkn:\" ++ r] = o.color",
                                          "left": {
                                            "type": "mtd",
                                            "data": [
                                              {
                                                "type": "var",
                                                "data": "output",
                                                "source": "output"
                                              },
                                              {
                                                "type": "var",
                                                "data": "tokens",
                                                "source": "tokens"
                                              },
                                              {
                                                "type": "mtv",
                                                "data": "item",
                                                "parameters": [
                                                  {
                                                    "type": "opr",
                                                    "data": "++",
                                                    "source": "++",
                                                    "left": {
                                                      "type": "str",
                                                      "data": "\"tkn:\"",
                                                      "source": "\"tkn:\""
                                                    },
                                                    "right": {
                                                      "type": "var",
                                                      "data": "r",
                                                      "source": "r"
                                                    }
                                                  }
                                                ],
                                                "source": "[\"tkn:\" ++ r]"
                                              }
                                            ],
                                            "source": "output.tokens.[\"tkn:\" ++ r]"
                                          },
                                          "right": {
                                            "type": "mtd",
                                            "data": [
                                              {
                                                "type": "var",
                                                "data": "o",
                                                "source": "o"
                                              },
                                              {
                                                "type": "var",
                                                "data": "color",
                                                "source": "color"
                                              }
                                            ],
                                            "source": "o.color"
                                          }
                                        }
                                      ]
                                    ],
                                    "source": "(\n          output.tokens.[\"tkn:\" ++ r] = o.color\n        )"
                                  }
                                ]
                              ],
                              "source": "(\n        each r o.tokens (\n          output.tokens.[\"tkn:\" ++ r] = o.color\n        )\n      )"
                            }
                          ]
                        ],
                        "source": "(\n      each o ohf.categories.getValues() (\n        each r o.tokens (\n          output.tokens.[\"tkn:\" ++ r] = o.color\n        )\n      )\n    )"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "if",
                        "source": "if ohf.overrides != null (\n      each o ohf.overrides.getKeys() (\n        output.overrides.[o] = ohf.overrides.[o]\n      )\n    )"
                      },
                      {
                        "type": "cmp",
                        "data": "!=",
                        "source": "!=",
                        "left": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "ohf",
                              "source": "ohf"
                            },
                            {
                              "type": "var",
                              "data": "overrides",
                              "source": "overrides"
                            }
                          ],
                          "source": "ohf.overrides"
                        },
                        "right": {
                          "type": "unk",
                          "data": null,
                          "source": "null"
                        }
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "cmd",
                              "data": "each",
                              "source": "each o ohf.overrides.getKeys() (\n        output.overrides.[o] = ohf.overrides.[o]\n      )"
                            },
                            {
                              "type": "str",
                              "data": "o",
                              "source": "o"
                            },
                            {
                              "type": "mtd",
                              "data": [
                                {
                                  "type": "var",
                                  "data": "ohf",
                                  "source": "ohf"
                                },
                                {
                                  "type": "var",
                                  "data": "overrides",
                                  "source": "overrides"
                                },
                                {
                                  "type": "mtv",
                                  "data": "getKeys",
                                  "parameters": [],
                                  "source": "getKeys()"
                                }
                              ],
                              "source": "ohf.overrides.getKeys()"
                            },
                            {
                              "type": "blk",
                              "data": [
                                [
                                  {
                                    "type": "asi",
                                    "data": "=",
                                    "source": "output.overrides.[o] = ohf.overrides.[o]",
                                    "left": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "output",
                                          "source": "output"
                                        },
                                        {
                                          "type": "var",
                                          "data": "overrides",
                                          "source": "overrides"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "item",
                                          "parameters": [
                                            {
                                              "type": "var",
                                              "data": "o",
                                              "source": "o"
                                            }
                                          ],
                                          "source": "[o]"
                                        }
                                      ],
                                      "source": "output.overrides.[o]"
                                    },
                                    "right": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "ohf",
                                          "source": "ohf"
                                        },
                                        {
                                          "type": "var",
                                          "data": "overrides",
                                          "source": "overrides"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "item",
                                          "parameters": [
                                            {
                                              "type": "var",
                                              "data": "o",
                                              "source": "o"
                                            }
                                          ],
                                          "source": "[o]"
                                        }
                                      ],
                                      "source": "ohf.overrides.[o]"
                                    }
                                  }
                                ]
                              ],
                              "source": "(\n        output.overrides.[o] = ohf.overrides.[o]\n      )"
                            }
                          ]
                        ],
                        "source": "(\n      each o ohf.overrides.getKeys() (\n        output.overrides.[o] = ohf.overrides.[o]\n      )\n    )"
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "output.parser = ohf.parser ?? {}",
                        "left": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "output",
                              "source": "output"
                            },
                            {
                              "type": "var",
                              "data": "parser",
                              "source": "parser"
                            }
                          ],
                          "source": "output.parser"
                        },
                        "right": {
                          "type": "opr",
                          "data": "??",
                          "source": "??",
                          "left": {
                            "type": "mtd",
                            "data": [
                              {
                                "type": "var",
                                "data": "ohf",
                                "source": "ohf"
                              },
                              {
                                "type": "var",
                                "data": "parser",
                                "source": "parser"
                              }
                            ],
                            "source": "ohf.parser"
                          },
                          "right": {
                            "type": "obj",
                            "data": {},
                            "source": "{}"
                          }
                        }
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "output.highlighter = ohf.highlighter ?? {}",
                        "left": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "output",
                              "source": "output"
                            },
                            {
                              "type": "var",
                              "data": "highlighter",
                              "source": "highlighter"
                            }
                          ],
                          "source": "output.highlighter"
                        },
                        "right": {
                          "type": "opr",
                          "data": "??",
                          "source": "??",
                          "left": {
                            "type": "mtd",
                            "data": [
                              {
                                "type": "var",
                                "data": "ohf",
                                "source": "ohf"
                              },
                              {
                                "type": "var",
                                "data": "highlighter",
                                "source": "highlighter"
                              }
                            ],
                            "source": "ohf.highlighter"
                          },
                          "right": {
                            "type": "obj",
                            "data": {},
                            "source": "{}"
                          }
                        }
                      }
                    ]
                  ],
                  "source": "(\n    if ohf.categories != null (\n      each o ohf.categories.getValues() (\n        each r o.tokens (\n          output.tokens.[\"tkn:\" ++ r] = o.color\n        )\n      )\n    )\n  \n    if ohf.overrides != null (\n      each o ohf.overrides.getKeys() (\n        output.overrides.[o] = ohf.overrides.[o]\n      )\n    )\n  \n    output.parser = ohf.parser ?? {}\n    output.highlighter = ohf.highlighter ?? {}\n  )"
                },
                {
                  "type": "var",
                  "data": "catch",
                  "source": "catch"
                },
                {
                  "type": "var",
                  "data": "o",
                  "source": "o"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "error",
                        "source": "error o"
                      },
                      {
                        "type": "var",
                        "data": "o",
                        "source": "o"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "return",
                        "source": "return \"\""
                      },
                      {
                        "type": "str",
                        "data": "\"\"",
                        "source": "\"\""
                      }
                    ]
                  ],
                  "source": "(\n    error o\n    return \"\"\n  )"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "return",
                  "source": "return output"
                },
                {
                  "type": "var",
                  "data": "output",
                  "source": "output"
                }
              ]
            ],
            "source": "(\n  if typeof(ohf) != \"object\" (\n    return \"\"\n  )\n  \n  local output = {\n    tokens: {},\n    overrides: {},\n    parser: {}\n  }\n\n  try (\n    if ohf.categories != null (\n      each o ohf.categories.getValues() (\n        each r o.tokens (\n          output.tokens.[\"tkn:\" ++ r] = o.color\n        )\n      )\n    )\n  \n    if ohf.overrides != null (\n      each o ohf.overrides.getKeys() (\n        output.overrides.[o] = ohf.overrides.[o]\n      )\n    )\n  \n    output.parser = ohf.parser ?? {}\n    output.highlighter = ohf.highlighter ?? {}\n  ) catch o (\n    error o\n    return \"\"\n  )\n\n  return output\n)"
          }
        ]
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "host = false",
      "left": {
        "type": "var",
        "data": "host",
        "source": "host"
      },
      "right": {
        "type": "var",
        "data": false,
        "source": "false"
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "my_id = ouidNew().trim(1,3)",
      "left": {
        "type": "var",
        "data": "my_id",
        "source": "my_id"
      },
      "right": {
        "type": "mtd",
        "data": [
          {
            "type": "fnc",
            "data": "ouidNew",
            "parameters": [],
            "source": "ouidNew()"
          },
          {
            "type": "mtv",
            "data": "trim",
            "parameters": [
              {
                "type": "num",
                "data": 1,
                "source": "1"
              },
              {
                "type": "num",
                "data": 3,
                "source": "3"
              }
            ],
            "source": "trim(1,3)"
          }
        ],
        "source": "ouidNew().trim(1,3)"
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "edit_session = null",
      "left": {
        "type": "var",
        "data": "edit_session",
        "source": "edit_session"
      },
      "right": {
        "type": "unk",
        "data": null,
        "source": "null"
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "edit_connection = null",
      "left": {
        "type": "var",
        "data": "edit_connection",
        "source": "edit_connection"
      },
      "right": {
        "type": "unk",
        "data": null,
        "source": "null"
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "sharing_tab = null",
      "left": {
        "type": "var",
        "data": "sharing_tab",
        "source": "sharing_tab"
      },
      "right": {
        "type": "unk",
        "data": null,
        "source": "null"
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "share_name = null",
      "left": {
        "type": "var",
        "data": "share_name",
        "source": "share_name"
      },
      "right": {
        "type": "unk",
        "data": null,
        "source": "null"
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "last_cursor = \"\"",
      "left": {
        "type": "var",
        "data": "last_cursor",
        "source": "last_cursor"
      },
      "right": {
        "type": "str",
        "data": "\"\"",
        "source": "\"\""
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "last_share_input = \"\"",
      "left": {
        "type": "var",
        "data": "last_share_input",
        "source": "last_share_input"
      },
      "right": {
        "type": "str",
        "data": "\"\"",
        "source": "\"\""
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "invites = {}",
      "left": {
        "type": "var",
        "data": "invites",
        "source": "invites"
      },
      "right": {
        "type": "obj",
        "data": {},
        "source": "{}"
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "connection = {}",
      "left": {
        "type": "var",
        "data": "connection",
        "source": "connection"
      },
      "right": {
        "type": "obj",
        "data": {},
        "source": "{}"
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "def setupRotur() (\n  connection @= rotur.subscribe(\"Studio\", my_id)\n  connection.onmessage = def(packet) -> (\n    if packet.val.cmd == \"join\" (\n      invites.[packet.origin.username] = packet\n    )\n  )\n  connection.onclose = def() -> (\n    setupRotur()\n  )\n)",
      "left": {
        "type": "var",
        "data": "setupRotur",
        "source": "def"
      },
      "right": {
        "type": "fnc",
        "data": "function",
        "parameters": [
          {
            "type": "str",
            "data": ""
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "asi",
                  "data": "@=",
                  "source": "connection @= rotur.subscribe(\"Studio\", my_id)",
                  "left": {
                    "type": "var",
                    "data": "connection",
                    "source": "connection"
                  },
                  "right": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "rotur",
                        "source": "rotur"
                      },
                      {
                        "type": "mtv",
                        "data": "subscribe",
                        "parameters": [
                          {
                            "type": "str",
                            "data": "\"Studio\"",
                            "source": "\"Studio\""
                          },
                          {
                            "type": "var",
                            "data": "my_id",
                            "source": "my_id"
                          }
                        ],
                        "source": "subscribe(\"Studio\", my_id)"
                      }
                    ],
                    "source": "rotur.subscribe(\"Studio\", my_id)"
                  }
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "connection.onmessage = def(packet) -> (\n    if packet.val.cmd == \"join\" (\n      invites.[packet.origin.username] = packet\n    )\n  )",
                  "left": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "connection",
                        "source": "connection"
                      },
                      {
                        "type": "var",
                        "data": "onmessage",
                        "source": "onmessage"
                      }
                    ],
                    "source": "connection.onmessage"
                  },
                  "right": {
                    "type": "fnc",
                    "data": "function",
                    "parameters": [
                      {
                        "type": "str",
                        "data": "packet"
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "cmd",
                              "data": "if",
                              "source": "if packet.val.cmd == \"join\" (\n      invites.[packet.origin.username] = packet\n    )"
                            },
                            {
                              "type": "cmp",
                              "data": "==",
                              "source": "==",
                              "left": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "packet",
                                    "source": "packet"
                                  },
                                  {
                                    "type": "var",
                                    "data": "val",
                                    "source": "val"
                                  },
                                  {
                                    "type": "var",
                                    "data": "cmd",
                                    "source": "cmd"
                                  }
                                ],
                                "source": "packet.val.cmd"
                              },
                              "right": {
                                "type": "str",
                                "data": "\"join\"",
                                "source": "\"join\""
                              }
                            },
                            {
                              "type": "blk",
                              "data": [
                                [
                                  {
                                    "type": "asi",
                                    "data": "=",
                                    "source": "invites.[packet.origin.username] = packet",
                                    "left": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "invites",
                                          "source": "invites"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "item",
                                          "parameters": [
                                            {
                                              "type": "mtd",
                                              "data": [
                                                {
                                                  "type": "var",
                                                  "data": "packet",
                                                  "source": "packet"
                                                },
                                                {
                                                  "type": "var",
                                                  "data": "origin",
                                                  "source": "origin"
                                                },
                                                {
                                                  "type": "var",
                                                  "data": "username",
                                                  "source": "username"
                                                }
                                              ],
                                              "source": "packet.origin.username"
                                            }
                                          ],
                                          "source": "[packet.origin.username]"
                                        }
                                      ],
                                      "source": "invites.[packet.origin.username]"
                                    },
                                    "right": {
                                      "type": "var",
                                      "data": "packet",
                                      "source": "packet"
                                    }
                                  }
                                ]
                              ],
                              "source": "(\n      invites.[packet.origin.username] = packet\n    )"
                            }
                          ]
                        ],
                        "source": "(\n    if packet.val.cmd == \"join\" (\n      invites.[packet.origin.username] = packet\n    )\n  )"
                      }
                    ]
                  }
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "connection.onclose = def() -> (\n    setupRotur()\n  )",
                  "left": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "connection",
                        "source": "connection"
                      },
                      {
                        "type": "var",
                        "data": "onclose",
                        "source": "onclose"
                      }
                    ],
                    "source": "connection.onclose"
                  },
                  "right": {
                    "type": "fnc",
                    "data": "function",
                    "parameters": [
                      {
                        "type": "str",
                        "data": ""
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "fnc",
                              "data": "setupRotur",
                              "parameters": [],
                              "source": "setupRotur()"
                            }
                          ]
                        ],
                        "source": "(\n    setupRotur()\n  )"
                      }
                    ]
                  }
                }
              ]
            ],
            "source": "(\n  connection @= rotur.subscribe(\"Studio\", my_id)\n  connection.onmessage = def(packet) -> (\n    if packet.val.cmd == \"join\" (\n      invites.[packet.origin.username] = packet\n    )\n  )\n  connection.onclose = def() -> (\n    setupRotur()\n  )\n)"
          }
        ]
      }
    }
  ],
  [
    {
      "type": "fnc",
      "data": "setupRotur",
      "parameters": [],
      "source": "setupRotur()"
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "change_focus = true",
      "left": {
        "type": "var",
        "data": "change_focus",
        "source": "change_focus"
      },
      "right": {
        "type": "var",
        "data": true,
        "source": "true"
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "current_tab_target = 0",
      "left": {
        "type": "var",
        "data": "current_tab_target",
        "source": "current_tab_target"
      },
      "right": {
        "type": "num",
        "data": 0,
        "source": "0"
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "removed = false",
      "left": {
        "type": "var",
        "data": "removed",
        "source": "removed"
      },
      "right": {
        "type": "var",
        "data": false,
        "source": "false"
      }
    }
  ],
  [
    {
      "type": "cmd",
      "data": "if",
      "source": "if \"recent_files.json\".saveExists() (\n  recent = \"recent_files.json\".saveGet()\n) else (\n  save \"recent_files.json\" \"set\" []\n  recent = []\n)"
    },
    {
      "type": "mtd",
      "data": [
        {
          "type": "str",
          "data": "\"recent_files.json\"",
          "source": "\"recent_files.json\""
        },
        {
          "type": "mtv",
          "data": "saveExists",
          "parameters": [],
          "source": "saveExists()"
        }
      ],
      "source": "\"recent_files.json\".saveExists()"
    },
    {
      "type": "blk",
      "data": [
        [
          {
            "type": "asi",
            "data": "=",
            "source": "recent = \"recent_files.json\".saveGet()",
            "left": {
              "type": "var",
              "data": "recent",
              "source": "recent"
            },
            "right": {
              "type": "mtd",
              "data": [
                {
                  "type": "str",
                  "data": "\"recent_files.json\"",
                  "source": "\"recent_files.json\""
                },
                {
                  "type": "mtv",
                  "data": "saveGet",
                  "parameters": [],
                  "source": "saveGet()"
                }
              ],
              "source": "\"recent_files.json\".saveGet()"
            }
          }
        ]
      ],
      "source": "(\n  recent = \"recent_files.json\".saveGet()\n)"
    },
    {
      "type": "var",
      "data": "else",
      "source": "else"
    },
    {
      "type": "blk",
      "data": [
        [
          {
            "type": "cmd",
            "data": "save",
            "source": "save \"recent_files.json\" \"set\" []"
          },
          {
            "type": "str",
            "data": "\"recent_files.json\"",
            "source": "\"recent_files.json\""
          },
          {
            "type": "str",
            "data": "\"set\"",
            "source": "\"set\""
          },
          {
            "type": "arr",
            "data": [],
            "source": "[]"
          }
        ],
        [
          {
            "type": "asi",
            "data": "=",
            "source": "recent = []",
            "left": {
              "type": "var",
              "data": "recent",
              "source": "recent"
            },
            "right": {
              "type": "arr",
              "data": [],
              "source": "[]"
            }
          }
        ]
      ],
      "source": "(\n  save \"recent_files.json\" \"set\" []\n  recent = []\n)"
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "recent_2 = recent.trim(1,10)",
      "left": {
        "type": "var",
        "data": "recent_2",
        "source": "recent_2"
      },
      "right": {
        "type": "mtd",
        "data": [
          {
            "type": "var",
            "data": "recent",
            "source": "recent"
          },
          {
            "type": "mtv",
            "data": "trim",
            "parameters": [
              {
                "type": "num",
                "data": 1,
                "source": "1"
              },
              {
                "type": "num",
                "data": 10,
                "source": "10"
              }
            ],
            "source": "trim(1,10)"
          }
        ],
        "source": "recent.trim(1,10)"
      }
    }
  ],
  [
    {
      "type": "cmd",
      "data": "save",
      "source": "save \"recent_files.json\" \"set\" recent_2"
    },
    {
      "type": "str",
      "data": "\"recent_files.json\"",
      "source": "\"recent_files.json\""
    },
    {
      "type": "str",
      "data": "\"set\"",
      "source": "\"set\""
    },
    {
      "type": "var",
      "data": "recent_2",
      "source": "recent_2"
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "def loadFileUUID(uuid) (\n  file = open(uuid, [\"name\", \"type\", \"data\"])\n  current_ohf = compileOHF(getOHF(file.[2]))\n  inputs.[uuid] = file.[3].split(\"\\n\")\n  file.pop()\n)",
      "left": {
        "type": "var",
        "data": "loadFileUUID",
        "source": "def"
      },
      "right": {
        "type": "fnc",
        "data": "function",
        "parameters": [
          {
            "type": "str",
            "data": "uuid"
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "file = open(uuid, [\"name\", \"type\", \"data\"])",
                  "left": {
                    "type": "var",
                    "data": "file",
                    "source": "file"
                  },
                  "right": {
                    "type": "fnc",
                    "data": "open",
                    "parameters": [
                      {
                        "type": "var",
                        "data": "uuid",
                        "source": "uuid"
                      },
                      {
                        "type": "arr",
                        "data": [
                          {
                            "type": "str",
                            "data": "\"name\"",
                            "source": "\"name\""
                          },
                          {
                            "type": "str",
                            "data": "\"type\"",
                            "source": "\"type\""
                          },
                          {
                            "type": "str",
                            "data": "\"data\"",
                            "source": "\"data\""
                          }
                        ],
                        "source": "[\"name\", \"type\", \"data\"]"
                      }
                    ],
                    "source": "open(uuid, [\"name\", \"type\", \"data\"])"
                  }
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "current_ohf = compileOHF(getOHF(file.[2]))",
                  "left": {
                    "type": "var",
                    "data": "current_ohf",
                    "source": "current_ohf"
                  },
                  "right": {
                    "type": "fnc",
                    "data": "compileOHF",
                    "parameters": [
                      {
                        "type": "fnc",
                        "data": "getOHF",
                        "parameters": [
                          {
                            "type": "asi",
                            "data": "=??",
                            "source": "file.[2]",
                            "left": {
                              "type": "var",
                              "data": "file",
                              "source": "file"
                            },
                            "right": {
                              "type": "mtd",
                              "data": [
                                {
                                  "type": "var",
                                  "data": "file",
                                  "source": "file"
                                },
                                {
                                  "type": "mtv",
                                  "data": "item",
                                  "parameters": [
                                    {
                                      "type": "num",
                                      "data": 2,
                                      "source": "2"
                                    }
                                  ],
                                  "source": "[2]"
                                }
                              ],
                              "source": "file.[2]"
                            }
                          }
                        ],
                        "source": "getOHF(file.[2])"
                      }
                    ],
                    "source": "compileOHF(getOHF(file.[2]))"
                  }
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "inputs.[uuid] = file.[3].split(\"\\n\")",
                  "left": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "inputs",
                        "source": "inputs"
                      },
                      {
                        "type": "mtv",
                        "data": "item",
                        "parameters": [
                          {
                            "type": "var",
                            "data": "uuid",
                            "source": "uuid"
                          }
                        ],
                        "source": "[uuid]"
                      }
                    ],
                    "source": "inputs.[uuid]"
                  },
                  "right": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "file",
                        "source": "file"
                      },
                      {
                        "type": "mtv",
                        "data": "item",
                        "parameters": [
                          {
                            "type": "num",
                            "data": 3,
                            "source": "3"
                          }
                        ],
                        "source": "[3]"
                      },
                      {
                        "type": "mtv",
                        "data": "split",
                        "parameters": [
                          {
                            "type": "str",
                            "data": "\"\\n\"",
                            "source": "\"\\n\""
                          }
                        ],
                        "source": "split(\"\\n\")"
                      }
                    ],
                    "source": "file.[3].split(\"\\n\")"
                  }
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "=??",
                  "source": "file.pop()",
                  "left": {
                    "type": "var",
                    "data": "file",
                    "source": "file"
                  },
                  "right": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "file",
                        "source": "file"
                      },
                      {
                        "type": "mtv",
                        "data": "pop",
                        "parameters": [],
                        "source": "pop()"
                      }
                    ],
                    "source": "file.pop()"
                  }
                }
              ]
            ],
            "source": "(\n  file = open(uuid, [\"name\", \"type\", \"data\"])\n  current_ohf = compileOHF(getOHF(file.[2]))\n  inputs.[uuid] = file.[3].split(\"\\n\")\n  file.pop()\n)"
          }
        ]
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "tabs = []",
      "left": {
        "type": "var",
        "data": "tabs",
        "source": "tabs"
      },
      "right": {
        "type": "arr",
        "data": [],
        "source": "[]"
      }
    }
  ],
  [
    {
      "type": "cmd",
      "data": "if",
      "source": "if passed_data == \"\" (\n  tabs.append(\"> Welcome\")\n) else (\n  change_focus = true\n  current_tab = passed_data\n  tabs.append(passed_data)\n  loadFileUUID(passed_data)\n)"
    },
    {
      "type": "cmp",
      "data": "==",
      "source": "==",
      "left": {
        "type": "var",
        "data": "passed_data",
        "source": "passed_data"
      },
      "right": {
        "type": "str",
        "data": "\"\"",
        "source": "\"\""
      }
    },
    {
      "type": "blk",
      "data": [
        [
          {
            "type": "asi",
            "data": "=??",
            "source": "tabs.append(\"> Welcome\")",
            "left": {
              "type": "var",
              "data": "tabs",
              "source": "tabs"
            },
            "right": {
              "type": "mtd",
              "data": [
                {
                  "type": "var",
                  "data": "tabs",
                  "source": "tabs"
                },
                {
                  "type": "mtv",
                  "data": "append",
                  "parameters": [
                    {
                      "type": "str",
                      "data": "\"> Welcome\"",
                      "source": "\"> Welcome\""
                    }
                  ],
                  "source": "append(\"> Welcome\")"
                }
              ],
              "source": "tabs.append(\"> Welcome\")"
            }
          }
        ]
      ],
      "source": "(\n  tabs.append(\"> Welcome\")\n)"
    },
    {
      "type": "var",
      "data": "else",
      "source": "else"
    },
    {
      "type": "blk",
      "data": [
        [
          {
            "type": "asi",
            "data": "=",
            "source": "change_focus = true",
            "left": {
              "type": "var",
              "data": "change_focus",
              "source": "change_focus"
            },
            "right": {
              "type": "var",
              "data": true,
              "source": "true"
            }
          }
        ],
        [
          {
            "type": "asi",
            "data": "=",
            "source": "current_tab = passed_data",
            "left": {
              "type": "var",
              "data": "current_tab",
              "source": "current_tab"
            },
            "right": {
              "type": "var",
              "data": "passed_data",
              "source": "passed_data"
            }
          }
        ],
        [
          {
            "type": "asi",
            "data": "=??",
            "source": "tabs.append(passed_data)",
            "left": {
              "type": "var",
              "data": "tabs",
              "source": "tabs"
            },
            "right": {
              "type": "mtd",
              "data": [
                {
                  "type": "var",
                  "data": "tabs",
                  "source": "tabs"
                },
                {
                  "type": "mtv",
                  "data": "append",
                  "parameters": [
                    {
                      "type": "var",
                      "data": "passed_data",
                      "source": "passed_data"
                    }
                  ],
                  "source": "append(passed_data)"
                }
              ],
              "source": "tabs.append(passed_data)"
            }
          }
        ],
        [
          {
            "type": "fnc",
            "data": "loadFileUUID",
            "parameters": [
              {
                "type": "var",
                "data": "passed_data",
                "source": "passed_data"
              }
            ],
            "source": "loadFileUUID(passed_data)"
          }
        ]
      ],
      "source": "(\n  change_focus = true\n  current_tab = passed_data\n  tabs.append(passed_data)\n  loadFileUUID(passed_data)\n)"
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "tabs_out = tabs",
      "left": {
        "type": "var",
        "data": "tabs_out",
        "source": "tabs_out"
      },
      "right": {
        "type": "var",
        "data": "tabs",
        "source": "tabs"
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "sidebar_items = 0",
      "left": {
        "type": "var",
        "data": "sidebar_items",
        "source": "sidebar_items"
      },
      "right": {
        "type": "num",
        "data": 0,
        "source": "0"
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "current_tab = tabs.[1]",
      "left": {
        "type": "var",
        "data": "current_tab",
        "source": "current_tab"
      },
      "right": {
        "type": "mtd",
        "data": [
          {
            "type": "var",
            "data": "tabs",
            "source": "tabs"
          },
          {
            "type": "mtv",
            "data": "item",
            "parameters": [
              {
                "type": "num",
                "data": 1,
                "source": "1"
              }
            ],
            "source": "[1]"
          }
        ],
        "source": "tabs.[1]"
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "dragbox = [[2,2,40,0],[-2,2,-100,-40]]",
      "left": {
        "type": "var",
        "data": "dragbox",
        "source": "dragbox"
      },
      "right": {
        "type": "arr",
        "data": [
          {
            "type": "arr",
            "data": [
              {
                "type": "num",
                "data": 2,
                "source": "2"
              },
              {
                "type": "num",
                "data": 2,
                "source": "2"
              },
              {
                "type": "num",
                "data": 40,
                "source": "40"
              },
              {
                "type": "num",
                "data": 0,
                "source": "0"
              }
            ],
            "source": "[2,2,40,0]"
          },
          {
            "type": "arr",
            "data": [
              {
                "type": "num",
                "data": -2,
                "source": "-2"
              },
              {
                "type": "num",
                "data": 2,
                "source": "2"
              },
              {
                "type": "num",
                "data": -100,
                "source": "-100"
              },
              {
                "type": "num",
                "data": -40,
                "source": "-40"
              }
            ],
            "source": "[-2,2,-100,-40]"
          }
        ],
        "source": "[[2,2,40,0],[-2,2,-100,-40]]"
      }
    }
  ],
  [
    {
      "type": "cmd",
      "data": "def",
      "source": "def \"draw_buttons\" (\n  loc -2 2 -50 -20\n  square 80 20 10 : c#window_colour\n  loc -2 2 -20 -20\n  \n  icon \"close\" 0.6 : c#c_text\n  if onclick (\n    window \"stop\"\n  )\n  \n  change_x -30\n  icon \"down\" 0.6 : c#c_text\n  if onclick (\n    window \"minimise\"\n  )\n\n  change_x -30\n  icon \"maximise\" 0.6 : c#c_text\n  if onclick (\n    window \"maximise\"\n  )\n)"
    },
    {
      "type": "str",
      "data": "\"draw_buttons\"",
      "source": "\"draw_buttons\""
    },
    {
      "type": "blk",
      "data": [
        [
          {
            "type": "cmd",
            "data": "loc",
            "source": "loc -2 2 -50 -20"
          },
          {
            "type": "num",
            "data": -2,
            "source": "-2"
          },
          {
            "type": "num",
            "data": 2,
            "source": "2"
          },
          {
            "type": "num",
            "data": -50,
            "source": "-50"
          },
          {
            "type": "num",
            "data": -20,
            "source": "-20"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "square",
            "source": "square 80 20 10 : c#window_colour"
          },
          {
            "type": "num",
            "data": 80,
            "source": "80"
          },
          {
            "type": "num",
            "data": 20,
            "source": "20"
          },
          {
            "type": "num",
            "data": 10,
            "source": "10"
          },
          {
            "type": "mod",
            "data": [
              "c",
              {
                "type": "var",
                "data": "window_colour",
                "source": "window_colour"
              }
            ],
            "source": "c#window_colour"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "loc",
            "source": "loc -2 2 -20 -20"
          },
          {
            "type": "num",
            "data": -2,
            "source": "-2"
          },
          {
            "type": "num",
            "data": 2,
            "source": "2"
          },
          {
            "type": "num",
            "data": -20,
            "source": "-20"
          },
          {
            "type": "num",
            "data": -20,
            "source": "-20"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "icon",
            "source": "icon \"close\" 0.6 : c#c_text"
          },
          {
            "type": "str",
            "data": "\"close\"",
            "source": "\"close\""
          },
          {
            "type": "num",
            "data": 0.6,
            "source": "0.6"
          },
          {
            "type": "mod",
            "data": [
              "c",
              {
                "type": "var",
                "data": "c_text",
                "source": "c_text"
              }
            ],
            "source": "c#c_text"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "if",
            "source": "if onclick (\n    window \"stop\"\n  )"
          },
          {
            "type": "var",
            "data": "onclick",
            "source": "onclick"
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "cmd",
                  "data": "window",
                  "source": "window \"stop\""
                },
                {
                  "type": "str",
                  "data": "\"stop\"",
                  "source": "\"stop\""
                }
              ]
            ],
            "source": "(\n    window \"stop\"\n  )"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "change_x",
            "source": "change_x -30"
          },
          {
            "type": "num",
            "data": -30,
            "source": "-30"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "icon",
            "source": "icon \"down\" 0.6 : c#c_text"
          },
          {
            "type": "str",
            "data": "\"down\"",
            "source": "\"down\""
          },
          {
            "type": "num",
            "data": 0.6,
            "source": "0.6"
          },
          {
            "type": "mod",
            "data": [
              "c",
              {
                "type": "var",
                "data": "c_text",
                "source": "c_text"
              }
            ],
            "source": "c#c_text"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "if",
            "source": "if onclick (\n    window \"minimise\"\n  )"
          },
          {
            "type": "var",
            "data": "onclick",
            "source": "onclick"
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "cmd",
                  "data": "window",
                  "source": "window \"minimise\""
                },
                {
                  "type": "str",
                  "data": "\"minimise\"",
                  "source": "\"minimise\""
                }
              ]
            ],
            "source": "(\n    window \"minimise\"\n  )"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "change_x",
            "source": "change_x -30"
          },
          {
            "type": "num",
            "data": -30,
            "source": "-30"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "icon",
            "source": "icon \"maximise\" 0.6 : c#c_text"
          },
          {
            "type": "str",
            "data": "\"maximise\"",
            "source": "\"maximise\""
          },
          {
            "type": "num",
            "data": 0.6,
            "source": "0.6"
          },
          {
            "type": "mod",
            "data": [
              "c",
              {
                "type": "var",
                "data": "c_text",
                "source": "c_text"
              }
            ],
            "source": "c#c_text"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "if",
            "source": "if onclick (\n    window \"maximise\"\n  )"
          },
          {
            "type": "var",
            "data": "onclick",
            "source": "onclick"
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "cmd",
                  "data": "window",
                  "source": "window \"maximise\""
                },
                {
                  "type": "str",
                  "data": "\"maximise\"",
                  "source": "\"maximise\""
                }
              ]
            ],
            "source": "(\n    window \"maximise\"\n  )"
          }
        ]
      ],
      "source": "(\n  loc -2 2 -50 -20\n  square 80 20 10 : c#window_colour\n  loc -2 2 -20 -20\n  \n  icon \"close\" 0.6 : c#c_text\n  if onclick (\n    window \"stop\"\n  )\n  \n  change_x -30\n  icon \"down\" 0.6 : c#c_text\n  if onclick (\n    window \"minimise\"\n  )\n\n  change_x -30\n  icon \"maximise\" 0.6 : c#c_text\n  if onclick (\n    window \"maximise\"\n  )\n)"
    }
  ],
  [
    {
      "type": "cmd",
      "data": "def",
      "source": "def \"add_tab\" \"data\" (\n  tabs.append(data)\n  change_focus = true\n  current_tab = data\n)"
    },
    {
      "type": "str",
      "data": "\"add_tab\"",
      "source": "\"add_tab\""
    },
    {
      "type": "str",
      "data": "\"data\"",
      "source": "\"data\""
    },
    {
      "type": "blk",
      "data": [
        [
          {
            "type": "asi",
            "data": "=??",
            "source": "tabs.append(data)",
            "left": {
              "type": "var",
              "data": "tabs",
              "source": "tabs"
            },
            "right": {
              "type": "mtd",
              "data": [
                {
                  "type": "var",
                  "data": "tabs",
                  "source": "tabs"
                },
                {
                  "type": "mtv",
                  "data": "append",
                  "parameters": [
                    {
                      "type": "var",
                      "data": "data",
                      "source": "data"
                    }
                  ],
                  "source": "append(data)"
                }
              ],
              "source": "tabs.append(data)"
            }
          }
        ],
        [
          {
            "type": "asi",
            "data": "=",
            "source": "change_focus = true",
            "left": {
              "type": "var",
              "data": "change_focus",
              "source": "change_focus"
            },
            "right": {
              "type": "var",
              "data": true,
              "source": "true"
            }
          }
        ],
        [
          {
            "type": "asi",
            "data": "=",
            "source": "current_tab = data",
            "left": {
              "type": "var",
              "data": "current_tab",
              "source": "current_tab"
            },
            "right": {
              "type": "var",
              "data": "data",
              "source": "data"
            }
          }
        ]
      ],
      "source": "(\n  tabs.append(data)\n  change_focus = true\n  current_tab = data\n)"
    }
  ],
  [
    {
      "type": "cmd",
      "data": "def",
      "source": "def \"insert_tab\" \"index, data\" (\n  tabs.insert(index,data)\n  change_focus = true\n  current_tab = data\n)"
    },
    {
      "type": "str",
      "data": "\"insert_tab\"",
      "source": "\"insert_tab\""
    },
    {
      "type": "str",
      "data": "\"index, data\"",
      "source": "\"index, data\""
    },
    {
      "type": "blk",
      "data": [
        [
          {
            "type": "asi",
            "data": "=??",
            "source": "tabs.insert(index,data)",
            "left": {
              "type": "var",
              "data": "tabs",
              "source": "tabs"
            },
            "right": {
              "type": "mtd",
              "data": [
                {
                  "type": "var",
                  "data": "tabs",
                  "source": "tabs"
                },
                {
                  "type": "mtv",
                  "data": "insert",
                  "parameters": [
                    {
                      "type": "var",
                      "data": "index",
                      "source": "index"
                    },
                    {
                      "type": "var",
                      "data": "data",
                      "source": "data"
                    }
                  ],
                  "source": "insert(index,data)"
                }
              ],
              "source": "tabs.insert(index,data)"
            }
          }
        ],
        [
          {
            "type": "asi",
            "data": "=",
            "source": "change_focus = true",
            "left": {
              "type": "var",
              "data": "change_focus",
              "source": "change_focus"
            },
            "right": {
              "type": "var",
              "data": true,
              "source": "true"
            }
          }
        ],
        [
          {
            "type": "asi",
            "data": "=",
            "source": "current_tab = data",
            "left": {
              "type": "var",
              "data": "current_tab",
              "source": "current_tab"
            },
            "right": {
              "type": "var",
              "data": "data",
              "source": "data"
            }
          }
        ]
      ],
      "source": "(\n  tabs.insert(index,data)\n  change_focus = true\n  current_tab = data\n)"
    }
  ],
  [
    {
      "type": "cmd",
      "data": "def",
      "source": "def \"draw_tabs\" (\n  loc 2 9999 10 0\n  \n  c c_text\n  x = frame.left - 2.5\n  if tabs_out != tabs (\n    window \"refresh_bg\"\n    tabs_out = tabs\n  )\n  \n  if edit_connection != null (\n    tabs_out = tabs\n  )\n  \n  each i tab tabs (\n    tw = 0\n    if tab.startsWith(\"> \") (\n      tab_name = tab.trim(3,-1)\n      file = false\n    ) else if tab.startsWith(\"^\") (\n      tab_name = \"Live Share (\" ++ share_name ++ \")\"\n      file = false\n    ) else (\n      file \"open\" tab \"onlyaccess\"\n      tab_name = fileGet(2) ++ fileGet(1)\n      file = true\n    )\n    \n    l = tab_name.len * 9 + 25\n    if file \"l += 20\"\n    tw += l + 25\n    goto x + (tw / 2) 0\n    \n    square l + 10 20 10 : c#window_colour\n    if file (\n      change_x -10\n      square l - 10 20 10 0 1\n      change_x 10\n      file \"interact\"\n      if data == \"open\" (\n        current_tab = tab\n        change_focus = true\n      )\n      if data == \"dragging\" (\n        removed = true\n        change_focus = true\n      )\n    ) else (\n      if onclick (\n        current_tab = tab\n        change_focus = true\n      )\n    )\n    change_x l / -2\n    if file (\n      change_x 5\n      file \"render\" 0.7\n      change_x 15\n    )\n    c tab == current_tab ? c_text c_seco\n    text tab_name 9\n    icon \"close\" 0.5 : chx#20\n    if onclick (\n      removed = true\n    )\n    if file_dragging (\n      change_x 17\n      if dist(x_position,y_position,mouse_x,mouse_y) < 40 (\n        square 0 30 2 : c#c_text\n        current_tab_target = i + 1\n      )\n      change_x -17\n    )\n    if removed (\n      window \"refresh_bg\"\n      change_focus = true\n      if edit_connection != null (\n        rotur.unSubscribe(edit_connection.room)\n      )\n      if i > 1 (\n        prev = tabs.[i - 1]\n      ) else (\n        prev = tabs.[i + 1]\n      )\n      tabs_out.delete(i)\n      current_tab = prev\n      if tabs_out.len == 0 (\n        tabs = tabs_out\n        add_tab \"> Welcome\"\n        tabs_out = tabs\n      )\n      removed = false\n    )\n    x += tw\n  )\n  tabs = tabs_out\n  if edit_connection == null (\n    icon \"add\" 0.6 : chx#30 c#c_text\n    if onclick (\n      add_tab \"> Welcome\"\n    )\n  )\n  tabs = tabs_out \n  dragbox.[1].[3] = x + frame.right + 80\n)"
    },
    {
      "type": "str",
      "data": "\"draw_tabs\"",
      "source": "\"draw_tabs\""
    },
    {
      "type": "blk",
      "data": [
        [
          {
            "type": "cmd",
            "data": "loc",
            "source": "loc 2 9999 10 0"
          },
          {
            "type": "num",
            "data": 2,
            "source": "2"
          },
          {
            "type": "num",
            "data": 9999,
            "source": "9999"
          },
          {
            "type": "num",
            "data": 10,
            "source": "10"
          },
          {
            "type": "num",
            "data": 0,
            "source": "0"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "c",
            "source": "c c_text"
          },
          {
            "type": "var",
            "data": "c_text",
            "source": "c_text"
          }
        ],
        [
          {
            "type": "asi",
            "data": "=",
            "source": "x = frame.left - 2.5",
            "left": {
              "type": "var",
              "data": "x",
              "source": "x"
            },
            "right": {
              "type": "opr",
              "data": "-",
              "source": "-",
              "left": {
                "type": "mtd",
                "data": [
                  {
                    "type": "var",
                    "data": "frame",
                    "source": "frame"
                  },
                  {
                    "type": "var",
                    "data": "left",
                    "source": "left"
                  }
                ],
                "source": "frame.left"
              },
              "right": {
                "type": "num",
                "data": 2.5,
                "source": "2.5"
              }
            }
          }
        ],
        [
          {
            "type": "cmd",
            "data": "if",
            "source": "if tabs_out != tabs (\n    window \"refresh_bg\"\n    tabs_out = tabs\n  )"
          },
          {
            "type": "cmp",
            "data": "!=",
            "source": "!=",
            "left": {
              "type": "var",
              "data": "tabs_out",
              "source": "tabs_out"
            },
            "right": {
              "type": "var",
              "data": "tabs",
              "source": "tabs"
            }
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "cmd",
                  "data": "window",
                  "source": "window \"refresh_bg\""
                },
                {
                  "type": "str",
                  "data": "\"refresh_bg\"",
                  "source": "\"refresh_bg\""
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "tabs_out = tabs",
                  "left": {
                    "type": "var",
                    "data": "tabs_out",
                    "source": "tabs_out"
                  },
                  "right": {
                    "type": "var",
                    "data": "tabs",
                    "source": "tabs"
                  }
                }
              ]
            ],
            "source": "(\n    window \"refresh_bg\"\n    tabs_out = tabs\n  )"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "if",
            "source": "if edit_connection != null (\n    tabs_out = tabs\n  )"
          },
          {
            "type": "cmp",
            "data": "!=",
            "source": "!=",
            "left": {
              "type": "var",
              "data": "edit_connection",
              "source": "edit_connection"
            },
            "right": {
              "type": "unk",
              "data": null,
              "source": "null"
            }
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "tabs_out = tabs",
                  "left": {
                    "type": "var",
                    "data": "tabs_out",
                    "source": "tabs_out"
                  },
                  "right": {
                    "type": "var",
                    "data": "tabs",
                    "source": "tabs"
                  }
                }
              ]
            ],
            "source": "(\n    tabs_out = tabs\n  )"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "each",
            "source": "each i tab tabs (\n    tw = 0\n    if tab.startsWith(\"> \") (\n      tab_name = tab.trim(3,-1)\n      file = false\n    ) else if tab.startsWith(\"^\") (\n      tab_name = \"Live Share (\" ++ share_name ++ \")\"\n      file = false\n    ) else (\n      file \"open\" tab \"onlyaccess\"\n      tab_name = fileGet(2) ++ fileGet(1)\n      file = true\n    )\n    \n    l = tab_name.len * 9 + 25\n    if file \"l += 20\"\n    tw += l + 25\n    goto x + (tw / 2) 0\n    \n    square l + 10 20 10 : c#window_colour\n    if file (\n      change_x -10\n      square l - 10 20 10 0 1\n      change_x 10\n      file \"interact\"\n      if data == \"open\" (\n        current_tab = tab\n        change_focus = true\n      )\n      if data == \"dragging\" (\n        removed = true\n        change_focus = true\n      )\n    ) else (\n      if onclick (\n        current_tab = tab\n        change_focus = true\n      )\n    )\n    change_x l / -2\n    if file (\n      change_x 5\n      file \"render\" 0.7\n      change_x 15\n    )\n    c tab == current_tab ? c_text c_seco\n    text tab_name 9\n    icon \"close\" 0.5 : chx#20\n    if onclick (\n      removed = true\n    )\n    if file_dragging (\n      change_x 17\n      if dist(x_position,y_position,mouse_x,mouse_y) < 40 (\n        square 0 30 2 : c#c_text\n        current_tab_target = i + 1\n      )\n      change_x -17\n    )\n    if removed (\n      window \"refresh_bg\"\n      change_focus = true\n      if edit_connection != null (\n        rotur.unSubscribe(edit_connection.room)\n      )\n      if i > 1 (\n        prev = tabs.[i - 1]\n      ) else (\n        prev = tabs.[i + 1]\n      )\n      tabs_out.delete(i)\n      current_tab = prev\n      if tabs_out.len == 0 (\n        tabs = tabs_out\n        add_tab \"> Welcome\"\n        tabs_out = tabs\n      )\n      removed = false\n    )\n    x += tw\n  )"
          },
          {
            "type": "str",
            "data": "i",
            "source": "i"
          },
          {
            "type": "str",
            "data": "tab",
            "source": "tab"
          },
          {
            "type": "var",
            "data": "tabs",
            "source": "tabs"
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "tw = 0",
                  "left": {
                    "type": "var",
                    "data": "tw",
                    "source": "tw"
                  },
                  "right": {
                    "type": "num",
                    "data": 0,
                    "source": "0"
                  }
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if tab.startsWith(\"> \") (\n      tab_name = tab.trim(3,-1)\n      file = false\n    ) else if tab.startsWith(\"^\") (\n      tab_name = \"Live Share (\" ++ share_name ++ \")\"\n      file = false\n    ) else (\n      file \"open\" tab \"onlyaccess\"\n      tab_name = fileGet(2) ++ fileGet(1)\n      file = true\n    )"
                },
                {
                  "type": "mtd",
                  "data": [
                    {
                      "type": "var",
                      "data": "tab",
                      "source": "tab"
                    },
                    {
                      "type": "mtv",
                      "data": "startsWith",
                      "parameters": [
                        {
                          "type": "str",
                          "data": "\"> \"",
                          "source": "\"> \""
                        }
                      ],
                      "source": "startsWith(\"> \")"
                    }
                  ],
                  "source": "tab.startsWith(\"> \")"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "tab_name = tab.trim(3,-1)",
                        "left": {
                          "type": "var",
                          "data": "tab_name",
                          "source": "tab_name"
                        },
                        "right": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "tab",
                              "source": "tab"
                            },
                            {
                              "type": "mtv",
                              "data": "trim",
                              "parameters": [
                                {
                                  "type": "num",
                                  "data": 3,
                                  "source": "3"
                                },
                                {
                                  "type": "num",
                                  "data": -1,
                                  "source": "-1"
                                }
                              ],
                              "source": "trim(3,-1)"
                            }
                          ],
                          "source": "tab.trim(3,-1)"
                        }
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "file = false",
                        "left": {
                          "type": "var",
                          "data": "file",
                          "source": "file"
                        },
                        "right": {
                          "type": "var",
                          "data": false,
                          "source": "false"
                        }
                      }
                    ]
                  ],
                  "source": "(\n      tab_name = tab.trim(3,-1)\n      file = false\n    )"
                },
                {
                  "type": "var",
                  "data": "else",
                  "source": "else"
                },
                {
                  "type": "var",
                  "data": "if",
                  "source": "if"
                },
                {
                  "type": "mtd",
                  "data": [
                    {
                      "type": "var",
                      "data": "tab",
                      "source": "tab"
                    },
                    {
                      "type": "mtv",
                      "data": "startsWith",
                      "parameters": [
                        {
                          "type": "str",
                          "data": "\"^\"",
                          "source": "\"^\""
                        }
                      ],
                      "source": "startsWith(\"^\")"
                    }
                  ],
                  "source": "tab.startsWith(\"^\")"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "tab_name = \"Live Share (\" ++ share_name ++ \")\"",
                        "left": {
                          "type": "var",
                          "data": "tab_name",
                          "source": "tab_name"
                        },
                        "right": {
                          "type": "opr",
                          "data": "++",
                          "source": "++",
                          "left": {
                            "type": "opr",
                            "data": "++",
                            "source": "++",
                            "left": {
                              "type": "str",
                              "data": "\"Live Share (\"",
                              "source": "\"Live Share (\""
                            },
                            "right": {
                              "type": "var",
                              "data": "share_name",
                              "source": "share_name"
                            }
                          },
                          "right": {
                            "type": "str",
                            "data": "\")\"",
                            "source": "\")\""
                          }
                        }
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "file = false",
                        "left": {
                          "type": "var",
                          "data": "file",
                          "source": "file"
                        },
                        "right": {
                          "type": "var",
                          "data": false,
                          "source": "false"
                        }
                      }
                    ]
                  ],
                  "source": "(\n      tab_name = \"Live Share (\" ++ share_name ++ \")\"\n      file = false\n    )"
                },
                {
                  "type": "var",
                  "data": "else",
                  "source": "else"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "file",
                        "source": "file \"open\" tab \"onlyaccess\""
                      },
                      {
                        "type": "str",
                        "data": "\"open\"",
                        "source": "\"open\""
                      },
                      {
                        "type": "var",
                        "data": "tab",
                        "source": "tab"
                      },
                      {
                        "type": "str",
                        "data": "\"onlyaccess\"",
                        "source": "\"onlyaccess\""
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "tab_name = fileGet(2) ++ fileGet(1)",
                        "left": {
                          "type": "var",
                          "data": "tab_name",
                          "source": "tab_name"
                        },
                        "right": {
                          "type": "opr",
                          "data": "++",
                          "source": "++",
                          "left": {
                            "type": "fnc",
                            "data": "fileGet",
                            "parameters": [
                              {
                                "type": "num",
                                "data": 2,
                                "source": "2"
                              }
                            ],
                            "source": "fileGet(2)"
                          },
                          "right": {
                            "type": "fnc",
                            "data": "fileGet",
                            "parameters": [
                              {
                                "type": "num",
                                "data": 1,
                                "source": "1"
                              }
                            ],
                            "source": "fileGet(1)"
                          }
                        }
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "file = true",
                        "left": {
                          "type": "var",
                          "data": "file",
                          "source": "file"
                        },
                        "right": {
                          "type": "var",
                          "data": true,
                          "source": "true"
                        }
                      }
                    ]
                  ],
                  "source": "(\n      file \"open\" tab \"onlyaccess\"\n      tab_name = fileGet(2) ++ fileGet(1)\n      file = true\n    )"
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "l = tab_name.len * 9 + 25",
                  "left": {
                    "type": "var",
                    "data": "l",
                    "source": "l"
                  },
                  "right": {
                    "type": "opr",
                    "data": "+",
                    "source": "+",
                    "left": {
                      "type": "opr",
                      "data": "*",
                      "source": "*",
                      "left": {
                        "type": "mtd",
                        "data": [
                          {
                            "type": "var",
                            "data": "tab_name",
                            "source": "tab_name"
                          },
                          {
                            "type": "var",
                            "data": "len",
                            "source": "len"
                          }
                        ],
                        "source": "tab_name.len"
                      },
                      "right": {
                        "type": "num",
                        "data": 9,
                        "source": "9"
                      }
                    },
                    "right": {
                      "type": "num",
                      "data": 25,
                      "source": "25"
                    }
                  }
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if file \"l += 20\""
                },
                {
                  "type": "var",
                  "data": "file",
                  "source": "file"
                },
                {
                  "type": "str",
                  "data": "\"l += 20\"",
                  "source": "\"l += 20\""
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "+=",
                  "source": "tw += l + 25",
                  "left": {
                    "type": "var",
                    "data": "tw",
                    "source": "tw"
                  },
                  "right": {
                    "type": "opr",
                    "data": "+",
                    "source": "+",
                    "left": {
                      "type": "var",
                      "data": "l",
                      "source": "l"
                    },
                    "right": {
                      "type": "num",
                      "data": 25,
                      "source": "25"
                    }
                  }
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "goto",
                  "source": "goto x + (tw / 2) 0"
                },
                {
                  "type": "opr",
                  "data": "+",
                  "source": "+",
                  "left": {
                    "type": "var",
                    "data": "x",
                    "source": "x"
                  },
                  "right": {
                    "type": "opr",
                    "data": "/",
                    "source": "(tw / 2)",
                    "left": {
                      "type": "var",
                      "data": "tw",
                      "source": "tw"
                    },
                    "right": {
                      "type": "num",
                      "data": 2,
                      "source": "2"
                    }
                  }
                },
                {
                  "type": "num",
                  "data": 0,
                  "source": "0"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "square",
                  "source": "square l + 10 20 10 : c#window_colour"
                },
                {
                  "type": "opr",
                  "data": "+",
                  "source": "+",
                  "left": {
                    "type": "var",
                    "data": "l",
                    "source": "l"
                  },
                  "right": {
                    "type": "num",
                    "data": 10,
                    "source": "10"
                  }
                },
                {
                  "type": "num",
                  "data": 20,
                  "source": "20"
                },
                {
                  "type": "num",
                  "data": 10,
                  "source": "10"
                },
                {
                  "type": "mod",
                  "data": [
                    "c",
                    {
                      "type": "var",
                      "data": "window_colour",
                      "source": "window_colour"
                    }
                  ],
                  "source": "c#window_colour"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if file (\n      change_x -10\n      square l - 10 20 10 0 1\n      change_x 10\n      file \"interact\"\n      if data == \"open\" (\n        current_tab = tab\n        change_focus = true\n      )\n      if data == \"dragging\" (\n        removed = true\n        change_focus = true\n      )\n    ) else (\n      if onclick (\n        current_tab = tab\n        change_focus = true\n      )\n    )"
                },
                {
                  "type": "var",
                  "data": "file",
                  "source": "file"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "change_x",
                        "source": "change_x -10"
                      },
                      {
                        "type": "num",
                        "data": -10,
                        "source": "-10"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "square",
                        "source": "square l - 10 20 10 0 1"
                      },
                      {
                        "type": "opr",
                        "data": "-",
                        "source": "-",
                        "left": {
                          "type": "var",
                          "data": "l",
                          "source": "l"
                        },
                        "right": {
                          "type": "num",
                          "data": 10,
                          "source": "10"
                        }
                      },
                      {
                        "type": "num",
                        "data": 20,
                        "source": "20"
                      },
                      {
                        "type": "num",
                        "data": 10,
                        "source": "10"
                      },
                      {
                        "type": "num",
                        "data": 0,
                        "source": "0"
                      },
                      {
                        "type": "num",
                        "data": 1,
                        "source": "1"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "change_x",
                        "source": "change_x 10"
                      },
                      {
                        "type": "num",
                        "data": 10,
                        "source": "10"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "file",
                        "source": "file \"interact\""
                      },
                      {
                        "type": "str",
                        "data": "\"interact\"",
                        "source": "\"interact\""
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "if",
                        "source": "if data == \"open\" (\n        current_tab = tab\n        change_focus = true\n      )"
                      },
                      {
                        "type": "cmp",
                        "data": "==",
                        "source": "==",
                        "left": {
                          "type": "var",
                          "data": "data",
                          "source": "data"
                        },
                        "right": {
                          "type": "str",
                          "data": "\"open\"",
                          "source": "\"open\""
                        }
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "current_tab = tab",
                              "left": {
                                "type": "var",
                                "data": "current_tab",
                                "source": "current_tab"
                              },
                              "right": {
                                "type": "var",
                                "data": "tab",
                                "source": "tab"
                              }
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "change_focus = true",
                              "left": {
                                "type": "var",
                                "data": "change_focus",
                                "source": "change_focus"
                              },
                              "right": {
                                "type": "var",
                                "data": true,
                                "source": "true"
                              }
                            }
                          ]
                        ],
                        "source": "(\n        current_tab = tab\n        change_focus = true\n      )"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "if",
                        "source": "if data == \"dragging\" (\n        removed = true\n        change_focus = true\n      )"
                      },
                      {
                        "type": "cmp",
                        "data": "==",
                        "source": "==",
                        "left": {
                          "type": "var",
                          "data": "data",
                          "source": "data"
                        },
                        "right": {
                          "type": "str",
                          "data": "\"dragging\"",
                          "source": "\"dragging\""
                        }
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "removed = true",
                              "left": {
                                "type": "var",
                                "data": "removed",
                                "source": "removed"
                              },
                              "right": {
                                "type": "var",
                                "data": true,
                                "source": "true"
                              }
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "change_focus = true",
                              "left": {
                                "type": "var",
                                "data": "change_focus",
                                "source": "change_focus"
                              },
                              "right": {
                                "type": "var",
                                "data": true,
                                "source": "true"
                              }
                            }
                          ]
                        ],
                        "source": "(\n        removed = true\n        change_focus = true\n      )"
                      }
                    ]
                  ],
                  "source": "(\n      change_x -10\n      square l - 10 20 10 0 1\n      change_x 10\n      file \"interact\"\n      if data == \"open\" (\n        current_tab = tab\n        change_focus = true\n      )\n      if data == \"dragging\" (\n        removed = true\n        change_focus = true\n      )\n    )"
                },
                {
                  "type": "var",
                  "data": "else",
                  "source": "else"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "if",
                        "source": "if onclick (\n        current_tab = tab\n        change_focus = true\n      )"
                      },
                      {
                        "type": "var",
                        "data": "onclick",
                        "source": "onclick"
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "current_tab = tab",
                              "left": {
                                "type": "var",
                                "data": "current_tab",
                                "source": "current_tab"
                              },
                              "right": {
                                "type": "var",
                                "data": "tab",
                                "source": "tab"
                              }
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "change_focus = true",
                              "left": {
                                "type": "var",
                                "data": "change_focus",
                                "source": "change_focus"
                              },
                              "right": {
                                "type": "var",
                                "data": true,
                                "source": "true"
                              }
                            }
                          ]
                        ],
                        "source": "(\n        current_tab = tab\n        change_focus = true\n      )"
                      }
                    ]
                  ],
                  "source": "(\n      if onclick (\n        current_tab = tab\n        change_focus = true\n      )\n    )"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "change_x",
                  "source": "change_x l / -2"
                },
                {
                  "type": "opr",
                  "data": "/",
                  "source": "/",
                  "left": {
                    "type": "var",
                    "data": "l",
                    "source": "l"
                  },
                  "right": {
                    "type": "num",
                    "data": -2,
                    "source": "-2"
                  }
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if file (\n      change_x 5\n      file \"render\" 0.7\n      change_x 15\n    )"
                },
                {
                  "type": "var",
                  "data": "file",
                  "source": "file"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "change_x",
                        "source": "change_x 5"
                      },
                      {
                        "type": "num",
                        "data": 5,
                        "source": "5"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "file",
                        "source": "file \"render\" 0.7"
                      },
                      {
                        "type": "str",
                        "data": "\"render\"",
                        "source": "\"render\""
                      },
                      {
                        "type": "num",
                        "data": 0.7,
                        "source": "0.7"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "change_x",
                        "source": "change_x 15"
                      },
                      {
                        "type": "num",
                        "data": 15,
                        "source": "15"
                      }
                    ]
                  ],
                  "source": "(\n      change_x 5\n      file \"render\" 0.7\n      change_x 15\n    )"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "c",
                  "source": "c tab == current_tab ? c_text c_seco"
                },
                {
                  "type": "qst",
                  "data": "?",
                  "source": "?",
                  "left": {
                    "type": "cmp",
                    "data": "==",
                    "source": "==",
                    "left": {
                      "type": "var",
                      "data": "tab",
                      "source": "tab"
                    },
                    "right": {
                      "type": "var",
                      "data": "current_tab",
                      "source": "current_tab"
                    }
                  },
                  "right": {
                    "type": "var",
                    "data": "c_text",
                    "source": "c_text"
                  },
                  "right2": {
                    "type": "var",
                    "data": "c_seco",
                    "source": "c_seco"
                  }
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "text",
                  "source": "text tab_name 9"
                },
                {
                  "type": "var",
                  "data": "tab_name",
                  "source": "tab_name"
                },
                {
                  "type": "num",
                  "data": 9,
                  "source": "9"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "icon",
                  "source": "icon \"close\" 0.5 : chx#20"
                },
                {
                  "type": "str",
                  "data": "\"close\"",
                  "source": "\"close\""
                },
                {
                  "type": "num",
                  "data": 0.5,
                  "source": "0.5"
                },
                {
                  "type": "mod",
                  "data": [
                    "chx",
                    {
                      "type": "num",
                      "data": 20,
                      "source": "20"
                    }
                  ],
                  "source": "chx#20"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if onclick (\n      removed = true\n    )"
                },
                {
                  "type": "var",
                  "data": "onclick",
                  "source": "onclick"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "removed = true",
                        "left": {
                          "type": "var",
                          "data": "removed",
                          "source": "removed"
                        },
                        "right": {
                          "type": "var",
                          "data": true,
                          "source": "true"
                        }
                      }
                    ]
                  ],
                  "source": "(\n      removed = true\n    )"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if file_dragging (\n      change_x 17\n      if dist(x_position,y_position,mouse_x,mouse_y) < 40 (\n        square 0 30 2 : c#c_text\n        current_tab_target = i + 1\n      )\n      change_x -17\n    )"
                },
                {
                  "type": "var",
                  "data": "file_dragging",
                  "source": "file_dragging"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "change_x",
                        "source": "change_x 17"
                      },
                      {
                        "type": "num",
                        "data": 17,
                        "source": "17"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "if",
                        "source": "if dist(x_position,y_position,mouse_x,mouse_y) < 40 (\n        square 0 30 2 : c#c_text\n        current_tab_target = i + 1\n      )"
                      },
                      {
                        "type": "cmp",
                        "data": "<",
                        "source": "<",
                        "left": {
                          "type": "fnc",
                          "data": "dist",
                          "parameters": [
                            {
                              "type": "var",
                              "data": "x_position",
                              "source": "x_position"
                            },
                            {
                              "type": "var",
                              "data": "y_position",
                              "source": "y_position"
                            },
                            {
                              "type": "var",
                              "data": "mouse_x",
                              "source": "mouse_x"
                            },
                            {
                              "type": "var",
                              "data": "mouse_y",
                              "source": "mouse_y"
                            }
                          ],
                          "source": "dist(x_position,y_position,mouse_x,mouse_y)"
                        },
                        "right": {
                          "type": "num",
                          "data": 40,
                          "source": "40"
                        }
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "cmd",
                              "data": "square",
                              "source": "square 0 30 2 : c#c_text"
                            },
                            {
                              "type": "num",
                              "data": 0,
                              "source": "0"
                            },
                            {
                              "type": "num",
                              "data": 30,
                              "source": "30"
                            },
                            {
                              "type": "num",
                              "data": 2,
                              "source": "2"
                            },
                            {
                              "type": "mod",
                              "data": [
                                "c",
                                {
                                  "type": "var",
                                  "data": "c_text",
                                  "source": "c_text"
                                }
                              ],
                              "source": "c#c_text"
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "current_tab_target = i + 1",
                              "left": {
                                "type": "var",
                                "data": "current_tab_target",
                                "source": "current_tab_target"
                              },
                              "right": {
                                "type": "opr",
                                "data": "+",
                                "source": "+",
                                "left": {
                                  "type": "var",
                                  "data": "i",
                                  "source": "i"
                                },
                                "right": {
                                  "type": "num",
                                  "data": 1,
                                  "source": "1"
                                }
                              }
                            }
                          ]
                        ],
                        "source": "(\n        square 0 30 2 : c#c_text\n        current_tab_target = i + 1\n      )"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "change_x",
                        "source": "change_x -17"
                      },
                      {
                        "type": "num",
                        "data": -17,
                        "source": "-17"
                      }
                    ]
                  ],
                  "source": "(\n      change_x 17\n      if dist(x_position,y_position,mouse_x,mouse_y) < 40 (\n        square 0 30 2 : c#c_text\n        current_tab_target = i + 1\n      )\n      change_x -17\n    )"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if removed (\n      window \"refresh_bg\"\n      change_focus = true\n      if edit_connection != null (\n        rotur.unSubscribe(edit_connection.room)\n      )\n      if i > 1 (\n        prev = tabs.[i - 1]\n      ) else (\n        prev = tabs.[i + 1]\n      )\n      tabs_out.delete(i)\n      current_tab = prev\n      if tabs_out.len == 0 (\n        tabs = tabs_out\n        add_tab \"> Welcome\"\n        tabs_out = tabs\n      )\n      removed = false\n    )"
                },
                {
                  "type": "var",
                  "data": "removed",
                  "source": "removed"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "window",
                        "source": "window \"refresh_bg\""
                      },
                      {
                        "type": "str",
                        "data": "\"refresh_bg\"",
                        "source": "\"refresh_bg\""
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "change_focus = true",
                        "left": {
                          "type": "var",
                          "data": "change_focus",
                          "source": "change_focus"
                        },
                        "right": {
                          "type": "var",
                          "data": true,
                          "source": "true"
                        }
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "if",
                        "source": "if edit_connection != null (\n        rotur.unSubscribe(edit_connection.room)\n      )"
                      },
                      {
                        "type": "cmp",
                        "data": "!=",
                        "source": "!=",
                        "left": {
                          "type": "var",
                          "data": "edit_connection",
                          "source": "edit_connection"
                        },
                        "right": {
                          "type": "unk",
                          "data": null,
                          "source": "null"
                        }
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "asi",
                              "data": "=??",
                              "source": "rotur.unSubscribe(edit_connection.room)",
                              "left": {
                                "type": "var",
                                "data": "rotur",
                                "source": "rotur"
                              },
                              "right": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "rotur",
                                    "source": "rotur"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "unSubscribe",
                                    "parameters": [
                                      {
                                        "type": "mtd",
                                        "data": [
                                          {
                                            "type": "var",
                                            "data": "edit_connection",
                                            "source": "edit_connection"
                                          },
                                          {
                                            "type": "var",
                                            "data": "room",
                                            "source": "room"
                                          }
                                        ],
                                        "source": "edit_connection.room"
                                      }
                                    ],
                                    "source": "unSubscribe(edit_connection.room)"
                                  }
                                ],
                                "source": "rotur.unSubscribe(edit_connection.room)"
                              }
                            }
                          ]
                        ],
                        "source": "(\n        rotur.unSubscribe(edit_connection.room)\n      )"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "if",
                        "source": "if i > 1 (\n        prev = tabs.[i - 1]\n      ) else (\n        prev = tabs.[i + 1]\n      )"
                      },
                      {
                        "type": "cmp",
                        "data": ">",
                        "source": ">",
                        "left": {
                          "type": "var",
                          "data": "i",
                          "source": "i"
                        },
                        "right": {
                          "type": "num",
                          "data": 1,
                          "source": "1"
                        }
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "prev = tabs.[i - 1]",
                              "left": {
                                "type": "var",
                                "data": "prev",
                                "source": "prev"
                              },
                              "right": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "tabs",
                                    "source": "tabs"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "item",
                                    "parameters": [
                                      {
                                        "type": "opr",
                                        "data": "-",
                                        "source": "-",
                                        "left": {
                                          "type": "var",
                                          "data": "i",
                                          "source": "i"
                                        },
                                        "right": {
                                          "type": "num",
                                          "data": 1,
                                          "source": "1"
                                        }
                                      }
                                    ],
                                    "source": "[i - 1]"
                                  }
                                ],
                                "source": "tabs.[i - 1]"
                              }
                            }
                          ]
                        ],
                        "source": "(\n        prev = tabs.[i - 1]\n      )"
                      },
                      {
                        "type": "var",
                        "data": "else",
                        "source": "else"
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "prev = tabs.[i + 1]",
                              "left": {
                                "type": "var",
                                "data": "prev",
                                "source": "prev"
                              },
                              "right": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "tabs",
                                    "source": "tabs"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "item",
                                    "parameters": [
                                      {
                                        "type": "opr",
                                        "data": "+",
                                        "source": "+",
                                        "left": {
                                          "type": "var",
                                          "data": "i",
                                          "source": "i"
                                        },
                                        "right": {
                                          "type": "num",
                                          "data": 1,
                                          "source": "1"
                                        }
                                      }
                                    ],
                                    "source": "[i + 1]"
                                  }
                                ],
                                "source": "tabs.[i + 1]"
                              }
                            }
                          ]
                        ],
                        "source": "(\n        prev = tabs.[i + 1]\n      )"
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=??",
                        "source": "tabs_out.delete(i)",
                        "left": {
                          "type": "var",
                          "data": "tabs_out",
                          "source": "tabs_out"
                        },
                        "right": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "tabs_out",
                              "source": "tabs_out"
                            },
                            {
                              "type": "mtv",
                              "data": "delete",
                              "parameters": [
                                {
                                  "type": "var",
                                  "data": "i",
                                  "source": "i"
                                }
                              ],
                              "source": "delete(i)"
                            }
                          ],
                          "source": "tabs_out.delete(i)"
                        }
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "current_tab = prev",
                        "left": {
                          "type": "var",
                          "data": "current_tab",
                          "source": "current_tab"
                        },
                        "right": {
                          "type": "var",
                          "data": "prev",
                          "source": "prev"
                        }
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "if",
                        "source": "if tabs_out.len == 0 (\n        tabs = tabs_out\n        add_tab \"> Welcome\"\n        tabs_out = tabs\n      )"
                      },
                      {
                        "type": "cmp",
                        "data": "==",
                        "source": "==",
                        "left": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "tabs_out",
                              "source": "tabs_out"
                            },
                            {
                              "type": "var",
                              "data": "len",
                              "source": "len"
                            }
                          ],
                          "source": "tabs_out.len"
                        },
                        "right": {
                          "type": "num",
                          "data": 0,
                          "source": "0"
                        }
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "tabs = tabs_out",
                              "left": {
                                "type": "var",
                                "data": "tabs",
                                "source": "tabs"
                              },
                              "right": {
                                "type": "var",
                                "data": "tabs_out",
                                "source": "tabs_out"
                              }
                            }
                          ],
                          [
                            {
                              "type": "cmd",
                              "data": "add_tab",
                              "source": "add_tab \"> Welcome\""
                            },
                            {
                              "type": "str",
                              "data": "\"> Welcome\"",
                              "source": "\"> Welcome\""
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "tabs_out = tabs",
                              "left": {
                                "type": "var",
                                "data": "tabs_out",
                                "source": "tabs_out"
                              },
                              "right": {
                                "type": "var",
                                "data": "tabs",
                                "source": "tabs"
                              }
                            }
                          ]
                        ],
                        "source": "(\n        tabs = tabs_out\n        add_tab \"> Welcome\"\n        tabs_out = tabs\n      )"
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "removed = false",
                        "left": {
                          "type": "var",
                          "data": "removed",
                          "source": "removed"
                        },
                        "right": {
                          "type": "var",
                          "data": false,
                          "source": "false"
                        }
                      }
                    ]
                  ],
                  "source": "(\n      window \"refresh_bg\"\n      change_focus = true\n      if edit_connection != null (\n        rotur.unSubscribe(edit_connection.room)\n      )\n      if i > 1 (\n        prev = tabs.[i - 1]\n      ) else (\n        prev = tabs.[i + 1]\n      )\n      tabs_out.delete(i)\n      current_tab = prev\n      if tabs_out.len == 0 (\n        tabs = tabs_out\n        add_tab \"> Welcome\"\n        tabs_out = tabs\n      )\n      removed = false\n    )"
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "+=",
                  "source": "x += tw",
                  "left": {
                    "type": "var",
                    "data": "x",
                    "source": "x"
                  },
                  "right": {
                    "type": "var",
                    "data": "tw",
                    "source": "tw"
                  }
                }
              ]
            ],
            "source": "(\n    tw = 0\n    if tab.startsWith(\"> \") (\n      tab_name = tab.trim(3,-1)\n      file = false\n    ) else if tab.startsWith(\"^\") (\n      tab_name = \"Live Share (\" ++ share_name ++ \")\"\n      file = false\n    ) else (\n      file \"open\" tab \"onlyaccess\"\n      tab_name = fileGet(2) ++ fileGet(1)\n      file = true\n    )\n    \n    l = tab_name.len * 9 + 25\n    if file \"l += 20\"\n    tw += l + 25\n    goto x + (tw / 2) 0\n    \n    square l + 10 20 10 : c#window_colour\n    if file (\n      change_x -10\n      square l - 10 20 10 0 1\n      change_x 10\n      file \"interact\"\n      if data == \"open\" (\n        current_tab = tab\n        change_focus = true\n      )\n      if data == \"dragging\" (\n        removed = true\n        change_focus = true\n      )\n    ) else (\n      if onclick (\n        current_tab = tab\n        change_focus = true\n      )\n    )\n    change_x l / -2\n    if file (\n      change_x 5\n      file \"render\" 0.7\n      change_x 15\n    )\n    c tab == current_tab ? c_text c_seco\n    text tab_name 9\n    icon \"close\" 0.5 : chx#20\n    if onclick (\n      removed = true\n    )\n    if file_dragging (\n      change_x 17\n      if dist(x_position,y_position,mouse_x,mouse_y) < 40 (\n        square 0 30 2 : c#c_text\n        current_tab_target = i + 1\n      )\n      change_x -17\n    )\n    if removed (\n      window \"refresh_bg\"\n      change_focus = true\n      if edit_connection != null (\n        rotur.unSubscribe(edit_connection.room)\n      )\n      if i > 1 (\n        prev = tabs.[i - 1]\n      ) else (\n        prev = tabs.[i + 1]\n      )\n      tabs_out.delete(i)\n      current_tab = prev\n      if tabs_out.len == 0 (\n        tabs = tabs_out\n        add_tab \"> Welcome\"\n        tabs_out = tabs\n      )\n      removed = false\n    )\n    x += tw\n  )"
          }
        ],
        [
          {
            "type": "asi",
            "data": "=",
            "source": "tabs = tabs_out",
            "left": {
              "type": "var",
              "data": "tabs",
              "source": "tabs"
            },
            "right": {
              "type": "var",
              "data": "tabs_out",
              "source": "tabs_out"
            }
          }
        ],
        [
          {
            "type": "cmd",
            "data": "if",
            "source": "if edit_connection == null (\n    icon \"add\" 0.6 : chx#30 c#c_text\n    if onclick (\n      add_tab \"> Welcome\"\n    )\n  )"
          },
          {
            "type": "cmp",
            "data": "==",
            "source": "==",
            "left": {
              "type": "var",
              "data": "edit_connection",
              "source": "edit_connection"
            },
            "right": {
              "type": "unk",
              "data": null,
              "source": "null"
            }
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "cmd",
                  "data": "icon",
                  "source": "icon \"add\" 0.6 : chx#30 c#c_text"
                },
                {
                  "type": "str",
                  "data": "\"add\"",
                  "source": "\"add\""
                },
                {
                  "type": "num",
                  "data": 0.6,
                  "source": "0.6"
                },
                {
                  "type": "mod",
                  "data": [
                    "chx",
                    {
                      "type": "num",
                      "data": 30,
                      "source": "30"
                    }
                  ],
                  "source": "chx#30"
                },
                {
                  "type": "mod",
                  "data": [
                    "c",
                    {
                      "type": "var",
                      "data": "c_text",
                      "source": "c_text"
                    }
                  ],
                  "source": "c#c_text"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if onclick (\n      add_tab \"> Welcome\"\n    )"
                },
                {
                  "type": "var",
                  "data": "onclick",
                  "source": "onclick"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "add_tab",
                        "source": "add_tab \"> Welcome\""
                      },
                      {
                        "type": "str",
                        "data": "\"> Welcome\"",
                        "source": "\"> Welcome\""
                      }
                    ]
                  ],
                  "source": "(\n      add_tab \"> Welcome\"\n    )"
                }
              ]
            ],
            "source": "(\n    icon \"add\" 0.6 : chx#30 c#c_text\n    if onclick (\n      add_tab \"> Welcome\"\n    )\n  )"
          }
        ],
        [
          {
            "type": "asi",
            "data": "=",
            "source": "tabs = tabs_out",
            "left": {
              "type": "var",
              "data": "tabs",
              "source": "tabs"
            },
            "right": {
              "type": "var",
              "data": "tabs_out",
              "source": "tabs_out"
            }
          }
        ],
        [
          {
            "type": "asi",
            "data": "=",
            "source": "dragbox.[1].[3] = x + frame.right + 80",
            "left": {
              "type": "mtd",
              "data": [
                {
                  "type": "var",
                  "data": "dragbox",
                  "source": "dragbox"
                },
                {
                  "type": "mtv",
                  "data": "item",
                  "parameters": [
                    {
                      "type": "num",
                      "data": 1,
                      "source": "1"
                    }
                  ],
                  "source": "[1]"
                },
                {
                  "type": "mtv",
                  "data": "item",
                  "parameters": [
                    {
                      "type": "num",
                      "data": 3,
                      "source": "3"
                    }
                  ],
                  "source": "[3]"
                }
              ],
              "source": "dragbox.[1].[3]"
            },
            "right": {
              "type": "opr",
              "data": "+",
              "source": "+",
              "left": {
                "type": "opr",
                "data": "+",
                "source": "+",
                "left": {
                  "type": "var",
                  "data": "x",
                  "source": "x"
                },
                "right": {
                  "type": "mtd",
                  "data": [
                    {
                      "type": "var",
                      "data": "frame",
                      "source": "frame"
                    },
                    {
                      "type": "var",
                      "data": "right",
                      "source": "right"
                    }
                  ],
                  "source": "frame.right"
                }
              },
              "right": {
                "type": "num",
                "data": 80,
                "source": "80"
              }
            }
          }
        ]
      ],
      "source": "(\n  loc 2 9999 10 0\n  \n  c c_text\n  x = frame.left - 2.5\n  if tabs_out != tabs (\n    window \"refresh_bg\"\n    tabs_out = tabs\n  )\n  \n  if edit_connection != null (\n    tabs_out = tabs\n  )\n  \n  each i tab tabs (\n    tw = 0\n    if tab.startsWith(\"> \") (\n      tab_name = tab.trim(3,-1)\n      file = false\n    ) else if tab.startsWith(\"^\") (\n      tab_name = \"Live Share (\" ++ share_name ++ \")\"\n      file = false\n    ) else (\n      file \"open\" tab \"onlyaccess\"\n      tab_name = fileGet(2) ++ fileGet(1)\n      file = true\n    )\n    \n    l = tab_name.len * 9 + 25\n    if file \"l += 20\"\n    tw += l + 25\n    goto x + (tw / 2) 0\n    \n    square l + 10 20 10 : c#window_colour\n    if file (\n      change_x -10\n      square l - 10 20 10 0 1\n      change_x 10\n      file \"interact\"\n      if data == \"open\" (\n        current_tab = tab\n        change_focus = true\n      )\n      if data == \"dragging\" (\n        removed = true\n        change_focus = true\n      )\n    ) else (\n      if onclick (\n        current_tab = tab\n        change_focus = true\n      )\n    )\n    change_x l / -2\n    if file (\n      change_x 5\n      file \"render\" 0.7\n      change_x 15\n    )\n    c tab == current_tab ? c_text c_seco\n    text tab_name 9\n    icon \"close\" 0.5 : chx#20\n    if onclick (\n      removed = true\n    )\n    if file_dragging (\n      change_x 17\n      if dist(x_position,y_position,mouse_x,mouse_y) < 40 (\n        square 0 30 2 : c#c_text\n        current_tab_target = i + 1\n      )\n      change_x -17\n    )\n    if removed (\n      window \"refresh_bg\"\n      change_focus = true\n      if edit_connection != null (\n        rotur.unSubscribe(edit_connection.room)\n      )\n      if i > 1 (\n        prev = tabs.[i - 1]\n      ) else (\n        prev = tabs.[i + 1]\n      )\n      tabs_out.delete(i)\n      current_tab = prev\n      if tabs_out.len == 0 (\n        tabs = tabs_out\n        add_tab \"> Welcome\"\n        tabs_out = tabs\n      )\n      removed = false\n    )\n    x += tw\n  )\n  tabs = tabs_out\n  if edit_connection == null (\n    icon \"add\" 0.6 : chx#30 c#c_text\n    if onclick (\n      add_tab \"> Welcome\"\n    )\n  )\n  tabs = tabs_out \n  dragbox.[1].[3] = x + frame.right + 80\n)"
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "def sidebarButtons(file_uuid, input_name) (\n  c c_text\n  icon \"save\" 0.8\n  square 30 30 12 1 1\n  local path = open(file_uuid, [\"location\", \"name\", \"type\"])\n  local file_type = path.[3]\n  if onclick (\n    path = path.[1] ++ \"/\" ++ path.[2] ++ path.[3]\n    file \"set\" 4 inputs.[input_name].join(\"\\n\")\n    recents = \"recent_files.json\".saveGet()\n    save \"recent_files.json\" \"set\" recents.delete(file_uuid).prepend(file_uuid).trim(1,8)\n  )\n  \n  change_y -50\n  if [\".osl\",\".oasm\",\".py\",\".js\",\".bf\",\".owf\",\".ots\"].contains(file_type) (\n    icon \"play\" 0.8\n    square 30 30 12 1 1\n    if onclick (\n      local code = inputs.[input_name].join(\"\\n\")\n      switch share_type (\n        case \".py\"\n          py code\n          script_output = data\n          break\n        case \".js\"\n          script_output = code.eval()\n          break\n        default\n          file \"open\" file_uuid \"onlyaccess\"\n          file \"start\"\n          file \"close\"\n      )\n    )\n    change_y -50\n  )\n  if [\".json\", \".ohf\", \".ojff\"].contains(file_type) (\n    if inputs.[input_name].len == 1 (\n      icon \"line -10 10 5 10 line 0 2.5 10 2.5 line 0 -5 10 -5\" 0.6\n      if onclick (\n        inputs.[input_name] = inputs.[input_name].[1].JsonParse().JsonFormat().split(\"\\n\")\n      )\n    ) else (\n      icon \"line -10 10 10 10 line -10 2.5 10 2.5 line -10 -5 5 -5\" 0.6\n      if onclick (\n        inputs.[input_name] = inputs.[input_name].join(\"\\n\").JsonParse().toStr().split(\"\\n\")\n      )\n    )\n    change_y -50\n  )\n  \n  icon \"rename\" 0.8\n  square 30 30 12 1 1\n  if onclick (\n    window.create(\"rename-helper\", file_uuid)\n  )\n  \n  change_y -50\n  icon \"w 3 cutcircle -2 2 8 0 180 w 3.5 line 4 -4 12 -12\" 0.8\n  if onclick (\n    window.create(\"find_replace_helper\", file_uuid)\n  )\n  \n  sidebar.mode = \"none\"\n  switch file_type (\n    case \".icn\"\n      sidebar.icn ??= {\n        display: [0,0],\n        last_display: [0,0],\n        mouse: [0,0],\n        zoom: 1\n      }\n      sidebar.mode = \".icn\"\n      sidebar.input_name = input_name\n      sidebar.fn = def() -> (\n        if frame.interactable == \"\" (\n          frame.interactable = mouse_x > frame.left\n        )\n        if self._resizing.not() and frame.interactable (\n          if mouse_down (\n            icn.display = icn.last_display - (icn.mouse - [mouse_x, mouse_y])\n          ) else (\n            icn.last_display = icn.display\n            icn.mouse @= [mouse_x, mouse_y]\n          )\n        )\n        if frame.interactable (\n          icn.zoom += system_os == \"Windows\" ? scroll_velocity / -100 scroll_velocity / 10\n        )\n        goto self.icn.display\n        c c_seco\n        icon \"w 0 square 0 0 10 9999 square 0 0 9999 10 w 5 c\" + c_text + inputs.[self.input_name].join(\" \") icn.zoom\n      )\n      break\n  )\n  \n  change_y -50\n  icon \"network\" 0.8\n  if onclick (\n    add_tab \"> invite\"\n    start = true\n  )\n)",
      "left": {
        "type": "var",
        "data": "sidebarButtons",
        "source": "def"
      },
      "right": {
        "type": "fnc",
        "data": "function",
        "parameters": [
          {
            "type": "str",
            "data": "file_uuid,input_name"
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "cmd",
                  "data": "c",
                  "source": "c c_text"
                },
                {
                  "type": "var",
                  "data": "c_text",
                  "source": "c_text"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "icon",
                  "source": "icon \"save\" 0.8"
                },
                {
                  "type": "str",
                  "data": "\"save\"",
                  "source": "\"save\""
                },
                {
                  "type": "num",
                  "data": 0.8,
                  "source": "0.8"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "square",
                  "source": "square 30 30 12 1 1"
                },
                {
                  "type": "num",
                  "data": 30,
                  "source": "30"
                },
                {
                  "type": "num",
                  "data": 30,
                  "source": "30"
                },
                {
                  "type": "num",
                  "data": 12,
                  "source": "12"
                },
                {
                  "type": "num",
                  "data": 1,
                  "source": "1"
                },
                {
                  "type": "num",
                  "data": 1,
                  "source": "1"
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "local path = open(file_uuid, [\"location\", \"name\", \"type\"])",
                  "left": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "this",
                        "source": "this"
                      },
                      {
                        "type": "var",
                        "data": "path",
                        "source": "path"
                      }
                    ],
                    "source": "this.path"
                  },
                  "right": {
                    "type": "fnc",
                    "data": "open",
                    "parameters": [
                      {
                        "type": "var",
                        "data": "file_uuid",
                        "source": "file_uuid"
                      },
                      {
                        "type": "arr",
                        "data": [
                          {
                            "type": "str",
                            "data": "\"location\"",
                            "source": "\"location\""
                          },
                          {
                            "type": "str",
                            "data": "\"name\"",
                            "source": "\"name\""
                          },
                          {
                            "type": "str",
                            "data": "\"type\"",
                            "source": "\"type\""
                          }
                        ],
                        "source": "[\"location\", \"name\", \"type\"]"
                      }
                    ],
                    "source": "open(file_uuid, [\"location\", \"name\", \"type\"])"
                  }
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "local file_type = path.[3]",
                  "left": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "this",
                        "source": "this"
                      },
                      {
                        "type": "var",
                        "data": "file_type",
                        "source": "file_type"
                      }
                    ],
                    "source": "this.file_type"
                  },
                  "right": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "path",
                        "source": "path"
                      },
                      {
                        "type": "mtv",
                        "data": "item",
                        "parameters": [
                          {
                            "type": "num",
                            "data": 3,
                            "source": "3"
                          }
                        ],
                        "source": "[3]"
                      }
                    ],
                    "source": "path.[3]"
                  }
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if onclick (\n    path = path.[1] ++ \"/\" ++ path.[2] ++ path.[3]\n    file \"set\" 4 inputs.[input_name].join(\"\\n\")\n    recents = \"recent_files.json\".saveGet()\n    save \"recent_files.json\" \"set\" recents.delete(file_uuid).prepend(file_uuid).trim(1,8)\n  )"
                },
                {
                  "type": "var",
                  "data": "onclick",
                  "source": "onclick"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "path = path.[1] ++ \"/\" ++ path.[2] ++ path.[3]",
                        "left": {
                          "type": "var",
                          "data": "path",
                          "source": "path"
                        },
                        "right": {
                          "type": "opr",
                          "data": "++",
                          "source": "++",
                          "left": {
                            "type": "opr",
                            "data": "++",
                            "source": "++",
                            "left": {
                              "type": "opr",
                              "data": "++",
                              "source": "++",
                              "left": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "path",
                                    "source": "path"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "item",
                                    "parameters": [
                                      {
                                        "type": "num",
                                        "data": 1,
                                        "source": "1"
                                      }
                                    ],
                                    "source": "[1]"
                                  }
                                ],
                                "source": "path.[1]"
                              },
                              "right": {
                                "type": "str",
                                "data": "\"/\"",
                                "source": "\"/\""
                              }
                            },
                            "right": {
                              "type": "mtd",
                              "data": [
                                {
                                  "type": "var",
                                  "data": "path",
                                  "source": "path"
                                },
                                {
                                  "type": "mtv",
                                  "data": "item",
                                  "parameters": [
                                    {
                                      "type": "num",
                                      "data": 2,
                                      "source": "2"
                                    }
                                  ],
                                  "source": "[2]"
                                }
                              ],
                              "source": "path.[2]"
                            }
                          },
                          "right": {
                            "type": "mtd",
                            "data": [
                              {
                                "type": "var",
                                "data": "path",
                                "source": "path"
                              },
                              {
                                "type": "mtv",
                                "data": "item",
                                "parameters": [
                                  {
                                    "type": "num",
                                    "data": 3,
                                    "source": "3"
                                  }
                                ],
                                "source": "[3]"
                              }
                            ],
                            "source": "path.[3]"
                          }
                        }
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "file",
                        "source": "file \"set\" 4 inputs.[input_name].join(\"\\n\")"
                      },
                      {
                        "type": "str",
                        "data": "\"set\"",
                        "source": "\"set\""
                      },
                      {
                        "type": "num",
                        "data": 4,
                        "source": "4"
                      },
                      {
                        "type": "mtd",
                        "data": [
                          {
                            "type": "var",
                            "data": "inputs",
                            "source": "inputs"
                          },
                          {
                            "type": "mtv",
                            "data": "item",
                            "parameters": [
                              {
                                "type": "var",
                                "data": "input_name",
                                "source": "input_name"
                              }
                            ],
                            "source": "[input_name]"
                          },
                          {
                            "type": "mtv",
                            "data": "join",
                            "parameters": [
                              {
                                "type": "str",
                                "data": "\"\\n\"",
                                "source": "\"\\n\""
                              }
                            ],
                            "source": "join(\"\\n\")"
                          }
                        ],
                        "source": "inputs.[input_name].join(\"\\n\")"
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "recents = \"recent_files.json\".saveGet()",
                        "left": {
                          "type": "var",
                          "data": "recents",
                          "source": "recents"
                        },
                        "right": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "str",
                              "data": "\"recent_files.json\"",
                              "source": "\"recent_files.json\""
                            },
                            {
                              "type": "mtv",
                              "data": "saveGet",
                              "parameters": [],
                              "source": "saveGet()"
                            }
                          ],
                          "source": "\"recent_files.json\".saveGet()"
                        }
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "save",
                        "source": "save \"recent_files.json\" \"set\" recents.delete(file_uuid).prepend(file_uuid).trim(1,8)"
                      },
                      {
                        "type": "str",
                        "data": "\"recent_files.json\"",
                        "source": "\"recent_files.json\""
                      },
                      {
                        "type": "str",
                        "data": "\"set\"",
                        "source": "\"set\""
                      },
                      {
                        "type": "mtd",
                        "data": [
                          {
                            "type": "var",
                            "data": "recents",
                            "source": "recents"
                          },
                          {
                            "type": "mtv",
                            "data": "delete",
                            "parameters": [
                              {
                                "type": "var",
                                "data": "file_uuid",
                                "source": "file_uuid"
                              }
                            ],
                            "source": "delete(file_uuid)"
                          },
                          {
                            "type": "mtv",
                            "data": "prepend",
                            "parameters": [
                              {
                                "type": "var",
                                "data": "file_uuid",
                                "source": "file_uuid"
                              }
                            ],
                            "source": "prepend(file_uuid)"
                          },
                          {
                            "type": "mtv",
                            "data": "trim",
                            "parameters": [
                              {
                                "type": "num",
                                "data": 1,
                                "source": "1"
                              },
                              {
                                "type": "num",
                                "data": 8,
                                "source": "8"
                              }
                            ],
                            "source": "trim(1,8)"
                          }
                        ],
                        "source": "recents.delete(file_uuid).prepend(file_uuid).trim(1,8)"
                      }
                    ]
                  ],
                  "source": "(\n    path = path.[1] ++ \"/\" ++ path.[2] ++ path.[3]\n    file \"set\" 4 inputs.[input_name].join(\"\\n\")\n    recents = \"recent_files.json\".saveGet()\n    save \"recent_files.json\" \"set\" recents.delete(file_uuid).prepend(file_uuid).trim(1,8)\n  )"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "change_y",
                  "source": "change_y -50"
                },
                {
                  "type": "num",
                  "data": -50,
                  "source": "-50"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if [\".osl\",\".oasm\",\".py\",\".js\",\".bf\",\".owf\",\".ots\"].contains(file_type) (\n    icon \"play\" 0.8\n    square 30 30 12 1 1\n    if onclick (\n      local code = inputs.[input_name].join(\"\\n\")\n      switch share_type (\n        case \".py\"\n          py code\n          script_output = data\n          break\n        case \".js\"\n          script_output = code.eval()\n          break\n        default\n          file \"open\" file_uuid \"onlyaccess\"\n          file \"start\"\n          file \"close\"\n      )\n    )\n    change_y -50\n  )"
                },
                {
                  "type": "mtd",
                  "data": [
                    {
                      "type": "arr",
                      "data": [
                        {
                          "type": "str",
                          "data": "\".osl\"",
                          "source": "\".osl\""
                        },
                        {
                          "type": "str",
                          "data": "\".oasm\"",
                          "source": "\".oasm\""
                        },
                        {
                          "type": "str",
                          "data": "\".py\"",
                          "source": "\".py\""
                        },
                        {
                          "type": "str",
                          "data": "\".js\"",
                          "source": "\".js\""
                        },
                        {
                          "type": "str",
                          "data": "\".bf\"",
                          "source": "\".bf\""
                        },
                        {
                          "type": "str",
                          "data": "\".owf\"",
                          "source": "\".owf\""
                        },
                        {
                          "type": "str",
                          "data": "\".ots\"",
                          "source": "\".ots\""
                        }
                      ],
                      "source": "[\".osl\",\".oasm\",\".py\",\".js\",\".bf\",\".owf\",\".ots\"]"
                    },
                    {
                      "type": "mtv",
                      "data": "contains",
                      "parameters": [
                        {
                          "type": "var",
                          "data": "file_type",
                          "source": "file_type"
                        }
                      ],
                      "source": "contains(file_type)"
                    }
                  ],
                  "source": "[\".osl\",\".oasm\",\".py\",\".js\",\".bf\",\".owf\",\".ots\"].contains(file_type)"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "icon",
                        "source": "icon \"play\" 0.8"
                      },
                      {
                        "type": "str",
                        "data": "\"play\"",
                        "source": "\"play\""
                      },
                      {
                        "type": "num",
                        "data": 0.8,
                        "source": "0.8"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "square",
                        "source": "square 30 30 12 1 1"
                      },
                      {
                        "type": "num",
                        "data": 30,
                        "source": "30"
                      },
                      {
                        "type": "num",
                        "data": 30,
                        "source": "30"
                      },
                      {
                        "type": "num",
                        "data": 12,
                        "source": "12"
                      },
                      {
                        "type": "num",
                        "data": 1,
                        "source": "1"
                      },
                      {
                        "type": "num",
                        "data": 1,
                        "source": "1"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "if",
                        "source": "if onclick (\n      local code = inputs.[input_name].join(\"\\n\")\n      switch share_type (\n        case \".py\"\n          py code\n          script_output = data\n          break\n        case \".js\"\n          script_output = code.eval()\n          break\n        default\n          file \"open\" file_uuid \"onlyaccess\"\n          file \"start\"\n          file \"close\"\n      )\n    )"
                      },
                      {
                        "type": "var",
                        "data": "onclick",
                        "source": "onclick"
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "local code = inputs.[input_name].join(\"\\n\")",
                              "left": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "this",
                                    "source": "this"
                                  },
                                  {
                                    "type": "var",
                                    "data": "code",
                                    "source": "code"
                                  }
                                ],
                                "source": "this.code"
                              },
                              "right": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "inputs",
                                    "source": "inputs"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "item",
                                    "parameters": [
                                      {
                                        "type": "var",
                                        "data": "input_name",
                                        "source": "input_name"
                                      }
                                    ],
                                    "source": "[input_name]"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "join",
                                    "parameters": [
                                      {
                                        "type": "str",
                                        "data": "\"\\n\"",
                                        "source": "\"\\n\""
                                      }
                                    ],
                                    "source": "join(\"\\n\")"
                                  }
                                ],
                                "source": "inputs.[input_name].join(\"\\n\")"
                              }
                            }
                          ],
                          [
                            {
                              "type": "cmd",
                              "data": "switch",
                              "source": "switch share_type (\n        case \".py\"\n          py code\n          script_output = data\n          break\n        case \".js\"\n          script_output = code.eval()\n          break\n        default\n          file \"open\" file_uuid \"onlyaccess\"\n          file \"start\"\n          file \"close\"\n      )"
                            },
                            {
                              "type": "var",
                              "data": "share_type",
                              "source": "share_type"
                            },
                            {
                              "type": "blk",
                              "data": [
                                [
                                  {
                                    "type": "cmd",
                                    "data": "case",
                                    "source": "case \".py\""
                                  },
                                  {
                                    "type": "str",
                                    "data": "\".py\"",
                                    "source": "\".py\""
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "py",
                                    "source": "py code"
                                  },
                                  {
                                    "type": "var",
                                    "data": "code",
                                    "source": "code"
                                  }
                                ],
                                [
                                  {
                                    "type": "asi",
                                    "data": "=",
                                    "source": "script_output = data",
                                    "left": {
                                      "type": "var",
                                      "data": "script_output",
                                      "source": "script_output"
                                    },
                                    "right": {
                                      "type": "var",
                                      "data": "data",
                                      "source": "data"
                                    }
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "break",
                                    "source": "break"
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "case",
                                    "source": "case \".js\""
                                  },
                                  {
                                    "type": "str",
                                    "data": "\".js\"",
                                    "source": "\".js\""
                                  }
                                ],
                                [
                                  {
                                    "type": "asi",
                                    "data": "=",
                                    "source": "script_output = code.eval()",
                                    "left": {
                                      "type": "var",
                                      "data": "script_output",
                                      "source": "script_output"
                                    },
                                    "right": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "code",
                                          "source": "code"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "eval",
                                          "parameters": [],
                                          "source": "eval()"
                                        }
                                      ],
                                      "source": "code.eval()"
                                    }
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "break",
                                    "source": "break"
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "default",
                                    "source": "default"
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "file",
                                    "source": "file \"open\" file_uuid \"onlyaccess\""
                                  },
                                  {
                                    "type": "str",
                                    "data": "\"open\"",
                                    "source": "\"open\""
                                  },
                                  {
                                    "type": "var",
                                    "data": "file_uuid",
                                    "source": "file_uuid"
                                  },
                                  {
                                    "type": "str",
                                    "data": "\"onlyaccess\"",
                                    "source": "\"onlyaccess\""
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "file",
                                    "source": "file \"start\""
                                  },
                                  {
                                    "type": "str",
                                    "data": "\"start\"",
                                    "source": "\"start\""
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "file",
                                    "source": "file \"close\""
                                  },
                                  {
                                    "type": "str",
                                    "data": "\"close\"",
                                    "source": "\"close\""
                                  }
                                ]
                              ],
                              "source": "(\n        case \".py\"\n          py code\n          script_output = data\n          break\n        case \".js\"\n          script_output = code.eval()\n          break\n        default\n          file \"open\" file_uuid \"onlyaccess\"\n          file \"start\"\n          file \"close\"\n      )"
                            }
                          ]
                        ],
                        "source": "(\n      local code = inputs.[input_name].join(\"\\n\")\n      switch share_type (\n        case \".py\"\n          py code\n          script_output = data\n          break\n        case \".js\"\n          script_output = code.eval()\n          break\n        default\n          file \"open\" file_uuid \"onlyaccess\"\n          file \"start\"\n          file \"close\"\n      )\n    )"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "change_y",
                        "source": "change_y -50"
                      },
                      {
                        "type": "num",
                        "data": -50,
                        "source": "-50"
                      }
                    ]
                  ],
                  "source": "(\n    icon \"play\" 0.8\n    square 30 30 12 1 1\n    if onclick (\n      local code = inputs.[input_name].join(\"\\n\")\n      switch share_type (\n        case \".py\"\n          py code\n          script_output = data\n          break\n        case \".js\"\n          script_output = code.eval()\n          break\n        default\n          file \"open\" file_uuid \"onlyaccess\"\n          file \"start\"\n          file \"close\"\n      )\n    )\n    change_y -50\n  )"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if [\".json\", \".ohf\", \".ojff\"].contains(file_type) (\n    if inputs.[input_name].len == 1 (\n      icon \"line -10 10 5 10 line 0 2.5 10 2.5 line 0 -5 10 -5\" 0.6\n      if onclick (\n        inputs.[input_name] = inputs.[input_name].[1].JsonParse().JsonFormat().split(\"\\n\")\n      )\n    ) else (\n      icon \"line -10 10 10 10 line -10 2.5 10 2.5 line -10 -5 5 -5\" 0.6\n      if onclick (\n        inputs.[input_name] = inputs.[input_name].join(\"\\n\").JsonParse().toStr().split(\"\\n\")\n      )\n    )\n    change_y -50\n  )"
                },
                {
                  "type": "mtd",
                  "data": [
                    {
                      "type": "arr",
                      "data": [
                        {
                          "type": "str",
                          "data": "\".json\"",
                          "source": "\".json\""
                        },
                        {
                          "type": "str",
                          "data": "\".ohf\"",
                          "source": "\".ohf\""
                        },
                        {
                          "type": "str",
                          "data": "\".ojff\"",
                          "source": "\".ojff\""
                        }
                      ],
                      "source": "[\".json\", \".ohf\", \".ojff\"]"
                    },
                    {
                      "type": "mtv",
                      "data": "contains",
                      "parameters": [
                        {
                          "type": "var",
                          "data": "file_type",
                          "source": "file_type"
                        }
                      ],
                      "source": "contains(file_type)"
                    }
                  ],
                  "source": "[\".json\", \".ohf\", \".ojff\"].contains(file_type)"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "if",
                        "source": "if inputs.[input_name].len == 1 (\n      icon \"line -10 10 5 10 line 0 2.5 10 2.5 line 0 -5 10 -5\" 0.6\n      if onclick (\n        inputs.[input_name] = inputs.[input_name].[1].JsonParse().JsonFormat().split(\"\\n\")\n      )\n    ) else (\n      icon \"line -10 10 10 10 line -10 2.5 10 2.5 line -10 -5 5 -5\" 0.6\n      if onclick (\n        inputs.[input_name] = inputs.[input_name].join(\"\\n\").JsonParse().toStr().split(\"\\n\")\n      )\n    )"
                      },
                      {
                        "type": "cmp",
                        "data": "==",
                        "source": "==",
                        "left": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "inputs",
                              "source": "inputs"
                            },
                            {
                              "type": "mtv",
                              "data": "item",
                              "parameters": [
                                {
                                  "type": "var",
                                  "data": "input_name",
                                  "source": "input_name"
                                }
                              ],
                              "source": "[input_name]"
                            },
                            {
                              "type": "var",
                              "data": "len",
                              "source": "len"
                            }
                          ],
                          "source": "inputs.[input_name].len"
                        },
                        "right": {
                          "type": "num",
                          "data": 1,
                          "source": "1"
                        }
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "cmd",
                              "data": "icon",
                              "source": "icon \"line -10 10 5 10 line 0 2.5 10 2.5 line 0 -5 10 -5\" 0.6"
                            },
                            {
                              "type": "str",
                              "data": "\"line -10 10 5 10 line 0 2.5 10 2.5 line 0 -5 10 -5\"",
                              "source": "\"line -10 10 5 10 line 0 2.5 10 2.5 line 0 -5 10 -5\""
                            },
                            {
                              "type": "num",
                              "data": 0.6,
                              "source": "0.6"
                            }
                          ],
                          [
                            {
                              "type": "cmd",
                              "data": "if",
                              "source": "if onclick (\n        inputs.[input_name] = inputs.[input_name].[1].JsonParse().JsonFormat().split(\"\\n\")\n      )"
                            },
                            {
                              "type": "var",
                              "data": "onclick",
                              "source": "onclick"
                            },
                            {
                              "type": "blk",
                              "data": [
                                [
                                  {
                                    "type": "asi",
                                    "data": "=",
                                    "source": "inputs.[input_name] = inputs.[input_name].[1].JsonParse().JsonFormat().split(\"\\n\")",
                                    "left": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "inputs",
                                          "source": "inputs"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "item",
                                          "parameters": [
                                            {
                                              "type": "var",
                                              "data": "input_name",
                                              "source": "input_name"
                                            }
                                          ],
                                          "source": "[input_name]"
                                        }
                                      ],
                                      "source": "inputs.[input_name]"
                                    },
                                    "right": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "inputs",
                                          "source": "inputs"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "item",
                                          "parameters": [
                                            {
                                              "type": "var",
                                              "data": "input_name",
                                              "source": "input_name"
                                            }
                                          ],
                                          "source": "[input_name]"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "item",
                                          "parameters": [
                                            {
                                              "type": "num",
                                              "data": 1,
                                              "source": "1"
                                            }
                                          ],
                                          "source": "[1]"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "JsonParse",
                                          "parameters": [],
                                          "source": "JsonParse()"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "JsonFormat",
                                          "parameters": [],
                                          "source": "JsonFormat()"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "split",
                                          "parameters": [
                                            {
                                              "type": "str",
                                              "data": "\"\\n\"",
                                              "source": "\"\\n\""
                                            }
                                          ],
                                          "source": "split(\"\\n\")"
                                        }
                                      ],
                                      "source": "inputs.[input_name].[1].JsonParse().JsonFormat().split(\"\\n\")"
                                    }
                                  }
                                ]
                              ],
                              "source": "(\n        inputs.[input_name] = inputs.[input_name].[1].JsonParse().JsonFormat().split(\"\\n\")\n      )"
                            }
                          ]
                        ],
                        "source": "(\n      icon \"line -10 10 5 10 line 0 2.5 10 2.5 line 0 -5 10 -5\" 0.6\n      if onclick (\n        inputs.[input_name] = inputs.[input_name].[1].JsonParse().JsonFormat().split(\"\\n\")\n      )\n    )"
                      },
                      {
                        "type": "var",
                        "data": "else",
                        "source": "else"
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "cmd",
                              "data": "icon",
                              "source": "icon \"line -10 10 10 10 line -10 2.5 10 2.5 line -10 -5 5 -5\" 0.6"
                            },
                            {
                              "type": "str",
                              "data": "\"line -10 10 10 10 line -10 2.5 10 2.5 line -10 -5 5 -5\"",
                              "source": "\"line -10 10 10 10 line -10 2.5 10 2.5 line -10 -5 5 -5\""
                            },
                            {
                              "type": "num",
                              "data": 0.6,
                              "source": "0.6"
                            }
                          ],
                          [
                            {
                              "type": "cmd",
                              "data": "if",
                              "source": "if onclick (\n        inputs.[input_name] = inputs.[input_name].join(\"\\n\").JsonParse().toStr().split(\"\\n\")\n      )"
                            },
                            {
                              "type": "var",
                              "data": "onclick",
                              "source": "onclick"
                            },
                            {
                              "type": "blk",
                              "data": [
                                [
                                  {
                                    "type": "asi",
                                    "data": "=",
                                    "source": "inputs.[input_name] = inputs.[input_name].join(\"\\n\").JsonParse().toStr().split(\"\\n\")",
                                    "left": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "inputs",
                                          "source": "inputs"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "item",
                                          "parameters": [
                                            {
                                              "type": "var",
                                              "data": "input_name",
                                              "source": "input_name"
                                            }
                                          ],
                                          "source": "[input_name]"
                                        }
                                      ],
                                      "source": "inputs.[input_name]"
                                    },
                                    "right": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "inputs",
                                          "source": "inputs"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "item",
                                          "parameters": [
                                            {
                                              "type": "var",
                                              "data": "input_name",
                                              "source": "input_name"
                                            }
                                          ],
                                          "source": "[input_name]"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "join",
                                          "parameters": [
                                            {
                                              "type": "str",
                                              "data": "\"\\n\"",
                                              "source": "\"\\n\""
                                            }
                                          ],
                                          "source": "join(\"\\n\")"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "JsonParse",
                                          "parameters": [],
                                          "source": "JsonParse()"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "toStr",
                                          "parameters": [],
                                          "source": "toStr()"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "split",
                                          "parameters": [
                                            {
                                              "type": "str",
                                              "data": "\"\\n\"",
                                              "source": "\"\\n\""
                                            }
                                          ],
                                          "source": "split(\"\\n\")"
                                        }
                                      ],
                                      "source": "inputs.[input_name].join(\"\\n\").JsonParse().toStr().split(\"\\n\")"
                                    }
                                  }
                                ]
                              ],
                              "source": "(\n        inputs.[input_name] = inputs.[input_name].join(\"\\n\").JsonParse().toStr().split(\"\\n\")\n      )"
                            }
                          ]
                        ],
                        "source": "(\n      icon \"line -10 10 10 10 line -10 2.5 10 2.5 line -10 -5 5 -5\" 0.6\n      if onclick (\n        inputs.[input_name] = inputs.[input_name].join(\"\\n\").JsonParse().toStr().split(\"\\n\")\n      )\n    )"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "change_y",
                        "source": "change_y -50"
                      },
                      {
                        "type": "num",
                        "data": -50,
                        "source": "-50"
                      }
                    ]
                  ],
                  "source": "(\n    if inputs.[input_name].len == 1 (\n      icon \"line -10 10 5 10 line 0 2.5 10 2.5 line 0 -5 10 -5\" 0.6\n      if onclick (\n        inputs.[input_name] = inputs.[input_name].[1].JsonParse().JsonFormat().split(\"\\n\")\n      )\n    ) else (\n      icon \"line -10 10 10 10 line -10 2.5 10 2.5 line -10 -5 5 -5\" 0.6\n      if onclick (\n        inputs.[input_name] = inputs.[input_name].join(\"\\n\").JsonParse().toStr().split(\"\\n\")\n      )\n    )\n    change_y -50\n  )"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "icon",
                  "source": "icon \"rename\" 0.8"
                },
                {
                  "type": "str",
                  "data": "\"rename\"",
                  "source": "\"rename\""
                },
                {
                  "type": "num",
                  "data": 0.8,
                  "source": "0.8"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "square",
                  "source": "square 30 30 12 1 1"
                },
                {
                  "type": "num",
                  "data": 30,
                  "source": "30"
                },
                {
                  "type": "num",
                  "data": 30,
                  "source": "30"
                },
                {
                  "type": "num",
                  "data": 12,
                  "source": "12"
                },
                {
                  "type": "num",
                  "data": 1,
                  "source": "1"
                },
                {
                  "type": "num",
                  "data": 1,
                  "source": "1"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if onclick (\n    window.create(\"rename-helper\", file_uuid)\n  )"
                },
                {
                  "type": "var",
                  "data": "onclick",
                  "source": "onclick"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "asi",
                        "data": "=??",
                        "source": "window.create(\"rename-helper\", file_uuid)",
                        "left": {
                          "type": "var",
                          "data": "window",
                          "source": "window"
                        },
                        "right": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "window",
                              "source": "window"
                            },
                            {
                              "type": "mtv",
                              "data": "create",
                              "parameters": [
                                {
                                  "type": "str",
                                  "data": "\"rename-helper\"",
                                  "source": "\"rename-helper\""
                                },
                                {
                                  "type": "var",
                                  "data": "file_uuid",
                                  "source": "file_uuid"
                                }
                              ],
                              "source": "create(\"rename-helper\", file_uuid)"
                            }
                          ],
                          "source": "window.create(\"rename-helper\", file_uuid)"
                        }
                      }
                    ]
                  ],
                  "source": "(\n    window.create(\"rename-helper\", file_uuid)\n  )"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "change_y",
                  "source": "change_y -50"
                },
                {
                  "type": "num",
                  "data": -50,
                  "source": "-50"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "icon",
                  "source": "icon \"w 3 cutcircle -2 2 8 0 180 w 3.5 line 4 -4 12 -12\" 0.8"
                },
                {
                  "type": "str",
                  "data": "\"w 3 cutcircle -2 2 8 0 180 w 3.5 line 4 -4 12 -12\"",
                  "source": "\"w 3 cutcircle -2 2 8 0 180 w 3.5 line 4 -4 12 -12\""
                },
                {
                  "type": "num",
                  "data": 0.8,
                  "source": "0.8"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if onclick (\n    window.create(\"find_replace_helper\", file_uuid)\n  )"
                },
                {
                  "type": "var",
                  "data": "onclick",
                  "source": "onclick"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "asi",
                        "data": "=??",
                        "source": "window.create(\"find_replace_helper\", file_uuid)",
                        "left": {
                          "type": "var",
                          "data": "window",
                          "source": "window"
                        },
                        "right": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "window",
                              "source": "window"
                            },
                            {
                              "type": "mtv",
                              "data": "create",
                              "parameters": [
                                {
                                  "type": "str",
                                  "data": "\"find_replace_helper\"",
                                  "source": "\"find_replace_helper\""
                                },
                                {
                                  "type": "var",
                                  "data": "file_uuid",
                                  "source": "file_uuid"
                                }
                              ],
                              "source": "create(\"find_replace_helper\", file_uuid)"
                            }
                          ],
                          "source": "window.create(\"find_replace_helper\", file_uuid)"
                        }
                      }
                    ]
                  ],
                  "source": "(\n    window.create(\"find_replace_helper\", file_uuid)\n  )"
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "sidebar.mode = \"none\"",
                  "left": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "sidebar",
                        "source": "sidebar"
                      },
                      {
                        "type": "var",
                        "data": "mode",
                        "source": "mode"
                      }
                    ],
                    "source": "sidebar.mode"
                  },
                  "right": {
                    "type": "str",
                    "data": "\"none\"",
                    "source": "\"none\""
                  }
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "switch",
                  "source": "switch file_type (\n    case \".icn\"\n      sidebar.icn ??= {\n        display: [0,0],\n        last_display: [0,0],\n        mouse: [0,0],\n        zoom: 1\n      }\n      sidebar.mode = \".icn\"\n      sidebar.input_name = input_name\n      sidebar.fn = def() -> (\n        if frame.interactable == \"\" (\n          frame.interactable = mouse_x > frame.left\n        )\n        if self._resizing.not() and frame.interactable (\n          if mouse_down (\n            icn.display = icn.last_display - (icn.mouse - [mouse_x, mouse_y])\n          ) else (\n            icn.last_display = icn.display\n            icn.mouse @= [mouse_x, mouse_y]\n          )\n        )\n        if frame.interactable (\n          icn.zoom += system_os == \"Windows\" ? scroll_velocity / -100 scroll_velocity / 10\n        )\n        goto self.icn.display\n        c c_seco\n        icon \"w 0 square 0 0 10 9999 square 0 0 9999 10 w 5 c\" + c_text + inputs.[self.input_name].join(\" \") icn.zoom\n      )\n      break\n  )"
                },
                {
                  "type": "var",
                  "data": "file_type",
                  "source": "file_type"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "case",
                        "source": "case \".icn\""
                      },
                      {
                        "type": "str",
                        "data": "\".icn\"",
                        "source": "\".icn\""
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "??=",
                        "source": "sidebar.icn ??= {\n        display: [0,0],\n        last_display: [0,0],\n        mouse: [0,0],\n        zoom: 1\n      }",
                        "left": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "sidebar",
                              "source": "sidebar"
                            },
                            {
                              "type": "var",
                              "data": "icn",
                              "source": "icn"
                            }
                          ],
                          "source": "sidebar.icn"
                        },
                        "right": {
                          "type": "obj",
                          "data": {
                            "display": {
                              "type": "arr",
                              "data": [
                                {
                                  "type": "num",
                                  "data": 0,
                                  "source": "0"
                                },
                                {
                                  "type": "num",
                                  "data": 0,
                                  "source": "0"
                                }
                              ],
                              "source": "[0,0]"
                            },
                            "last_display": {
                              "type": "arr",
                              "data": [
                                {
                                  "type": "num",
                                  "data": 0,
                                  "source": "0"
                                },
                                {
                                  "type": "num",
                                  "data": 0,
                                  "source": "0"
                                }
                              ],
                              "source": "[0,0]"
                            },
                            "mouse": {
                              "type": "arr",
                              "data": [
                                {
                                  "type": "num",
                                  "data": 0,
                                  "source": "0"
                                },
                                {
                                  "type": "num",
                                  "data": 0,
                                  "source": "0"
                                }
                              ],
                              "source": "[0,0]"
                            },
                            "zoom": {
                              "type": "num",
                              "data": 1,
                              "source": "1"
                            }
                          },
                          "source": "{\n        display: [0,0],\n        last_display: [0,0],\n        mouse: [0,0],\n        zoom: 1\n      }"
                        }
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "sidebar.mode = \".icn\"",
                        "left": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "sidebar",
                              "source": "sidebar"
                            },
                            {
                              "type": "var",
                              "data": "mode",
                              "source": "mode"
                            }
                          ],
                          "source": "sidebar.mode"
                        },
                        "right": {
                          "type": "str",
                          "data": "\".icn\"",
                          "source": "\".icn\""
                        }
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "sidebar.input_name = input_name",
                        "left": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "sidebar",
                              "source": "sidebar"
                            },
                            {
                              "type": "var",
                              "data": "input_name",
                              "source": "input_name"
                            }
                          ],
                          "source": "sidebar.input_name"
                        },
                        "right": {
                          "type": "var",
                          "data": "input_name",
                          "source": "input_name"
                        }
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "sidebar.fn = def() -> (\n        if frame.interactable == \"\" (\n          frame.interactable = mouse_x > frame.left\n        )\n        if self._resizing.not() and frame.interactable (\n          if mouse_down (\n            icn.display = icn.last_display - (icn.mouse - [mouse_x, mouse_y])\n          ) else (\n            icn.last_display = icn.display\n            icn.mouse @= [mouse_x, mouse_y]\n          )\n        )\n        if frame.interactable (\n          icn.zoom += system_os == \"Windows\" ? scroll_velocity / -100 scroll_velocity / 10\n        )\n        goto self.icn.display\n        c c_seco\n        icon \"w 0 square 0 0 10 9999 square 0 0 9999 10 w 5 c\" + c_text + inputs.[self.input_name].join(\" \") icn.zoom\n      )",
                        "left": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "sidebar",
                              "source": "sidebar"
                            },
                            {
                              "type": "var",
                              "data": "fn",
                              "source": "fn"
                            }
                          ],
                          "source": "sidebar.fn"
                        },
                        "right": {
                          "type": "fnc",
                          "data": "function",
                          "parameters": [
                            {
                              "type": "str",
                              "data": ""
                            },
                            {
                              "type": "blk",
                              "data": [
                                [
                                  {
                                    "type": "cmd",
                                    "data": "if",
                                    "source": "if frame.interactable == \"\" (\n          frame.interactable = mouse_x > frame.left\n        )"
                                  },
                                  {
                                    "type": "cmp",
                                    "data": "==",
                                    "source": "==",
                                    "left": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "frame",
                                          "source": "frame"
                                        },
                                        {
                                          "type": "var",
                                          "data": "interactable",
                                          "source": "interactable"
                                        }
                                      ],
                                      "source": "frame.interactable"
                                    },
                                    "right": {
                                      "type": "str",
                                      "data": "\"\"",
                                      "source": "\"\""
                                    }
                                  },
                                  {
                                    "type": "blk",
                                    "data": [
                                      [
                                        {
                                          "type": "asi",
                                          "data": "=",
                                          "source": "frame.interactable = mouse_x > frame.left",
                                          "left": {
                                            "type": "mtd",
                                            "data": [
                                              {
                                                "type": "var",
                                                "data": "frame",
                                                "source": "frame"
                                              },
                                              {
                                                "type": "var",
                                                "data": "interactable",
                                                "source": "interactable"
                                              }
                                            ],
                                            "source": "frame.interactable"
                                          },
                                          "right": {
                                            "type": "cmp",
                                            "data": ">",
                                            "source": ">",
                                            "left": {
                                              "type": "var",
                                              "data": "mouse_x",
                                              "source": "mouse_x"
                                            },
                                            "right": {
                                              "type": "mtd",
                                              "data": [
                                                {
                                                  "type": "var",
                                                  "data": "frame",
                                                  "source": "frame"
                                                },
                                                {
                                                  "type": "var",
                                                  "data": "left",
                                                  "source": "left"
                                                }
                                              ],
                                              "source": "frame.left"
                                            }
                                          }
                                        }
                                      ]
                                    ],
                                    "source": "(\n          frame.interactable = mouse_x > frame.left\n        )"
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "if",
                                    "source": "if self._resizing.not() and frame.interactable (\n          if mouse_down (\n            icn.display = icn.last_display - (icn.mouse - [mouse_x, mouse_y])\n          ) else (\n            icn.last_display = icn.display\n            icn.mouse @= [mouse_x, mouse_y]\n          )\n        )"
                                  },
                                  {
                                    "type": "log",
                                    "data": "and",
                                    "source": "and",
                                    "left": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "self",
                                          "source": "self"
                                        },
                                        {
                                          "type": "var",
                                          "data": "_resizing",
                                          "source": "_resizing"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "not",
                                          "parameters": [],
                                          "source": "not()"
                                        }
                                      ],
                                      "source": "self._resizing.not()"
                                    },
                                    "right": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "frame",
                                          "source": "frame"
                                        },
                                        {
                                          "type": "var",
                                          "data": "interactable",
                                          "source": "interactable"
                                        }
                                      ],
                                      "source": "frame.interactable"
                                    }
                                  },
                                  {
                                    "type": "blk",
                                    "data": [
                                      [
                                        {
                                          "type": "cmd",
                                          "data": "if",
                                          "source": "if mouse_down (\n            icn.display = icn.last_display - (icn.mouse - [mouse_x, mouse_y])\n          ) else (\n            icn.last_display = icn.display\n            icn.mouse @= [mouse_x, mouse_y]\n          )"
                                        },
                                        {
                                          "type": "var",
                                          "data": "mouse_down",
                                          "source": "mouse_down"
                                        },
                                        {
                                          "type": "blk",
                                          "data": [
                                            [
                                              {
                                                "type": "asi",
                                                "data": "=",
                                                "source": "icn.display = icn.last_display - (icn.mouse - [mouse_x, mouse_y])",
                                                "left": {
                                                  "type": "mtd",
                                                  "data": [
                                                    {
                                                      "type": "var",
                                                      "data": "icn",
                                                      "source": "icn"
                                                    },
                                                    {
                                                      "type": "var",
                                                      "data": "display",
                                                      "source": "display"
                                                    }
                                                  ],
                                                  "source": "icn.display"
                                                },
                                                "right": {
                                                  "type": "opr",
                                                  "data": "-",
                                                  "source": "-",
                                                  "left": {
                                                    "type": "mtd",
                                                    "data": [
                                                      {
                                                        "type": "var",
                                                        "data": "icn",
                                                        "source": "icn"
                                                      },
                                                      {
                                                        "type": "var",
                                                        "data": "last_display",
                                                        "source": "last_display"
                                                      }
                                                    ],
                                                    "source": "icn.last_display"
                                                  },
                                                  "right": {
                                                    "type": "opr",
                                                    "data": "-",
                                                    "source": "(icn.mouse - [mouse_x, mouse_y])",
                                                    "left": {
                                                      "type": "mtd",
                                                      "data": [
                                                        {
                                                          "type": "var",
                                                          "data": "icn",
                                                          "source": "icn"
                                                        },
                                                        {
                                                          "type": "var",
                                                          "data": "mouse",
                                                          "source": "mouse"
                                                        }
                                                      ],
                                                      "source": "icn.mouse"
                                                    },
                                                    "right": {
                                                      "type": "arr",
                                                      "data": [
                                                        {
                                                          "type": "var",
                                                          "data": "mouse_x",
                                                          "source": "mouse_x"
                                                        },
                                                        {
                                                          "type": "var",
                                                          "data": "mouse_y",
                                                          "source": "mouse_y"
                                                        }
                                                      ],
                                                      "source": "[mouse_x, mouse_y]"
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          ],
                                          "source": "(\n            icn.display = icn.last_display - (icn.mouse - [mouse_x, mouse_y])\n          )"
                                        },
                                        {
                                          "type": "var",
                                          "data": "else",
                                          "source": "else"
                                        },
                                        {
                                          "type": "blk",
                                          "data": [
                                            [
                                              {
                                                "type": "asi",
                                                "data": "=",
                                                "source": "icn.last_display = icn.display",
                                                "left": {
                                                  "type": "mtd",
                                                  "data": [
                                                    {
                                                      "type": "var",
                                                      "data": "icn",
                                                      "source": "icn"
                                                    },
                                                    {
                                                      "type": "var",
                                                      "data": "last_display",
                                                      "source": "last_display"
                                                    }
                                                  ],
                                                  "source": "icn.last_display"
                                                },
                                                "right": {
                                                  "type": "mtd",
                                                  "data": [
                                                    {
                                                      "type": "var",
                                                      "data": "icn",
                                                      "source": "icn"
                                                    },
                                                    {
                                                      "type": "var",
                                                      "data": "display",
                                                      "source": "display"
                                                    }
                                                  ],
                                                  "source": "icn.display"
                                                }
                                              }
                                            ],
                                            [
                                              {
                                                "type": "asi",
                                                "data": "@=",
                                                "source": "icn.mouse @= [mouse_x, mouse_y]",
                                                "left": {
                                                  "type": "mtd",
                                                  "data": [
                                                    {
                                                      "type": "var",
                                                      "data": "icn",
                                                      "source": "icn"
                                                    },
                                                    {
                                                      "type": "var",
                                                      "data": "mouse",
                                                      "source": "mouse"
                                                    }
                                                  ],
                                                  "source": "icn.mouse"
                                                },
                                                "right": {
                                                  "type": "arr",
                                                  "data": [
                                                    {
                                                      "type": "var",
                                                      "data": "mouse_x",
                                                      "source": "mouse_x"
                                                    },
                                                    {
                                                      "type": "var",
                                                      "data": "mouse_y",
                                                      "source": "mouse_y"
                                                    }
                                                  ],
                                                  "source": "[mouse_x, mouse_y]"
                                                }
                                              }
                                            ]
                                          ],
                                          "source": "(\n            icn.last_display = icn.display\n            icn.mouse @= [mouse_x, mouse_y]\n          )"
                                        }
                                      ]
                                    ],
                                    "source": "(\n          if mouse_down (\n            icn.display = icn.last_display - (icn.mouse - [mouse_x, mouse_y])\n          ) else (\n            icn.last_display = icn.display\n            icn.mouse @= [mouse_x, mouse_y]\n          )\n        )"
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "if",
                                    "source": "if frame.interactable (\n          icn.zoom += system_os == \"Windows\" ? scroll_velocity / -100 scroll_velocity / 10\n        )"
                                  },
                                  {
                                    "type": "mtd",
                                    "data": [
                                      {
                                        "type": "var",
                                        "data": "frame",
                                        "source": "frame"
                                      },
                                      {
                                        "type": "var",
                                        "data": "interactable",
                                        "source": "interactable"
                                      }
                                    ],
                                    "source": "frame.interactable"
                                  },
                                  {
                                    "type": "blk",
                                    "data": [
                                      [
                                        {
                                          "type": "asi",
                                          "data": "+=",
                                          "source": "icn.zoom += system_os == \"Windows\" ? scroll_velocity / -100 scroll_velocity / 10",
                                          "left": {
                                            "type": "mtd",
                                            "data": [
                                              {
                                                "type": "var",
                                                "data": "icn",
                                                "source": "icn"
                                              },
                                              {
                                                "type": "var",
                                                "data": "zoom",
                                                "source": "zoom"
                                              }
                                            ],
                                            "source": "icn.zoom"
                                          },
                                          "right": {
                                            "type": "qst",
                                            "data": "?",
                                            "source": "?",
                                            "left": {
                                              "type": "cmp",
                                              "data": "==",
                                              "source": "==",
                                              "left": {
                                                "type": "var",
                                                "data": "system_os",
                                                "source": "system_os"
                                              },
                                              "right": {
                                                "type": "str",
                                                "data": "\"Windows\"",
                                                "source": "\"Windows\""
                                              }
                                            },
                                            "right": {
                                              "type": "opr",
                                              "data": "/",
                                              "source": "/",
                                              "left": {
                                                "type": "var",
                                                "data": "scroll_velocity",
                                                "source": "scroll_velocity"
                                              },
                                              "right": {
                                                "type": "num",
                                                "data": -100,
                                                "source": "-100"
                                              }
                                            },
                                            "right2": {
                                              "type": "opr",
                                              "data": "/",
                                              "source": "/",
                                              "left": {
                                                "type": "var",
                                                "data": "scroll_velocity",
                                                "source": "scroll_velocity"
                                              },
                                              "right": {
                                                "type": "num",
                                                "data": 10,
                                                "source": "10"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    ],
                                    "source": "(\n          icn.zoom += system_os == \"Windows\" ? scroll_velocity / -100 scroll_velocity / 10\n        )"
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "goto",
                                    "source": "goto self.icn.display"
                                  },
                                  {
                                    "type": "mtd",
                                    "data": [
                                      {
                                        "type": "var",
                                        "data": "self",
                                        "source": "self"
                                      },
                                      {
                                        "type": "var",
                                        "data": "icn",
                                        "source": "icn"
                                      },
                                      {
                                        "type": "var",
                                        "data": "display",
                                        "source": "display"
                                      }
                                    ],
                                    "source": "self.icn.display"
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "c",
                                    "source": "c c_seco"
                                  },
                                  {
                                    "type": "var",
                                    "data": "c_seco",
                                    "source": "c_seco"
                                  }
                                ],
                                [
                                  {
                                    "type": "cmd",
                                    "data": "icon",
                                    "source": "icon \"w 0 square 0 0 10 9999 square 0 0 9999 10 w 5 c\" + c_text + inputs.[self.input_name].join(\" \") icn.zoom"
                                  },
                                  {
                                    "type": "opr",
                                    "data": "+",
                                    "source": "+",
                                    "left": {
                                      "type": "opr",
                                      "data": "+",
                                      "source": "+",
                                      "left": {
                                        "type": "str",
                                        "data": "\"w 0 square 0 0 10 9999 square 0 0 9999 10 w 5 c\"",
                                        "source": "\"w 0 square 0 0 10 9999 square 0 0 9999 10 w 5 c\""
                                      },
                                      "right": {
                                        "type": "var",
                                        "data": "c_text",
                                        "source": "c_text"
                                      }
                                    },
                                    "right": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "inputs",
                                          "source": "inputs"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "item",
                                          "parameters": [
                                            {
                                              "type": "mtd",
                                              "data": [
                                                {
                                                  "type": "var",
                                                  "data": "self",
                                                  "source": "self"
                                                },
                                                {
                                                  "type": "var",
                                                  "data": "input_name",
                                                  "source": "input_name"
                                                }
                                              ],
                                              "source": "self.input_name"
                                            }
                                          ],
                                          "source": "[self.input_name]"
                                        },
                                        {
                                          "type": "mtv",
                                          "data": "join",
                                          "parameters": [
                                            {
                                              "type": "str",
                                              "data": "\" \"",
                                              "source": "\" \""
                                            }
                                          ],
                                          "source": "join(\" \")"
                                        }
                                      ],
                                      "source": "inputs.[self.input_name].join(\" \")"
                                    }
                                  },
                                  {
                                    "type": "mtd",
                                    "data": [
                                      {
                                        "type": "var",
                                        "data": "icn",
                                        "source": "icn"
                                      },
                                      {
                                        "type": "var",
                                        "data": "zoom",
                                        "source": "zoom"
                                      }
                                    ],
                                    "source": "icn.zoom"
                                  }
                                ]
                              ],
                              "source": "(\n        if frame.interactable == \"\" (\n          frame.interactable = mouse_x > frame.left\n        )\n        if self._resizing.not() and frame.interactable (\n          if mouse_down (\n            icn.display = icn.last_display - (icn.mouse - [mouse_x, mouse_y])\n          ) else (\n            icn.last_display = icn.display\n            icn.mouse @= [mouse_x, mouse_y]\n          )\n        )\n        if frame.interactable (\n          icn.zoom += system_os == \"Windows\" ? scroll_velocity / -100 scroll_velocity / 10\n        )\n        goto self.icn.display\n        c c_seco\n        icon \"w 0 square 0 0 10 9999 square 0 0 9999 10 w 5 c\" + c_text + inputs.[self.input_name].join(\" \") icn.zoom\n      )"
                            }
                          ]
                        }
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "break",
                        "source": "break"
                      }
                    ]
                  ],
                  "source": "(\n    case \".icn\"\n      sidebar.icn ??= {\n        display: [0,0],\n        last_display: [0,0],\n        mouse: [0,0],\n        zoom: 1\n      }\n      sidebar.mode = \".icn\"\n      sidebar.input_name = input_name\n      sidebar.fn = def() -> (\n        if frame.interactable == \"\" (\n          frame.interactable = mouse_x > frame.left\n        )\n        if self._resizing.not() and frame.interactable (\n          if mouse_down (\n            icn.display = icn.last_display - (icn.mouse - [mouse_x, mouse_y])\n          ) else (\n            icn.last_display = icn.display\n            icn.mouse @= [mouse_x, mouse_y]\n          )\n        )\n        if frame.interactable (\n          icn.zoom += system_os == \"Windows\" ? scroll_velocity / -100 scroll_velocity / 10\n        )\n        goto self.icn.display\n        c c_seco\n        icon \"w 0 square 0 0 10 9999 square 0 0 9999 10 w 5 c\" + c_text + inputs.[self.input_name].join(\" \") icn.zoom\n      )\n      break\n  )"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "change_y",
                  "source": "change_y -50"
                },
                {
                  "type": "num",
                  "data": -50,
                  "source": "-50"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "icon",
                  "source": "icon \"network\" 0.8"
                },
                {
                  "type": "str",
                  "data": "\"network\"",
                  "source": "\"network\""
                },
                {
                  "type": "num",
                  "data": 0.8,
                  "source": "0.8"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if onclick (\n    add_tab \"> invite\"\n    start = true\n  )"
                },
                {
                  "type": "var",
                  "data": "onclick",
                  "source": "onclick"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "add_tab",
                        "source": "add_tab \"> invite\""
                      },
                      {
                        "type": "str",
                        "data": "\"> invite\"",
                        "source": "\"> invite\""
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "start = true",
                        "left": {
                          "type": "var",
                          "data": "start",
                          "source": "start"
                        },
                        "right": {
                          "type": "var",
                          "data": true,
                          "source": "true"
                        }
                      }
                    ]
                  ],
                  "source": "(\n    add_tab \"> invite\"\n    start = true\n  )"
                }
              ]
            ],
            "source": "(\n  c c_text\n  icon \"save\" 0.8\n  square 30 30 12 1 1\n  local path = open(file_uuid, [\"location\", \"name\", \"type\"])\n  local file_type = path.[3]\n  if onclick (\n    path = path.[1] ++ \"/\" ++ path.[2] ++ path.[3]\n    file \"set\" 4 inputs.[input_name].join(\"\\n\")\n    recents = \"recent_files.json\".saveGet()\n    save \"recent_files.json\" \"set\" recents.delete(file_uuid).prepend(file_uuid).trim(1,8)\n  )\n  \n  change_y -50\n  if [\".osl\",\".oasm\",\".py\",\".js\",\".bf\",\".owf\",\".ots\"].contains(file_type) (\n    icon \"play\" 0.8\n    square 30 30 12 1 1\n    if onclick (\n      local code = inputs.[input_name].join(\"\\n\")\n      switch share_type (\n        case \".py\"\n          py code\n          script_output = data\n          break\n        case \".js\"\n          script_output = code.eval()\n          break\n        default\n          file \"open\" file_uuid \"onlyaccess\"\n          file \"start\"\n          file \"close\"\n      )\n    )\n    change_y -50\n  )\n  if [\".json\", \".ohf\", \".ojff\"].contains(file_type) (\n    if inputs.[input_name].len == 1 (\n      icon \"line -10 10 5 10 line 0 2.5 10 2.5 line 0 -5 10 -5\" 0.6\n      if onclick (\n        inputs.[input_name] = inputs.[input_name].[1].JsonParse().JsonFormat().split(\"\\n\")\n      )\n    ) else (\n      icon \"line -10 10 10 10 line -10 2.5 10 2.5 line -10 -5 5 -5\" 0.6\n      if onclick (\n        inputs.[input_name] = inputs.[input_name].join(\"\\n\").JsonParse().toStr().split(\"\\n\")\n      )\n    )\n    change_y -50\n  )\n  \n  icon \"rename\" 0.8\n  square 30 30 12 1 1\n  if onclick (\n    window.create(\"rename-helper\", file_uuid)\n  )\n  \n  change_y -50\n  icon \"w 3 cutcircle -2 2 8 0 180 w 3.5 line 4 -4 12 -12\" 0.8\n  if onclick (\n    window.create(\"find_replace_helper\", file_uuid)\n  )\n  \n  sidebar.mode = \"none\"\n  switch file_type (\n    case \".icn\"\n      sidebar.icn ??= {\n        display: [0,0],\n        last_display: [0,0],\n        mouse: [0,0],\n        zoom: 1\n      }\n      sidebar.mode = \".icn\"\n      sidebar.input_name = input_name\n      sidebar.fn = def() -> (\n        if frame.interactable == \"\" (\n          frame.interactable = mouse_x > frame.left\n        )\n        if self._resizing.not() and frame.interactable (\n          if mouse_down (\n            icn.display = icn.last_display - (icn.mouse - [mouse_x, mouse_y])\n          ) else (\n            icn.last_display = icn.display\n            icn.mouse @= [mouse_x, mouse_y]\n          )\n        )\n        if frame.interactable (\n          icn.zoom += system_os == \"Windows\" ? scroll_velocity / -100 scroll_velocity / 10\n        )\n        goto self.icn.display\n        c c_seco\n        icon \"w 0 square 0 0 10 9999 square 0 0 9999 10 w 5 c\" + c_text + inputs.[self.input_name].join(\" \") icn.zoom\n      )\n      break\n  )\n  \n  change_y -50\n  icon \"network\" 0.8\n  if onclick (\n    add_tab \"> invite\"\n    start = true\n  )\n)"
          }
        ]
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "sharing_with = null",
      "left": {
        "type": "var",
        "data": "sharing_with",
        "source": "sharing_with"
      },
      "right": {
        "type": "unk",
        "data": null,
        "source": "null"
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "start = true",
      "left": {
        "type": "var",
        "data": "start",
        "source": "start"
      },
      "right": {
        "type": "var",
        "data": true,
        "source": "true"
      }
    }
  ],
  [
    {
      "type": "unk",
      "data": "mainloop:",
      "source": "mainloop:"
    }
  ],
  [
    {
      "type": "cmd",
      "data": "window",
      "source": "window \"responsive\" false"
    },
    {
      "type": "str",
      "data": "\"responsive\"",
      "source": "\"responsive\""
    },
    {
      "type": "var",
      "data": false,
      "source": "false"
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "theme = user.theme",
      "left": {
        "type": "var",
        "data": "theme",
        "source": "theme"
      },
      "right": {
        "type": "mtd",
        "data": [
          {
            "type": "var",
            "data": "user",
            "source": "user"
          },
          {
            "type": "var",
            "data": "theme",
            "source": "theme"
          }
        ],
        "source": "user.theme"
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "c_prim = theme.primary",
      "left": {
        "type": "var",
        "data": "c_prim",
        "source": "c_prim"
      },
      "right": {
        "type": "mtd",
        "data": [
          {
            "type": "var",
            "data": "theme",
            "source": "theme"
          },
          {
            "type": "var",
            "data": "primary",
            "source": "primary"
          }
        ],
        "source": "theme.primary"
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "c_seco = theme.secondary",
      "left": {
        "type": "var",
        "data": "c_seco",
        "source": "c_seco"
      },
      "right": {
        "type": "mtd",
        "data": [
          {
            "type": "var",
            "data": "theme",
            "source": "theme"
          },
          {
            "type": "var",
            "data": "secondary",
            "source": "secondary"
          }
        ],
        "source": "theme.secondary"
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "c_tert = theme.tertiary",
      "left": {
        "type": "var",
        "data": "c_tert",
        "source": "c_tert"
      },
      "right": {
        "type": "mtd",
        "data": [
          {
            "type": "var",
            "data": "theme",
            "source": "theme"
          },
          {
            "type": "var",
            "data": "tertiary",
            "source": "tertiary"
          }
        ],
        "source": "theme.tertiary"
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "c_text = theme.text",
      "left": {
        "type": "var",
        "data": "c_text",
        "source": "c_text"
      },
      "right": {
        "type": "mtd",
        "data": [
          {
            "type": "var",
            "data": "theme",
            "source": "theme"
          },
          {
            "type": "var",
            "data": "text",
            "source": "text"
          }
        ],
        "source": "theme.text"
      }
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "window_colour = theme.background",
      "left": {
        "type": "var",
        "data": "window_colour",
        "source": "window_colour"
      },
      "right": {
        "type": "mtd",
        "data": [
          {
            "type": "var",
            "data": "theme",
            "source": "theme"
          },
          {
            "type": "var",
            "data": "background",
            "source": "background"
          }
        ],
        "source": "theme.background"
      }
    }
  ],
  [
    {
      "type": "cmd",
      "data": "if",
      "source": "if change_focus and start.not() (\n  change_focus = false\n)"
    },
    {
      "type": "log",
      "data": "and",
      "source": "and",
      "left": {
        "type": "var",
        "data": "change_focus",
        "source": "change_focus"
      },
      "right": {
        "type": "mtd",
        "data": [
          {
            "type": "var",
            "data": "start",
            "source": "start"
          },
          {
            "type": "mtv",
            "data": "not",
            "parameters": [],
            "source": "not()"
          }
        ],
        "source": "start.not()"
      }
    },
    {
      "type": "blk",
      "data": [
        [
          {
            "type": "asi",
            "data": "=",
            "source": "change_focus = false",
            "left": {
              "type": "var",
              "data": "change_focus",
              "source": "change_focus"
            },
            "right": {
              "type": "var",
              "data": false,
              "source": "false"
            }
          }
        ]
      ],
      "source": "(\n  change_focus = false\n)"
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "start = false",
      "left": {
        "type": "var",
        "data": "start",
        "source": "start"
      },
      "right": {
        "type": "var",
        "data": false,
        "source": "false"
      }
    }
  ],
  [
    {
      "type": "cmd",
      "data": "if",
      "source": "if mouse_down.not() \"can = true\""
    },
    {
      "type": "mtd",
      "data": [
        {
          "type": "var",
          "data": "mouse_down",
          "source": "mouse_down"
        },
        {
          "type": "mtv",
          "data": "not",
          "parameters": [],
          "source": "not()"
        }
      ],
      "source": "mouse_down.not()"
    },
    {
      "type": "str",
      "data": "\"can = true\"",
      "source": "\"can = true\""
    }
  ],
  [
    {
      "type": "asi",
      "data": "@=",
      "source": "w @= window",
      "left": {
        "type": "var",
        "data": "w",
        "source": "w"
      },
      "right": {
        "type": "var",
        "data": "window",
        "source": "window"
      }
    }
  ],
  [
    {
      "type": "cmd",
      "data": "goto",
      "source": "goto 0 window.top - 20"
    },
    {
      "type": "num",
      "data": 0,
      "source": "0"
    },
    {
      "type": "opr",
      "data": "-",
      "source": "-",
      "left": {
        "type": "mtd",
        "data": [
          {
            "type": "var",
            "data": "window",
            "source": "window"
          },
          {
            "type": "var",
            "data": "top",
            "source": "top"
          }
        ],
        "source": "window.top"
      },
      "right": {
        "type": "num",
        "data": 20,
        "source": "20"
      }
    }
  ],
  [
    {
      "type": "unk",
      "data": "glass:frame",
      "source": "glass:frame"
    },
    {
      "type": "mtd",
      "data": [
        {
          "type": "var",
          "data": "w",
          "source": "w"
        },
        {
          "type": "var",
          "data": "left",
          "source": "left"
        }
      ],
      "source": "w.left"
    },
    {
      "type": "mtd",
      "data": [
        {
          "type": "var",
          "data": "w",
          "source": "w"
        },
        {
          "type": "var",
          "data": "top",
          "source": "top"
        }
      ],
      "source": "w.top"
    },
    {
      "type": "mtd",
      "data": [
        {
          "type": "var",
          "data": "w",
          "source": "w"
        },
        {
          "type": "var",
          "data": "right",
          "source": "right"
        }
      ],
      "source": "w.right"
    },
    {
      "type": "mtd",
      "data": [
        {
          "type": "var",
          "data": "w",
          "source": "w"
        },
        {
          "type": "var",
          "data": "bottom",
          "source": "bottom"
        }
      ],
      "source": "w.bottom"
    }
  ],
  [
    {
      "type": "cmd",
      "data": "frame",
      "source": "frame \"clear\""
    },
    {
      "type": "str",
      "data": "\"clear\"",
      "source": "\"clear\""
    }
  ],
  [
    {
      "type": "cmd",
      "data": "frame",
      "source": "frame w.left + 50 w.top w.right - 60 w.top - 40 (\n  draw_tabs\n  window \"set_dragbox\" dragbox\n)"
    },
    {
      "type": "opr",
      "data": "+",
      "source": "+",
      "left": {
        "type": "mtd",
        "data": [
          {
            "type": "var",
            "data": "w",
            "source": "w"
          },
          {
            "type": "var",
            "data": "left",
            "source": "left"
          }
        ],
        "source": "w.left"
      },
      "right": {
        "type": "num",
        "data": 50,
        "source": "50"
      }
    },
    {
      "type": "mtd",
      "data": [
        {
          "type": "var",
          "data": "w",
          "source": "w"
        },
        {
          "type": "var",
          "data": "top",
          "source": "top"
        }
      ],
      "source": "w.top"
    },
    {
      "type": "opr",
      "data": "-",
      "source": "-",
      "left": {
        "type": "mtd",
        "data": [
          {
            "type": "var",
            "data": "w",
            "source": "w"
          },
          {
            "type": "var",
            "data": "right",
            "source": "right"
          }
        ],
        "source": "w.right"
      },
      "right": {
        "type": "num",
        "data": 60,
        "source": "60"
      }
    },
    {
      "type": "opr",
      "data": "-",
      "source": "-",
      "left": {
        "type": "mtd",
        "data": [
          {
            "type": "var",
            "data": "w",
            "source": "w"
          },
          {
            "type": "var",
            "data": "top",
            "source": "top"
          }
        ],
        "source": "w.top"
      },
      "right": {
        "type": "num",
        "data": 40,
        "source": "40"
      }
    },
    {
      "type": "blk",
      "data": [
        [
          {
            "type": "cmd",
            "data": "draw_tabs",
            "source": "draw_tabs"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "window",
            "source": "window \"set_dragbox\" dragbox"
          },
          {
            "type": "str",
            "data": "\"set_dragbox\"",
            "source": "\"set_dragbox\""
          },
          {
            "type": "var",
            "data": "dragbox",
            "source": "dragbox"
          }
        ]
      ],
      "source": "(\n  draw_tabs\n  window \"set_dragbox\" dragbox\n)"
    }
  ],
  [
    {
      "type": "asi",
      "data": "=",
      "source": "right = w.right - (preview_open ? 400 0)",
      "left": {
        "type": "var",
        "data": "right",
        "source": "right"
      },
      "right": {
        "type": "opr",
        "data": "-",
        "source": "-",
        "left": {
          "type": "mtd",
          "data": [
            {
              "type": "var",
              "data": "w",
              "source": "w"
            },
            {
              "type": "var",
              "data": "right",
              "source": "right"
            }
          ],
          "source": "w.right"
        },
        "right": {
          "type": "qst",
          "data": "?",
          "source": "(preview_open ? 400 0)",
          "left": {
            "type": "var",
            "data": "preview_open",
            "source": "preview_open"
          },
          "right": {
            "type": "num",
            "data": 400,
            "source": "400"
          },
          "right2": {
            "type": "num",
            "data": 0,
            "source": "0"
          }
        }
      }
    }
  ],
  [
    {
      "type": "cmd",
      "data": "goto",
      "source": "goto 22.5 -17.5"
    },
    {
      "type": "num",
      "data": 22.5,
      "source": "22.5"
    },
    {
      "type": "num",
      "data": -17.5,
      "source": "-17.5"
    }
  ],
  [
    {
      "type": "cmd",
      "data": "square",
      "source": "square w.width - 65 w.height - 55 10 : c#window_colour"
    },
    {
      "type": "opr",
      "data": "-",
      "source": "-",
      "left": {
        "type": "mtd",
        "data": [
          {
            "type": "var",
            "data": "w",
            "source": "w"
          },
          {
            "type": "var",
            "data": "width",
            "source": "width"
          }
        ],
        "source": "w.width"
      },
      "right": {
        "type": "num",
        "data": 65,
        "source": "65"
      }
    },
    {
      "type": "opr",
      "data": "-",
      "source": "-",
      "left": {
        "type": "mtd",
        "data": [
          {
            "type": "var",
            "data": "w",
            "source": "w"
          },
          {
            "type": "var",
            "data": "height",
            "source": "height"
          }
        ],
        "source": "w.height"
      },
      "right": {
        "type": "num",
        "data": 55,
        "source": "55"
      }
    },
    {
      "type": "num",
      "data": 10,
      "source": "10"
    },
    {
      "type": "mod",
      "data": [
        "c",
        {
          "type": "var",
          "data": "window_colour",
          "source": "window_colour"
        }
      ],
      "source": "c#window_colour"
    }
  ],
  [
    {
      "type": "cmd",
      "data": "if",
      "source": "if new_transmit (\n  if window.children.contains(transmit_source) (\n    add_tab transmit_data\n    loadFileUUID(transmit_data)\n  )\n  new_transmit = false\n)"
    },
    {
      "type": "var",
      "data": "new_transmit",
      "source": "new_transmit"
    },
    {
      "type": "blk",
      "data": [
        [
          {
            "type": "cmd",
            "data": "if",
            "source": "if window.children.contains(transmit_source) (\n    add_tab transmit_data\n    loadFileUUID(transmit_data)\n  )"
          },
          {
            "type": "mtd",
            "data": [
              {
                "type": "var",
                "data": "window",
                "source": "window"
              },
              {
                "type": "var",
                "data": "children",
                "source": "children"
              },
              {
                "type": "mtv",
                "data": "contains",
                "parameters": [
                  {
                    "type": "var",
                    "data": "transmit_source",
                    "source": "transmit_source"
                  }
                ],
                "source": "contains(transmit_source)"
              }
            ],
            "source": "window.children.contains(transmit_source)"
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "cmd",
                  "data": "add_tab",
                  "source": "add_tab transmit_data"
                },
                {
                  "type": "var",
                  "data": "transmit_data",
                  "source": "transmit_data"
                }
              ],
              [
                {
                  "type": "fnc",
                  "data": "loadFileUUID",
                  "parameters": [
                    {
                      "type": "var",
                      "data": "transmit_data",
                      "source": "transmit_data"
                    }
                  ],
                  "source": "loadFileUUID(transmit_data)"
                }
              ]
            ],
            "source": "(\n    add_tab transmit_data\n    loadFileUUID(transmit_data)\n  )"
          }
        ],
        [
          {
            "type": "asi",
            "data": "=",
            "source": "new_transmit = false",
            "left": {
              "type": "var",
              "data": "new_transmit",
              "source": "new_transmit"
            },
            "right": {
              "type": "var",
              "data": false,
              "source": "false"
            }
          }
        ]
      ],
      "source": "(\n  if window.children.contains(transmit_source) (\n    add_tab transmit_data\n    loadFileUUID(transmit_data)\n  )\n  new_transmit = false\n)"
    }
  ],
  [
    {
      "type": "cmd",
      "data": "if",
      "source": "if file_dropped != 0 (\n  if current_tab_target == 0 (\n    current_tab_target = tabs.len + 1\n  )\n  insert_tab current_tab_target file_dropped\n  loadFileUUID(file_dropped)\n  current_tab_target = 0\n  file_dropped = 0\n)"
    },
    {
      "type": "cmp",
      "data": "!=",
      "source": "!=",
      "left": {
        "type": "var",
        "data": "file_dropped",
        "source": "file_dropped"
      },
      "right": {
        "type": "num",
        "data": 0,
        "source": "0"
      }
    },
    {
      "type": "blk",
      "data": [
        [
          {
            "type": "cmd",
            "data": "if",
            "source": "if current_tab_target == 0 (\n    current_tab_target = tabs.len + 1\n  )"
          },
          {
            "type": "cmp",
            "data": "==",
            "source": "==",
            "left": {
              "type": "var",
              "data": "current_tab_target",
              "source": "current_tab_target"
            },
            "right": {
              "type": "num",
              "data": 0,
              "source": "0"
            }
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "current_tab_target = tabs.len + 1",
                  "left": {
                    "type": "var",
                    "data": "current_tab_target",
                    "source": "current_tab_target"
                  },
                  "right": {
                    "type": "opr",
                    "data": "+",
                    "source": "+",
                    "left": {
                      "type": "mtd",
                      "data": [
                        {
                          "type": "var",
                          "data": "tabs",
                          "source": "tabs"
                        },
                        {
                          "type": "var",
                          "data": "len",
                          "source": "len"
                        }
                      ],
                      "source": "tabs.len"
                    },
                    "right": {
                      "type": "num",
                      "data": 1,
                      "source": "1"
                    }
                  }
                }
              ]
            ],
            "source": "(\n    current_tab_target = tabs.len + 1\n  )"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "insert_tab",
            "source": "insert_tab current_tab_target file_dropped"
          },
          {
            "type": "var",
            "data": "current_tab_target",
            "source": "current_tab_target"
          },
          {
            "type": "var",
            "data": "file_dropped",
            "source": "file_dropped"
          }
        ],
        [
          {
            "type": "fnc",
            "data": "loadFileUUID",
            "parameters": [
              {
                "type": "var",
                "data": "file_dropped",
                "source": "file_dropped"
              }
            ],
            "source": "loadFileUUID(file_dropped)"
          }
        ],
        [
          {
            "type": "asi",
            "data": "=",
            "source": "current_tab_target = 0",
            "left": {
              "type": "var",
              "data": "current_tab_target",
              "source": "current_tab_target"
            },
            "right": {
              "type": "num",
              "data": 0,
              "source": "0"
            }
          }
        ],
        [
          {
            "type": "asi",
            "data": "=",
            "source": "file_dropped = 0",
            "left": {
              "type": "var",
              "data": "file_dropped",
              "source": "file_dropped"
            },
            "right": {
              "type": "num",
              "data": 0,
              "source": "0"
            }
          }
        ]
      ],
      "source": "(\n  if current_tab_target == 0 (\n    current_tab_target = tabs.len + 1\n  )\n  insert_tab current_tab_target file_dropped\n  loadFileUUID(file_dropped)\n  current_tab_target = 0\n  file_dropped = 0\n)"
    }
  ],
  [
    {
      "type": "cmd",
      "data": "if",
      "source": "if current_studio_page == \"Home\" (\n  w = window_width / 2 - 40\n  w2 = w - 40\n  loc 2 2 70 -75\n  text \"New File\" 8 : c#c_text\n\n  loc 999 2 20 -75\n  text \"Recent Files\" 8\n  \n  loc 2 2 w / 2 + 50 -290\n  square w2 30 10 : c#c_seco\n  if onclick (\n    file \"pick\"\n  )\n  change_x w2 / -2 + 10\n  text \"Open File\" 9 : c#c_text\n\n  loc 2 2 w / 2 + 50 -340\n  square w2 30 10 : c#c_seco\n  if onclick (\n    add_tab \"> Invite\"\n  )\n  change_x w2 / -2 + 10\n  text \"Live Share\" 9 : c#c_text\n\n  loc 2 2 w / 2 + 50 -125\n  square w2 30 10 : c#c_prim\n  input w2 - 10 25 \"name\" \"hello world.txt\" 10 c_text\n  change_y -55\n  if input_name.matchregex(\"/[^.]+\\.[^.]+/gm\") (\n    square w2 30 10 : c#c_seco cursor#pointer\n    if mouse_touching (\n      square w2 30 15 : c#global_accent\n      square w2 30 10 : c#c_seco\n    )\n    if onclick or \"enter\".onKeyDown() (\n      file \"download\" input_name\n      add_tab data\n      current_ohf = compileOHF(getOHF(input_name.split(\".\").last()))\n    )\n    change_x w2 / -2 + 15\n  ) else (\n    square w2 30 10 : c#c_prim\n    change_x w2 / -2 + 15\n  )\n  c c_text\n  icon \"Add\" 0.5\n  text \"Create New File\" 8 : chx#20\n\n  c c_prim\n  frame 10 window.top - 93 window.right - 10 window.bottom recent_2.len * 55\n  w = frame_width - 20\n  for count recent_2.len (\n    y = count * -55 + 25 + scroll_y\n    loc 999 2 0 y\n    square w 30 10 : c#c_prim cursor#pointer\n    cur = recent_2.[count].toStr()\n    file = open(cur, [2, 1])\n    if mouse_touching (\n      square w 30 15 : c#c_seco\n      square w 30 10 : c#c_prim\n      if onclick (\n        add_tab cur\n        current_ohf = compileOHF(getOHF(file.[2]))\n        inputs.[cur] = open(cur).split(\"\\n\")\n      )\n    )\n    change w / -2 + 12\n    if loaded_file !== 0 (\n      file \"render\" 1\n      loc 2 2 60 y\n      text file.join(\"\") 9 : c#c_text\n    ) else (\n      recent.delete(count)\n      save \"recent_files.json\" \"set\" recent\n      count --\n      recent2 = recent.trim(1,10)\n    )\n  )\n  frame \"clear\"\n)"
    },
    {
      "type": "cmp",
      "data": "==",
      "source": "==",
      "left": {
        "type": "var",
        "data": "current_studio_page",
        "source": "current_studio_page"
      },
      "right": {
        "type": "str",
        "data": "\"Home\"",
        "source": "\"Home\""
      }
    },
    {
      "type": "blk",
      "data": [
        [
          {
            "type": "asi",
            "data": "=",
            "source": "w = window_width / 2 - 40",
            "left": {
              "type": "var",
              "data": "w",
              "source": "w"
            },
            "right": {
              "type": "opr",
              "data": "-",
              "source": "-",
              "left": {
                "type": "opr",
                "data": "/",
                "source": "/",
                "left": {
                  "type": "var",
                  "data": "window_width",
                  "source": "window_width"
                },
                "right": {
                  "type": "num",
                  "data": 2,
                  "source": "2"
                }
              },
              "right": {
                "type": "num",
                "data": 40,
                "source": "40"
              }
            }
          }
        ],
        [
          {
            "type": "asi",
            "data": "=",
            "source": "w2 = w - 40",
            "left": {
              "type": "var",
              "data": "w2",
              "source": "w2"
            },
            "right": {
              "type": "opr",
              "data": "-",
              "source": "-",
              "left": {
                "type": "var",
                "data": "w",
                "source": "w"
              },
              "right": {
                "type": "num",
                "data": 40,
                "source": "40"
              }
            }
          }
        ],
        [
          {
            "type": "cmd",
            "data": "loc",
            "source": "loc 2 2 70 -75"
          },
          {
            "type": "num",
            "data": 2,
            "source": "2"
          },
          {
            "type": "num",
            "data": 2,
            "source": "2"
          },
          {
            "type": "num",
            "data": 70,
            "source": "70"
          },
          {
            "type": "num",
            "data": -75,
            "source": "-75"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "text",
            "source": "text \"New File\" 8 : c#c_text"
          },
          {
            "type": "str",
            "data": "\"New File\"",
            "source": "\"New File\""
          },
          {
            "type": "num",
            "data": 8,
            "source": "8"
          },
          {
            "type": "mod",
            "data": [
              "c",
              {
                "type": "var",
                "data": "c_text",
                "source": "c_text"
              }
            ],
            "source": "c#c_text"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "loc",
            "source": "loc 999 2 20 -75"
          },
          {
            "type": "num",
            "data": 999,
            "source": "999"
          },
          {
            "type": "num",
            "data": 2,
            "source": "2"
          },
          {
            "type": "num",
            "data": 20,
            "source": "20"
          },
          {
            "type": "num",
            "data": -75,
            "source": "-75"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "text",
            "source": "text \"Recent Files\" 8"
          },
          {
            "type": "str",
            "data": "\"Recent Files\"",
            "source": "\"Recent Files\""
          },
          {
            "type": "num",
            "data": 8,
            "source": "8"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "loc",
            "source": "loc 2 2 w / 2 + 50 -290"
          },
          {
            "type": "num",
            "data": 2,
            "source": "2"
          },
          {
            "type": "num",
            "data": 2,
            "source": "2"
          },
          {
            "type": "opr",
            "data": "+",
            "source": "+",
            "left": {
              "type": "opr",
              "data": "/",
              "source": "/",
              "left": {
                "type": "var",
                "data": "w",
                "source": "w"
              },
              "right": {
                "type": "num",
                "data": 2,
                "source": "2"
              }
            },
            "right": {
              "type": "num",
              "data": 50,
              "source": "50"
            }
          },
          {
            "type": "num",
            "data": -290,
            "source": "-290"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "square",
            "source": "square w2 30 10 : c#c_seco"
          },
          {
            "type": "var",
            "data": "w2",
            "source": "w2"
          },
          {
            "type": "num",
            "data": 30,
            "source": "30"
          },
          {
            "type": "num",
            "data": 10,
            "source": "10"
          },
          {
            "type": "mod",
            "data": [
              "c",
              {
                "type": "var",
                "data": "c_seco",
                "source": "c_seco"
              }
            ],
            "source": "c#c_seco"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "if",
            "source": "if onclick (\n    file \"pick\"\n  )"
          },
          {
            "type": "var",
            "data": "onclick",
            "source": "onclick"
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "cmd",
                  "data": "file",
                  "source": "file \"pick\""
                },
                {
                  "type": "str",
                  "data": "\"pick\"",
                  "source": "\"pick\""
                }
              ]
            ],
            "source": "(\n    file \"pick\"\n  )"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "change_x",
            "source": "change_x w2 / -2 + 10"
          },
          {
            "type": "opr",
            "data": "+",
            "source": "+",
            "left": {
              "type": "opr",
              "data": "/",
              "source": "/",
              "left": {
                "type": "var",
                "data": "w2",
                "source": "w2"
              },
              "right": {
                "type": "num",
                "data": -2,
                "source": "-2"
              }
            },
            "right": {
              "type": "num",
              "data": 10,
              "source": "10"
            }
          }
        ],
        [
          {
            "type": "cmd",
            "data": "text",
            "source": "text \"Open File\" 9 : c#c_text"
          },
          {
            "type": "str",
            "data": "\"Open File\"",
            "source": "\"Open File\""
          },
          {
            "type": "num",
            "data": 9,
            "source": "9"
          },
          {
            "type": "mod",
            "data": [
              "c",
              {
                "type": "var",
                "data": "c_text",
                "source": "c_text"
              }
            ],
            "source": "c#c_text"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "loc",
            "source": "loc 2 2 w / 2 + 50 -340"
          },
          {
            "type": "num",
            "data": 2,
            "source": "2"
          },
          {
            "type": "num",
            "data": 2,
            "source": "2"
          },
          {
            "type": "opr",
            "data": "+",
            "source": "+",
            "left": {
              "type": "opr",
              "data": "/",
              "source": "/",
              "left": {
                "type": "var",
                "data": "w",
                "source": "w"
              },
              "right": {
                "type": "num",
                "data": 2,
                "source": "2"
              }
            },
            "right": {
              "type": "num",
              "data": 50,
              "source": "50"
            }
          },
          {
            "type": "num",
            "data": -340,
            "source": "-340"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "square",
            "source": "square w2 30 10 : c#c_seco"
          },
          {
            "type": "var",
            "data": "w2",
            "source": "w2"
          },
          {
            "type": "num",
            "data": 30,
            "source": "30"
          },
          {
            "type": "num",
            "data": 10,
            "source": "10"
          },
          {
            "type": "mod",
            "data": [
              "c",
              {
                "type": "var",
                "data": "c_seco",
                "source": "c_seco"
              }
            ],
            "source": "c#c_seco"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "if",
            "source": "if onclick (\n    add_tab \"> Invite\"\n  )"
          },
          {
            "type": "var",
            "data": "onclick",
            "source": "onclick"
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "cmd",
                  "data": "add_tab",
                  "source": "add_tab \"> Invite\""
                },
                {
                  "type": "str",
                  "data": "\"> Invite\"",
                  "source": "\"> Invite\""
                }
              ]
            ],
            "source": "(\n    add_tab \"> Invite\"\n  )"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "change_x",
            "source": "change_x w2 / -2 + 10"
          },
          {
            "type": "opr",
            "data": "+",
            "source": "+",
            "left": {
              "type": "opr",
              "data": "/",
              "source": "/",
              "left": {
                "type": "var",
                "data": "w2",
                "source": "w2"
              },
              "right": {
                "type": "num",
                "data": -2,
                "source": "-2"
              }
            },
            "right": {
              "type": "num",
              "data": 10,
              "source": "10"
            }
          }
        ],
        [
          {
            "type": "cmd",
            "data": "text",
            "source": "text \"Live Share\" 9 : c#c_text"
          },
          {
            "type": "str",
            "data": "\"Live Share\"",
            "source": "\"Live Share\""
          },
          {
            "type": "num",
            "data": 9,
            "source": "9"
          },
          {
            "type": "mod",
            "data": [
              "c",
              {
                "type": "var",
                "data": "c_text",
                "source": "c_text"
              }
            ],
            "source": "c#c_text"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "loc",
            "source": "loc 2 2 w / 2 + 50 -125"
          },
          {
            "type": "num",
            "data": 2,
            "source": "2"
          },
          {
            "type": "num",
            "data": 2,
            "source": "2"
          },
          {
            "type": "opr",
            "data": "+",
            "source": "+",
            "left": {
              "type": "opr",
              "data": "/",
              "source": "/",
              "left": {
                "type": "var",
                "data": "w",
                "source": "w"
              },
              "right": {
                "type": "num",
                "data": 2,
                "source": "2"
              }
            },
            "right": {
              "type": "num",
              "data": 50,
              "source": "50"
            }
          },
          {
            "type": "num",
            "data": -125,
            "source": "-125"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "square",
            "source": "square w2 30 10 : c#c_prim"
          },
          {
            "type": "var",
            "data": "w2",
            "source": "w2"
          },
          {
            "type": "num",
            "data": 30,
            "source": "30"
          },
          {
            "type": "num",
            "data": 10,
            "source": "10"
          },
          {
            "type": "mod",
            "data": [
              "c",
              {
                "type": "var",
                "data": "c_prim",
                "source": "c_prim"
              }
            ],
            "source": "c#c_prim"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "input",
            "source": "input w2 - 10 25 \"name\" \"hello world.txt\" 10 c_text"
          },
          {
            "type": "opr",
            "data": "-",
            "source": "-",
            "left": {
              "type": "var",
              "data": "w2",
              "source": "w2"
            },
            "right": {
              "type": "num",
              "data": 10,
              "source": "10"
            }
          },
          {
            "type": "num",
            "data": 25,
            "source": "25"
          },
          {
            "type": "str",
            "data": "\"name\"",
            "source": "\"name\""
          },
          {
            "type": "str",
            "data": "\"hello world.txt\"",
            "source": "\"hello world.txt\""
          },
          {
            "type": "num",
            "data": 10,
            "source": "10"
          },
          {
            "type": "var",
            "data": "c_text",
            "source": "c_text"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "change_y",
            "source": "change_y -55"
          },
          {
            "type": "num",
            "data": -55,
            "source": "-55"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "if",
            "source": "if input_name.matchregex(\"/[^.]+\\.[^.]+/gm\") (\n    square w2 30 10 : c#c_seco cursor#pointer\n    if mouse_touching (\n      square w2 30 15 : c#global_accent\n      square w2 30 10 : c#c_seco\n    )\n    if onclick or \"enter\".onKeyDown() (\n      file \"download\" input_name\n      add_tab data\n      current_ohf = compileOHF(getOHF(input_name.split(\".\").last()))\n    )\n    change_x w2 / -2 + 15\n  ) else (\n    square w2 30 10 : c#c_prim\n    change_x w2 / -2 + 15\n  )"
          },
          {
            "type": "mtd",
            "data": [
              {
                "type": "var",
                "data": "input_name",
                "source": "input_name"
              },
              {
                "type": "mtv",
                "data": "matchregex",
                "parameters": [
                  {
                    "type": "str",
                    "data": "\"/[^.]+\\.[^.]+/gm\"",
                    "source": "\"/[^.]+\\.[^.]+/gm\""
                  }
                ],
                "source": "matchregex(\"/[^.]+\\.[^.]+/gm\")"
              }
            ],
            "source": "input_name.matchregex(\"/[^.]+\\.[^.]+/gm\")"
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "cmd",
                  "data": "square",
                  "source": "square w2 30 10 : c#c_seco cursor#pointer"
                },
                {
                  "type": "var",
                  "data": "w2",
                  "source": "w2"
                },
                {
                  "type": "num",
                  "data": 30,
                  "source": "30"
                },
                {
                  "type": "num",
                  "data": 10,
                  "source": "10"
                },
                {
                  "type": "mod",
                  "data": [
                    "c",
                    {
                      "type": "var",
                      "data": "c_seco",
                      "source": "c_seco"
                    }
                  ],
                  "source": "c#c_seco"
                },
                {
                  "type": "mod",
                  "data": [
                    "cursor",
                    {
                      "type": "var",
                      "data": "pointer",
                      "source": "pointer"
                    }
                  ],
                  "source": "cursor#pointer"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if mouse_touching (\n      square w2 30 15 : c#global_accent\n      square w2 30 10 : c#c_seco\n    )"
                },
                {
                  "type": "var",
                  "data": "mouse_touching",
                  "source": "mouse_touching"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "square",
                        "source": "square w2 30 15 : c#global_accent"
                      },
                      {
                        "type": "var",
                        "data": "w2",
                        "source": "w2"
                      },
                      {
                        "type": "num",
                        "data": 30,
                        "source": "30"
                      },
                      {
                        "type": "num",
                        "data": 15,
                        "source": "15"
                      },
                      {
                        "type": "mod",
                        "data": [
                          "c",
                          {
                            "type": "var",
                            "data": "global_accent",
                            "source": "global_accent"
                          }
                        ],
                        "source": "c#global_accent"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "square",
                        "source": "square w2 30 10 : c#c_seco"
                      },
                      {
                        "type": "var",
                        "data": "w2",
                        "source": "w2"
                      },
                      {
                        "type": "num",
                        "data": 30,
                        "source": "30"
                      },
                      {
                        "type": "num",
                        "data": 10,
                        "source": "10"
                      },
                      {
                        "type": "mod",
                        "data": [
                          "c",
                          {
                            "type": "var",
                            "data": "c_seco",
                            "source": "c_seco"
                          }
                        ],
                        "source": "c#c_seco"
                      }
                    ]
                  ],
                  "source": "(\n      square w2 30 15 : c#global_accent\n      square w2 30 10 : c#c_seco\n    )"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if onclick or \"enter\".onKeyDown() (\n      file \"download\" input_name\n      add_tab data\n      current_ohf = compileOHF(getOHF(input_name.split(\".\").last()))\n    )"
                },
                {
                  "type": "log",
                  "data": "or",
                  "source": "or",
                  "left": {
                    "type": "var",
                    "data": "onclick",
                    "source": "onclick"
                  },
                  "right": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "str",
                        "data": "\"enter\"",
                        "source": "\"enter\""
                      },
                      {
                        "type": "mtv",
                        "data": "onKeyDown",
                        "parameters": [],
                        "source": "onKeyDown()"
                      }
                    ],
                    "source": "\"enter\".onKeyDown()"
                  }
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "file",
                        "source": "file \"download\" input_name"
                      },
                      {
                        "type": "str",
                        "data": "\"download\"",
                        "source": "\"download\""
                      },
                      {
                        "type": "var",
                        "data": "input_name",
                        "source": "input_name"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "add_tab",
                        "source": "add_tab data"
                      },
                      {
                        "type": "var",
                        "data": "data",
                        "source": "data"
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "current_ohf = compileOHF(getOHF(input_name.split(\".\").last()))",
                        "left": {
                          "type": "var",
                          "data": "current_ohf",
                          "source": "current_ohf"
                        },
                        "right": {
                          "type": "fnc",
                          "data": "compileOHF",
                          "parameters": [
                            {
                              "type": "fnc",
                              "data": "getOHF",
                              "parameters": [
                                {
                                  "type": "asi",
                                  "data": "=??",
                                  "source": "input_name.split(\".\").last()",
                                  "left": {
                                    "type": "var",
                                    "data": "input_name",
                                    "source": "input_name"
                                  },
                                  "right": {
                                    "type": "mtd",
                                    "data": [
                                      {
                                        "type": "var",
                                        "data": "input_name",
                                        "source": "input_name"
                                      },
                                      {
                                        "type": "mtv",
                                        "data": "split",
                                        "parameters": [
                                          {
                                            "type": "str",
                                            "data": "\".\"",
                                            "source": "\".\""
                                          }
                                        ],
                                        "source": "split(\".\")"
                                      },
                                      {
                                        "type": "mtv",
                                        "data": "last",
                                        "parameters": [],
                                        "source": "last()"
                                      }
                                    ],
                                    "source": "input_name.split(\".\").last()"
                                  }
                                }
                              ],
                              "source": "getOHF(input_name.split(\".\").last())"
                            }
                          ],
                          "source": "compileOHF(getOHF(input_name.split(\".\").last()))"
                        }
                      }
                    ]
                  ],
                  "source": "(\n      file \"download\" input_name\n      add_tab data\n      current_ohf = compileOHF(getOHF(input_name.split(\".\").last()))\n    )"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "change_x",
                  "source": "change_x w2 / -2 + 15"
                },
                {
                  "type": "opr",
                  "data": "+",
                  "source": "+",
                  "left": {
                    "type": "opr",
                    "data": "/",
                    "source": "/",
                    "left": {
                      "type": "var",
                      "data": "w2",
                      "source": "w2"
                    },
                    "right": {
                      "type": "num",
                      "data": -2,
                      "source": "-2"
                    }
                  },
                  "right": {
                    "type": "num",
                    "data": 15,
                    "source": "15"
                  }
                }
              ]
            ],
            "source": "(\n    square w2 30 10 : c#c_seco cursor#pointer\n    if mouse_touching (\n      square w2 30 15 : c#global_accent\n      square w2 30 10 : c#c_seco\n    )\n    if onclick or \"enter\".onKeyDown() (\n      file \"download\" input_name\n      add_tab data\n      current_ohf = compileOHF(getOHF(input_name.split(\".\").last()))\n    )\n    change_x w2 / -2 + 15\n  )"
          },
          {
            "type": "var",
            "data": "else",
            "source": "else"
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "cmd",
                  "data": "square",
                  "source": "square w2 30 10 : c#c_prim"
                },
                {
                  "type": "var",
                  "data": "w2",
                  "source": "w2"
                },
                {
                  "type": "num",
                  "data": 30,
                  "source": "30"
                },
                {
                  "type": "num",
                  "data": 10,
                  "source": "10"
                },
                {
                  "type": "mod",
                  "data": [
                    "c",
                    {
                      "type": "var",
                      "data": "c_prim",
                      "source": "c_prim"
                    }
                  ],
                  "source": "c#c_prim"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "change_x",
                  "source": "change_x w2 / -2 + 15"
                },
                {
                  "type": "opr",
                  "data": "+",
                  "source": "+",
                  "left": {
                    "type": "opr",
                    "data": "/",
                    "source": "/",
                    "left": {
                      "type": "var",
                      "data": "w2",
                      "source": "w2"
                    },
                    "right": {
                      "type": "num",
                      "data": -2,
                      "source": "-2"
                    }
                  },
                  "right": {
                    "type": "num",
                    "data": 15,
                    "source": "15"
                  }
                }
              ]
            ],
            "source": "(\n    square w2 30 10 : c#c_prim\n    change_x w2 / -2 + 15\n  )"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "c",
            "source": "c c_text"
          },
          {
            "type": "var",
            "data": "c_text",
            "source": "c_text"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "icon",
            "source": "icon \"Add\" 0.5"
          },
          {
            "type": "str",
            "data": "\"Add\"",
            "source": "\"Add\""
          },
          {
            "type": "num",
            "data": 0.5,
            "source": "0.5"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "text",
            "source": "text \"Create New File\" 8 : chx#20"
          },
          {
            "type": "str",
            "data": "\"Create New File\"",
            "source": "\"Create New File\""
          },
          {
            "type": "num",
            "data": 8,
            "source": "8"
          },
          {
            "type": "mod",
            "data": [
              "chx",
              {
                "type": "num",
                "data": 20,
                "source": "20"
              }
            ],
            "source": "chx#20"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "c",
            "source": "c c_prim"
          },
          {
            "type": "var",
            "data": "c_prim",
            "source": "c_prim"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "frame",
            "source": "frame 10 window.top - 93 window.right - 10 window.bottom recent_2.len * 55"
          },
          {
            "type": "num",
            "data": 10,
            "source": "10"
          },
          {
            "type": "opr",
            "data": "-",
            "source": "-",
            "left": {
              "type": "mtd",
              "data": [
                {
                  "type": "var",
                  "data": "window",
                  "source": "window"
                },
                {
                  "type": "var",
                  "data": "top",
                  "source": "top"
                }
              ],
              "source": "window.top"
            },
            "right": {
              "type": "num",
              "data": 93,
              "source": "93"
            }
          },
          {
            "type": "opr",
            "data": "-",
            "source": "-",
            "left": {
              "type": "mtd",
              "data": [
                {
                  "type": "var",
                  "data": "window",
                  "source": "window"
                },
                {
                  "type": "var",
                  "data": "right",
                  "source": "right"
                }
              ],
              "source": "window.right"
            },
            "right": {
              "type": "num",
              "data": 10,
              "source": "10"
            }
          },
          {
            "type": "mtd",
            "data": [
              {
                "type": "var",
                "data": "window",
                "source": "window"
              },
              {
                "type": "var",
                "data": "bottom",
                "source": "bottom"
              }
            ],
            "source": "window.bottom"
          },
          {
            "type": "opr",
            "data": "*",
            "source": "*",
            "left": {
              "type": "mtd",
              "data": [
                {
                  "type": "var",
                  "data": "recent_2",
                  "source": "recent_2"
                },
                {
                  "type": "var",
                  "data": "len",
                  "source": "len"
                }
              ],
              "source": "recent_2.len"
            },
            "right": {
              "type": "num",
              "data": 55,
              "source": "55"
            }
          }
        ],
        [
          {
            "type": "asi",
            "data": "=",
            "source": "w = frame_width - 20",
            "left": {
              "type": "var",
              "data": "w",
              "source": "w"
            },
            "right": {
              "type": "opr",
              "data": "-",
              "source": "-",
              "left": {
                "type": "var",
                "data": "frame_width",
                "source": "frame_width"
              },
              "right": {
                "type": "num",
                "data": 20,
                "source": "20"
              }
            }
          }
        ],
        [
          {
            "type": "cmd",
            "data": "for",
            "source": "for count recent_2.len (\n    y = count * -55 + 25 + scroll_y\n    loc 999 2 0 y\n    square w 30 10 : c#c_prim cursor#pointer\n    cur = recent_2.[count].toStr()\n    file = open(cur, [2, 1])\n    if mouse_touching (\n      square w 30 15 : c#c_seco\n      square w 30 10 : c#c_prim\n      if onclick (\n        add_tab cur\n        current_ohf = compileOHF(getOHF(file.[2]))\n        inputs.[cur] = open(cur).split(\"\\n\")\n      )\n    )\n    change w / -2 + 12\n    if loaded_file !== 0 (\n      file \"render\" 1\n      loc 2 2 60 y\n      text file.join(\"\") 9 : c#c_text\n    ) else (\n      recent.delete(count)\n      save \"recent_files.json\" \"set\" recent\n      count --\n      recent2 = recent.trim(1,10)\n    )\n  )"
          },
          {
            "type": "str",
            "data": "count",
            "source": "count"
          },
          {
            "type": "mtd",
            "data": [
              {
                "type": "var",
                "data": "recent_2",
                "source": "recent_2"
              },
              {
                "type": "var",
                "data": "len",
                "source": "len"
              }
            ],
            "source": "recent_2.len"
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "y = count * -55 + 25 + scroll_y",
                  "left": {
                    "type": "var",
                    "data": "y",
                    "source": "y"
                  },
                  "right": {
                    "type": "opr",
                    "data": "+",
                    "source": "+",
                    "left": {
                      "type": "opr",
                      "data": "+",
                      "source": "+",
                      "left": {
                        "type": "opr",
                        "data": "*",
                        "source": "*",
                        "left": {
                          "type": "var",
                          "data": "count",
                          "source": "count"
                        },
                        "right": {
                          "type": "num",
                          "data": -55,
                          "source": "-55"
                        }
                      },
                      "right": {
                        "type": "num",
                        "data": 25,
                        "source": "25"
                      }
                    },
                    "right": {
                      "type": "var",
                      "data": "scroll_y",
                      "source": "scroll_y"
                    }
                  }
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "loc",
                  "source": "loc 999 2 0 y"
                },
                {
                  "type": "num",
                  "data": 999,
                  "source": "999"
                },
                {
                  "type": "num",
                  "data": 2,
                  "source": "2"
                },
                {
                  "type": "num",
                  "data": 0,
                  "source": "0"
                },
                {
                  "type": "var",
                  "data": "y",
                  "source": "y"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "square",
                  "source": "square w 30 10 : c#c_prim cursor#pointer"
                },
                {
                  "type": "var",
                  "data": "w",
                  "source": "w"
                },
                {
                  "type": "num",
                  "data": 30,
                  "source": "30"
                },
                {
                  "type": "num",
                  "data": 10,
                  "source": "10"
                },
                {
                  "type": "mod",
                  "data": [
                    "c",
                    {
                      "type": "var",
                      "data": "c_prim",
                      "source": "c_prim"
                    }
                  ],
                  "source": "c#c_prim"
                },
                {
                  "type": "mod",
                  "data": [
                    "cursor",
                    {
                      "type": "var",
                      "data": "pointer",
                      "source": "pointer"
                    }
                  ],
                  "source": "cursor#pointer"
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "cur = recent_2.[count].toStr()",
                  "left": {
                    "type": "var",
                    "data": "cur",
                    "source": "cur"
                  },
                  "right": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "recent_2",
                        "source": "recent_2"
                      },
                      {
                        "type": "mtv",
                        "data": "item",
                        "parameters": [
                          {
                            "type": "var",
                            "data": "count",
                            "source": "count"
                          }
                        ],
                        "source": "[count]"
                      },
                      {
                        "type": "mtv",
                        "data": "toStr",
                        "parameters": [],
                        "source": "toStr()"
                      }
                    ],
                    "source": "recent_2.[count].toStr()"
                  }
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "file = open(cur, [2, 1])",
                  "left": {
                    "type": "var",
                    "data": "file",
                    "source": "file"
                  },
                  "right": {
                    "type": "fnc",
                    "data": "open",
                    "parameters": [
                      {
                        "type": "var",
                        "data": "cur",
                        "source": "cur"
                      },
                      {
                        "type": "arr",
                        "data": [
                          {
                            "type": "num",
                            "data": 2,
                            "source": "2"
                          },
                          {
                            "type": "num",
                            "data": 1,
                            "source": "1"
                          }
                        ],
                        "source": "[2, 1]"
                      }
                    ],
                    "source": "open(cur, [2, 1])"
                  }
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if mouse_touching (\n      square w 30 15 : c#c_seco\n      square w 30 10 : c#c_prim\n      if onclick (\n        add_tab cur\n        current_ohf = compileOHF(getOHF(file.[2]))\n        inputs.[cur] = open(cur).split(\"\\n\")\n      )\n    )"
                },
                {
                  "type": "var",
                  "data": "mouse_touching",
                  "source": "mouse_touching"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "square",
                        "source": "square w 30 15 : c#c_seco"
                      },
                      {
                        "type": "var",
                        "data": "w",
                        "source": "w"
                      },
                      {
                        "type": "num",
                        "data": 30,
                        "source": "30"
                      },
                      {
                        "type": "num",
                        "data": 15,
                        "source": "15"
                      },
                      {
                        "type": "mod",
                        "data": [
                          "c",
                          {
                            "type": "var",
                            "data": "c_seco",
                            "source": "c_seco"
                          }
                        ],
                        "source": "c#c_seco"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "square",
                        "source": "square w 30 10 : c#c_prim"
                      },
                      {
                        "type": "var",
                        "data": "w",
                        "source": "w"
                      },
                      {
                        "type": "num",
                        "data": 30,
                        "source": "30"
                      },
                      {
                        "type": "num",
                        "data": 10,
                        "source": "10"
                      },
                      {
                        "type": "mod",
                        "data": [
                          "c",
                          {
                            "type": "var",
                            "data": "c_prim",
                            "source": "c_prim"
                          }
                        ],
                        "source": "c#c_prim"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "if",
                        "source": "if onclick (\n        add_tab cur\n        current_ohf = compileOHF(getOHF(file.[2]))\n        inputs.[cur] = open(cur).split(\"\\n\")\n      )"
                      },
                      {
                        "type": "var",
                        "data": "onclick",
                        "source": "onclick"
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "cmd",
                              "data": "add_tab",
                              "source": "add_tab cur"
                            },
                            {
                              "type": "var",
                              "data": "cur",
                              "source": "cur"
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "current_ohf = compileOHF(getOHF(file.[2]))",
                              "left": {
                                "type": "var",
                                "data": "current_ohf",
                                "source": "current_ohf"
                              },
                              "right": {
                                "type": "fnc",
                                "data": "compileOHF",
                                "parameters": [
                                  {
                                    "type": "fnc",
                                    "data": "getOHF",
                                    "parameters": [
                                      {
                                        "type": "asi",
                                        "data": "=??",
                                        "source": "file.[2]",
                                        "left": {
                                          "type": "var",
                                          "data": "file",
                                          "source": "file"
                                        },
                                        "right": {
                                          "type": "mtd",
                                          "data": [
                                            {
                                              "type": "var",
                                              "data": "file",
                                              "source": "file"
                                            },
                                            {
                                              "type": "mtv",
                                              "data": "item",
                                              "parameters": [
                                                {
                                                  "type": "num",
                                                  "data": 2,
                                                  "source": "2"
                                                }
                                              ],
                                              "source": "[2]"
                                            }
                                          ],
                                          "source": "file.[2]"
                                        }
                                      }
                                    ],
                                    "source": "getOHF(file.[2])"
                                  }
                                ],
                                "source": "compileOHF(getOHF(file.[2]))"
                              }
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "inputs.[cur] = open(cur).split(\"\\n\")",
                              "left": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "inputs",
                                    "source": "inputs"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "item",
                                    "parameters": [
                                      {
                                        "type": "var",
                                        "data": "cur",
                                        "source": "cur"
                                      }
                                    ],
                                    "source": "[cur]"
                                  }
                                ],
                                "source": "inputs.[cur]"
                              },
                              "right": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "fnc",
                                    "data": "open",
                                    "parameters": [
                                      {
                                        "type": "var",
                                        "data": "cur",
                                        "source": "cur"
                                      }
                                    ],
                                    "source": "open(cur)"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "split",
                                    "parameters": [
                                      {
                                        "type": "str",
                                        "data": "\"\\n\"",
                                        "source": "\"\\n\""
                                      }
                                    ],
                                    "source": "split(\"\\n\")"
                                  }
                                ],
                                "source": "open(cur).split(\"\\n\")"
                              }
                            }
                          ]
                        ],
                        "source": "(\n        add_tab cur\n        current_ohf = compileOHF(getOHF(file.[2]))\n        inputs.[cur] = open(cur).split(\"\\n\")\n      )"
                      }
                    ]
                  ],
                  "source": "(\n      square w 30 15 : c#c_seco\n      square w 30 10 : c#c_prim\n      if onclick (\n        add_tab cur\n        current_ohf = compileOHF(getOHF(file.[2]))\n        inputs.[cur] = open(cur).split(\"\\n\")\n      )\n    )"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "change",
                  "source": "change w / -2 + 12"
                },
                {
                  "type": "opr",
                  "data": "+",
                  "source": "+",
                  "left": {
                    "type": "opr",
                    "data": "/",
                    "source": "/",
                    "left": {
                      "type": "var",
                      "data": "w",
                      "source": "w"
                    },
                    "right": {
                      "type": "num",
                      "data": -2,
                      "source": "-2"
                    }
                  },
                  "right": {
                    "type": "num",
                    "data": 12,
                    "source": "12"
                  }
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if loaded_file !== 0 (\n      file \"render\" 1\n      loc 2 2 60 y\n      text file.join(\"\") 9 : c#c_text\n    ) else (\n      recent.delete(count)\n      save \"recent_files.json\" \"set\" recent\n      count --\n      recent2 = recent.trim(1,10)\n    )"
                },
                {
                  "type": "cmp",
                  "data": "!==",
                  "source": "!==",
                  "left": {
                    "type": "var",
                    "data": "loaded_file",
                    "source": "loaded_file"
                  },
                  "right": {
                    "type": "num",
                    "data": 0,
                    "source": "0"
                  }
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "file",
                        "source": "file \"render\" 1"
                      },
                      {
                        "type": "str",
                        "data": "\"render\"",
                        "source": "\"render\""
                      },
                      {
                        "type": "num",
                        "data": 1,
                        "source": "1"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "loc",
                        "source": "loc 2 2 60 y"
                      },
                      {
                        "type": "num",
                        "data": 2,
                        "source": "2"
                      },
                      {
                        "type": "num",
                        "data": 2,
                        "source": "2"
                      },
                      {
                        "type": "num",
                        "data": 60,
                        "source": "60"
                      },
                      {
                        "type": "var",
                        "data": "y",
                        "source": "y"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "text",
                        "source": "text file.join(\"\") 9 : c#c_text"
                      },
                      {
                        "type": "mtd",
                        "data": [
                          {
                            "type": "var",
                            "data": "file",
                            "source": "file"
                          },
                          {
                            "type": "mtv",
                            "data": "join",
                            "parameters": [
                              {
                                "type": "str",
                                "data": "\"\"",
                                "source": "\"\""
                              }
                            ],
                            "source": "join(\"\")"
                          }
                        ],
                        "source": "file.join(\"\")"
                      },
                      {
                        "type": "num",
                        "data": 9,
                        "source": "9"
                      },
                      {
                        "type": "mod",
                        "data": [
                          "c",
                          {
                            "type": "var",
                            "data": "c_text",
                            "source": "c_text"
                          }
                        ],
                        "source": "c#c_text"
                      }
                    ]
                  ],
                  "source": "(\n      file \"render\" 1\n      loc 2 2 60 y\n      text file.join(\"\") 9 : c#c_text\n    )"
                },
                {
                  "type": "var",
                  "data": "else",
                  "source": "else"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "asi",
                        "data": "=??",
                        "source": "recent.delete(count)",
                        "left": {
                          "type": "var",
                          "data": "recent",
                          "source": "recent"
                        },
                        "right": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "recent",
                              "source": "recent"
                            },
                            {
                              "type": "mtv",
                              "data": "delete",
                              "parameters": [
                                {
                                  "type": "var",
                                  "data": "count",
                                  "source": "count"
                                }
                              ],
                              "source": "delete(count)"
                            }
                          ],
                          "source": "recent.delete(count)"
                        }
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "save",
                        "source": "save \"recent_files.json\" \"set\" recent"
                      },
                      {
                        "type": "str",
                        "data": "\"recent_files.json\"",
                        "source": "\"recent_files.json\""
                      },
                      {
                        "type": "str",
                        "data": "\"set\"",
                        "source": "\"set\""
                      },
                      {
                        "type": "var",
                        "data": "recent",
                        "source": "recent"
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "--",
                        "left": {
                          "type": "var",
                          "data": "count",
                          "source": "count"
                        },
                        "source": "count --"
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "recent2 = recent.trim(1,10)",
                        "left": {
                          "type": "var",
                          "data": "recent2",
                          "source": "recent2"
                        },
                        "right": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "recent",
                              "source": "recent"
                            },
                            {
                              "type": "mtv",
                              "data": "trim",
                              "parameters": [
                                {
                                  "type": "num",
                                  "data": 1,
                                  "source": "1"
                                },
                                {
                                  "type": "num",
                                  "data": 10,
                                  "source": "10"
                                }
                              ],
                              "source": "trim(1,10)"
                            }
                          ],
                          "source": "recent.trim(1,10)"
                        }
                      }
                    ]
                  ],
                  "source": "(\n      recent.delete(count)\n      save \"recent_files.json\" \"set\" recent\n      count --\n      recent2 = recent.trim(1,10)\n    )"
                }
              ]
            ],
            "source": "(\n    y = count * -55 + 25 + scroll_y\n    loc 999 2 0 y\n    square w 30 10 : c#c_prim cursor#pointer\n    cur = recent_2.[count].toStr()\n    file = open(cur, [2, 1])\n    if mouse_touching (\n      square w 30 15 : c#c_seco\n      square w 30 10 : c#c_prim\n      if onclick (\n        add_tab cur\n        current_ohf = compileOHF(getOHF(file.[2]))\n        inputs.[cur] = open(cur).split(\"\\n\")\n      )\n    )\n    change w / -2 + 12\n    if loaded_file !== 0 (\n      file \"render\" 1\n      loc 2 2 60 y\n      text file.join(\"\") 9 : c#c_text\n    ) else (\n      recent.delete(count)\n      save \"recent_files.json\" \"set\" recent\n      count --\n      recent2 = recent.trim(1,10)\n    )\n  )"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "frame",
            "source": "frame \"clear\""
          },
          {
            "type": "str",
            "data": "\"clear\"",
            "source": "\"clear\""
          }
        ]
      ],
      "source": "(\n  w = window_width / 2 - 40\n  w2 = w - 40\n  loc 2 2 70 -75\n  text \"New File\" 8 : c#c_text\n\n  loc 999 2 20 -75\n  text \"Recent Files\" 8\n  \n  loc 2 2 w / 2 + 50 -290\n  square w2 30 10 : c#c_seco\n  if onclick (\n    file \"pick\"\n  )\n  change_x w2 / -2 + 10\n  text \"Open File\" 9 : c#c_text\n\n  loc 2 2 w / 2 + 50 -340\n  square w2 30 10 : c#c_seco\n  if onclick (\n    add_tab \"> Invite\"\n  )\n  change_x w2 / -2 + 10\n  text \"Live Share\" 9 : c#c_text\n\n  loc 2 2 w / 2 + 50 -125\n  square w2 30 10 : c#c_prim\n  input w2 - 10 25 \"name\" \"hello world.txt\" 10 c_text\n  change_y -55\n  if input_name.matchregex(\"/[^.]+\\.[^.]+/gm\") (\n    square w2 30 10 : c#c_seco cursor#pointer\n    if mouse_touching (\n      square w2 30 15 : c#global_accent\n      square w2 30 10 : c#c_seco\n    )\n    if onclick or \"enter\".onKeyDown() (\n      file \"download\" input_name\n      add_tab data\n      current_ohf = compileOHF(getOHF(input_name.split(\".\").last()))\n    )\n    change_x w2 / -2 + 15\n  ) else (\n    square w2 30 10 : c#c_prim\n    change_x w2 / -2 + 15\n  )\n  c c_text\n  icon \"Add\" 0.5\n  text \"Create New File\" 8 : chx#20\n\n  c c_prim\n  frame 10 window.top - 93 window.right - 10 window.bottom recent_2.len * 55\n  w = frame_width - 20\n  for count recent_2.len (\n    y = count * -55 + 25 + scroll_y\n    loc 999 2 0 y\n    square w 30 10 : c#c_prim cursor#pointer\n    cur = recent_2.[count].toStr()\n    file = open(cur, [2, 1])\n    if mouse_touching (\n      square w 30 15 : c#c_seco\n      square w 30 10 : c#c_prim\n      if onclick (\n        add_tab cur\n        current_ohf = compileOHF(getOHF(file.[2]))\n        inputs.[cur] = open(cur).split(\"\\n\")\n      )\n    )\n    change w / -2 + 12\n    if loaded_file !== 0 (\n      file \"render\" 1\n      loc 2 2 60 y\n      text file.join(\"\") 9 : c#c_text\n    ) else (\n      recent.delete(count)\n      save \"recent_files.json\" \"set\" recent\n      count --\n      recent2 = recent.trim(1,10)\n    )\n  )\n  frame \"clear\"\n)"
    }
  ],
  [
    {
      "type": "cmd",
      "data": "if",
      "source": "if current_studio_page == \"Invite\" (\n  window \"responsive\" true\n  frame window.left + 300 window.top - 40 window.right window.bottom (\n    goto 0 40\n    centext \"Type a user's connection id to invite\" 10 : c#c_text\n    goto 0 20\n    centext \"Your id is: \" ++ connection.username 9\n    goto 0 -20\n    square 300 25 10 : c#c_prim\n    input 260 25 \"Invite\" \"Should look like: '06ec19ff33'\" : chx#-20\n    c sharing_tab == null ? c_seco c_text\n    icon \"send\" 0.8 : chx#150 tooltip#\"Send Invite to Edit\"\n    if onclick and sharing_tab != null (\n      edit_session = ouidNew()\n      host = true\n      rotur.pMessage(connection.room, \"ori-\" ++ inputs.Invite, {\n        cmd: \"join\",\n        ohf: getOHF(open(sharing_tab, [\"type\"]).[1]),\n        room: edit_session,\n        file_data: open(sharing_tab, \"all\")\n      })\n      \n      joinEditSession(edit_session)\n    )\n    c c_text\n    goto 0 -55\n    centext \"Recieved:\" 9\n    each invite invites.getKeys() (\n      change_y -45\n      square frame.width - 30 30 10 : c#c_prim\n      if onclick (\n        sharing_tab = \"\"\n        tabs = tabs.filter(v -> (v.startsWith(\"^ \").not()))\n        joinEditSession(invites.[invite].val.room)\n        local file_data = invites.[invite].val.file_data\n        save_name = \"temp_\" ++ file_data.[14] ++ \".lvsh\"\n        save save_name \"set\" file_data.[4]\n        sharing_tab = save_name.saveGet(14)\n        \n        inputs.share = file_data.[4].split(\"\\n\")\n        last_inputs_share = inputs.share\n        \n        share_name = file_data.[2] ++ file_data.[1]\n        share_type = file_data.[1]\n        current_ohf = invites.[invite].val.ohf\n        if typeof(current_ohf) == \"object\" (\n          current_ohf = compileOHF(current_ohf)\n        ) else (\n          current_ohf = null\n        )\n        add_tab \"^ \" ++ file_data.[14]\n        invites = {}\n      )\n      centext \"From \" ++ invites.[invite].origin.username 10 : c#c_text\n    )\n  )\n  frame window.left + 45 window.top - 35 window.left + 300 window.bottom (\n    square frame.width - 25 frame.height - 25 15 : c#c_prim\n    square frame.width - 25 frame.height - 25 10 : c#window_colour\n    goto 0 frame.top + 15\n    each tab tabs (\n      if tab.len == 32 (\n        change_y -45\n        if sharing_tab == tab (\n          square frame.width - 30 30 15 : c#global_accent\n        )\n        square frame.width - 30 30 10 : c#c_prim\n        if clicked (\n          sharing_tab = tab\n        )\n        centext open(tab, [\"name\", \"type\"]).join(\"\") 10 : c#c_text\n      )\n    )\n  )\n)"
    },
    {
      "type": "cmp",
      "data": "==",
      "source": "==",
      "left": {
        "type": "var",
        "data": "current_studio_page",
        "source": "current_studio_page"
      },
      "right": {
        "type": "str",
        "data": "\"Invite\"",
        "source": "\"Invite\""
      }
    },
    {
      "type": "blk",
      "data": [
        [
          {
            "type": "cmd",
            "data": "window",
            "source": "window \"responsive\" true"
          },
          {
            "type": "str",
            "data": "\"responsive\"",
            "source": "\"responsive\""
          },
          {
            "type": "var",
            "data": true,
            "source": "true"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "frame",
            "source": "frame window.left + 300 window.top - 40 window.right window.bottom (\n    goto 0 40\n    centext \"Type a user's connection id to invite\" 10 : c#c_text\n    goto 0 20\n    centext \"Your id is: \" ++ connection.username 9\n    goto 0 -20\n    square 300 25 10 : c#c_prim\n    input 260 25 \"Invite\" \"Should look like: '06ec19ff33'\" : chx#-20\n    c sharing_tab == null ? c_seco c_text\n    icon \"send\" 0.8 : chx#150 tooltip#\"Send Invite to Edit\"\n    if onclick and sharing_tab != null (\n      edit_session = ouidNew()\n      host = true\n      rotur.pMessage(connection.room, \"ori-\" ++ inputs.Invite, {\n        cmd: \"join\",\n        ohf: getOHF(open(sharing_tab, [\"type\"]).[1]),\n        room: edit_session,\n        file_data: open(sharing_tab, \"all\")\n      })\n      \n      joinEditSession(edit_session)\n    )\n    c c_text\n    goto 0 -55\n    centext \"Recieved:\" 9\n    each invite invites.getKeys() (\n      change_y -45\n      square frame.width - 30 30 10 : c#c_prim\n      if onclick (\n        sharing_tab = \"\"\n        tabs = tabs.filter(v -> (v.startsWith(\"^ \").not()))\n        joinEditSession(invites.[invite].val.room)\n        local file_data = invites.[invite].val.file_data\n        save_name = \"temp_\" ++ file_data.[14] ++ \".lvsh\"\n        save save_name \"set\" file_data.[4]\n        sharing_tab = save_name.saveGet(14)\n        \n        inputs.share = file_data.[4].split(\"\\n\")\n        last_inputs_share = inputs.share\n        \n        share_name = file_data.[2] ++ file_data.[1]\n        share_type = file_data.[1]\n        current_ohf = invites.[invite].val.ohf\n        if typeof(current_ohf) == \"object\" (\n          current_ohf = compileOHF(current_ohf)\n        ) else (\n          current_ohf = null\n        )\n        add_tab \"^ \" ++ file_data.[14]\n        invites = {}\n      )\n      centext \"From \" ++ invites.[invite].origin.username 10 : c#c_text\n    )\n  )"
          },
          {
            "type": "opr",
            "data": "+",
            "source": "+",
            "left": {
              "type": "mtd",
              "data": [
                {
                  "type": "var",
                  "data": "window",
                  "source": "window"
                },
                {
                  "type": "var",
                  "data": "left",
                  "source": "left"
                }
              ],
              "source": "window.left"
            },
            "right": {
              "type": "num",
              "data": 300,
              "source": "300"
            }
          },
          {
            "type": "opr",
            "data": "-",
            "source": "-",
            "left": {
              "type": "mtd",
              "data": [
                {
                  "type": "var",
                  "data": "window",
                  "source": "window"
                },
                {
                  "type": "var",
                  "data": "top",
                  "source": "top"
                }
              ],
              "source": "window.top"
            },
            "right": {
              "type": "num",
              "data": 40,
              "source": "40"
            }
          },
          {
            "type": "mtd",
            "data": [
              {
                "type": "var",
                "data": "window",
                "source": "window"
              },
              {
                "type": "var",
                "data": "right",
                "source": "right"
              }
            ],
            "source": "window.right"
          },
          {
            "type": "mtd",
            "data": [
              {
                "type": "var",
                "data": "window",
                "source": "window"
              },
              {
                "type": "var",
                "data": "bottom",
                "source": "bottom"
              }
            ],
            "source": "window.bottom"
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "cmd",
                  "data": "goto",
                  "source": "goto 0 40"
                },
                {
                  "type": "num",
                  "data": 0,
                  "source": "0"
                },
                {
                  "type": "num",
                  "data": 40,
                  "source": "40"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "centext",
                  "source": "centext \"Type a user's connection id to invite\" 10 : c#c_text"
                },
                {
                  "type": "str",
                  "data": "\"Type a user's connection id to invite\"",
                  "source": "\"Type a user's connection id to invite\""
                },
                {
                  "type": "num",
                  "data": 10,
                  "source": "10"
                },
                {
                  "type": "mod",
                  "data": [
                    "c",
                    {
                      "type": "var",
                      "data": "c_text",
                      "source": "c_text"
                    }
                  ],
                  "source": "c#c_text"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "goto",
                  "source": "goto 0 20"
                },
                {
                  "type": "num",
                  "data": 0,
                  "source": "0"
                },
                {
                  "type": "num",
                  "data": 20,
                  "source": "20"
                }
              ],
              [
                {
                  "type": "asi",
                  "data": "++",
                  "left": {
                    "type": "var",
                    "data": "centext",
                    "source": "centext"
                  },
                  "source": "centext \"Your id is: \" ++ connection.username 9"
                },
                {
                  "type": "num",
                  "data": 9,
                  "source": "9"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "goto",
                  "source": "goto 0 -20"
                },
                {
                  "type": "num",
                  "data": 0,
                  "source": "0"
                },
                {
                  "type": "num",
                  "data": -20,
                  "source": "-20"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "square",
                  "source": "square 300 25 10 : c#c_prim"
                },
                {
                  "type": "num",
                  "data": 300,
                  "source": "300"
                },
                {
                  "type": "num",
                  "data": 25,
                  "source": "25"
                },
                {
                  "type": "num",
                  "data": 10,
                  "source": "10"
                },
                {
                  "type": "mod",
                  "data": [
                    "c",
                    {
                      "type": "var",
                      "data": "c_prim",
                      "source": "c_prim"
                    }
                  ],
                  "source": "c#c_prim"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "input",
                  "source": "input 260 25 \"Invite\" \"Should look like: '06ec19ff33'\" : chx#-20"
                },
                {
                  "type": "num",
                  "data": 260,
                  "source": "260"
                },
                {
                  "type": "num",
                  "data": 25,
                  "source": "25"
                },
                {
                  "type": "str",
                  "data": "\"Invite\"",
                  "source": "\"Invite\""
                },
                {
                  "type": "str",
                  "data": "\"Should look like: '06ec19ff33'\"",
                  "source": "\"Should look like: '06ec19ff33'\""
                },
                {
                  "type": "mod",
                  "data": [
                    "chx",
                    {
                      "type": "num",
                      "data": -20,
                      "source": "-20"
                    }
                  ],
                  "source": "chx#-20"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "c",
                  "source": "c sharing_tab == null ? c_seco c_text"
                },
                {
                  "type": "qst",
                  "data": "?",
                  "source": "?",
                  "left": {
                    "type": "cmp",
                    "data": "==",
                    "source": "==",
                    "left": {
                      "type": "var",
                      "data": "sharing_tab",
                      "source": "sharing_tab"
                    },
                    "right": {
                      "type": "unk",
                      "data": null,
                      "source": "null"
                    }
                  },
                  "right": {
                    "type": "var",
                    "data": "c_seco",
                    "source": "c_seco"
                  },
                  "right2": {
                    "type": "var",
                    "data": "c_text",
                    "source": "c_text"
                  }
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "icon",
                  "source": "icon \"send\" 0.8 : chx#150 tooltip#\"Send Invite to Edit\""
                },
                {
                  "type": "str",
                  "data": "\"send\"",
                  "source": "\"send\""
                },
                {
                  "type": "num",
                  "data": 0.8,
                  "source": "0.8"
                },
                {
                  "type": "mod",
                  "data": [
                    "chx",
                    {
                      "type": "num",
                      "data": 150,
                      "source": "150"
                    }
                  ],
                  "source": "chx#150"
                },
                {
                  "type": "mod",
                  "data": [
                    "tooltip",
                    {
                      "type": "str",
                      "data": "\"Send Invite to Edit\"",
                      "source": "\"Send Invite to Edit\""
                    }
                  ],
                  "source": "tooltip#\"Send Invite to Edit\""
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "if",
                  "source": "if onclick and sharing_tab != null (\n      edit_session = ouidNew()\n      host = true\n      rotur.pMessage(connection.room, \"ori-\" ++ inputs.Invite, {\n        cmd: \"join\",\n        ohf: getOHF(open(sharing_tab, [\"type\"]).[1]),\n        room: edit_session,\n        file_data: open(sharing_tab, \"all\")\n      })\n      \n      joinEditSession(edit_session)\n    )"
                },
                {
                  "type": "log",
                  "data": "and",
                  "source": "and",
                  "left": {
                    "type": "var",
                    "data": "onclick",
                    "source": "onclick"
                  },
                  "right": {
                    "type": "cmp",
                    "data": "!=",
                    "source": "!=",
                    "left": {
                      "type": "var",
                      "data": "sharing_tab",
                      "source": "sharing_tab"
                    },
                    "right": {
                      "type": "unk",
                      "data": null,
                      "source": "null"
                    }
                  }
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "edit_session = ouidNew()",
                        "left": {
                          "type": "var",
                          "data": "edit_session",
                          "source": "edit_session"
                        },
                        "right": {
                          "type": "fnc",
                          "data": "ouidNew",
                          "parameters": [],
                          "source": "ouidNew()"
                        }
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=",
                        "source": "host = true",
                        "left": {
                          "type": "var",
                          "data": "host",
                          "source": "host"
                        },
                        "right": {
                          "type": "var",
                          "data": true,
                          "source": "true"
                        }
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "=??",
                        "source": "rotur.pMessage(connection.room, \"ori-\" ++ inputs.Invite, {\n        cmd: \"join\",\n        ohf: getOHF(open(sharing_tab, [\"type\"]).[1]),\n        room: edit_session,\n        file_data: open(sharing_tab, \"all\")\n      })",
                        "left": {
                          "type": "var",
                          "data": "rotur",
                          "source": "rotur"
                        },
                        "right": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "rotur",
                              "source": "rotur"
                            },
                            {
                              "type": "mtv",
                              "data": "pMessage",
                              "parameters": [
                                {
                                  "type": "mtd",
                                  "data": [
                                    {
                                      "type": "var",
                                      "data": "connection",
                                      "source": "connection"
                                    },
                                    {
                                      "type": "var",
                                      "data": "room",
                                      "source": "room"
                                    }
                                  ],
                                  "source": "connection.room"
                                },
                                null,
                                {
                                  "type": "obj",
                                  "data": {
                                    "cmd": {
                                      "type": "str",
                                      "data": "\"join\"",
                                      "source": "\"join\""
                                    },
                                    "ohf": {
                                      "type": "fnc",
                                      "data": "getOHF",
                                      "parameters": [
                                        {
                                          "type": "asi",
                                          "data": "=??",
                                          "source": "open(sharing_tab, [\"type\"]).[1]",
                                          "left": {
                                            "type": "fnc",
                                            "data": "open",
                                            "parameters": [
                                              {
                                                "type": "var",
                                                "data": "sharing_tab",
                                                "source": "sharing_tab"
                                              },
                                              {
                                                "type": "arr",
                                                "data": [
                                                  {
                                                    "type": "str",
                                                    "data": "\"type\"",
                                                    "source": "\"type\""
                                                  }
                                                ],
                                                "source": "[\"type\"]"
                                              }
                                            ],
                                            "source": "open(sharing_tab, [\"type\"])"
                                          },
                                          "right": {
                                            "type": "mtd",
                                            "data": [
                                              {
                                                "type": "fnc",
                                                "data": "open",
                                                "parameters": [
                                                  {
                                                    "type": "var",
                                                    "data": "sharing_tab",
                                                    "source": "sharing_tab"
                                                  },
                                                  {
                                                    "type": "arr",
                                                    "data": [
                                                      {
                                                        "type": "str",
                                                        "data": "\"type\"",
                                                        "source": "\"type\""
                                                      }
                                                    ],
                                                    "source": "[\"type\"]"
                                                  }
                                                ],
                                                "source": "open(sharing_tab, [\"type\"])"
                                              },
                                              {
                                                "type": "mtv",
                                                "data": "item",
                                                "parameters": [
                                                  {
                                                    "type": "num",
                                                    "data": 1,
                                                    "source": "1"
                                                  }
                                                ],
                                                "source": "[1]"
                                              }
                                            ],
                                            "source": "open(sharing_tab, [\"type\"]).[1]"
                                          }
                                        }
                                      ],
                                      "source": "getOHF(open(sharing_tab, [\"type\"]).[1])"
                                    },
                                    "room": {
                                      "type": "var",
                                      "data": "edit_session",
                                      "source": "edit_session"
                                    },
                                    "file_data": {
                                      "type": "fnc",
                                      "data": "open",
                                      "parameters": [
                                        {
                                          "type": "var",
                                          "data": "sharing_tab",
                                          "source": "sharing_tab"
                                        },
                                        {
                                          "type": "str",
                                          "data": "\"all\"",
                                          "source": "\"all\""
                                        }
                                      ],
                                      "source": "open(sharing_tab, \"all\")"
                                    }
                                  },
                                  "source": "{\n        cmd: \"join\",\n        ohf: getOHF(open(sharing_tab, [\"type\"]).[1]),\n        room: edit_session,\n        file_data: open(sharing_tab, \"all\")\n      }"
                                }
                              ],
                              "source": "pMessage(connection.room, \"ori-\" ++ inputs.Invite, {\n        cmd: \"join\",\n        ohf: getOHF(open(sharing_tab, [\"type\"]).[1]),\n        room: edit_session,\n        file_data: open(sharing_tab, \"all\")\n      })"
                            }
                          ],
                          "source": "rotur.pMessage(connection.room, \"ori-\" ++ inputs.Invite, {\n        cmd: \"join\",\n        ohf: getOHF(open(sharing_tab, [\"type\"]).[1]),\n        room: edit_session,\n        file_data: open(sharing_tab, \"all\")\n      })"
                        }
                      }
                    ],
                    [
                      {
                        "type": "fnc",
                        "data": "joinEditSession",
                        "parameters": [
                          {
                            "type": "var",
                            "data": "edit_session",
                            "source": "edit_session"
                          }
                        ],
                        "source": "joinEditSession(edit_session)"
                      }
                    ]
                  ],
                  "source": "(\n      edit_session = ouidNew()\n      host = true\n      rotur.pMessage(connection.room, \"ori-\" ++ inputs.Invite, {\n        cmd: \"join\",\n        ohf: getOHF(open(sharing_tab, [\"type\"]).[1]),\n        room: edit_session,\n        file_data: open(sharing_tab, \"all\")\n      })\n      \n      joinEditSession(edit_session)\n    )"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "c",
                  "source": "c c_text"
                },
                {
                  "type": "var",
                  "data": "c_text",
                  "source": "c_text"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "goto",
                  "source": "goto 0 -55"
                },
                {
                  "type": "num",
                  "data": 0,
                  "source": "0"
                },
                {
                  "type": "num",
                  "data": -55,
                  "source": "-55"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "centext",
                  "source": "centext \"Recieved:\" 9"
                },
                {
                  "type": "str",
                  "data": "\"Recieved:\"",
                  "source": "\"Recieved:\""
                },
                {
                  "type": "num",
                  "data": 9,
                  "source": "9"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "each",
                  "source": "each invite invites.getKeys() (\n      change_y -45\n      square frame.width - 30 30 10 : c#c_prim\n      if onclick (\n        sharing_tab = \"\"\n        tabs = tabs.filter(v -> (v.startsWith(\"^ \").not()))\n        joinEditSession(invites.[invite].val.room)\n        local file_data = invites.[invite].val.file_data\n        save_name = \"temp_\" ++ file_data.[14] ++ \".lvsh\"\n        save save_name \"set\" file_data.[4]\n        sharing_tab = save_name.saveGet(14)\n        \n        inputs.share = file_data.[4].split(\"\\n\")\n        last_inputs_share = inputs.share\n        \n        share_name = file_data.[2] ++ file_data.[1]\n        share_type = file_data.[1]\n        current_ohf = invites.[invite].val.ohf\n        if typeof(current_ohf) == \"object\" (\n          current_ohf = compileOHF(current_ohf)\n        ) else (\n          current_ohf = null\n        )\n        add_tab \"^ \" ++ file_data.[14]\n        invites = {}\n      )\n      centext \"From \" ++ invites.[invite].origin.username 10 : c#c_text\n    )"
                },
                {
                  "type": "str",
                  "data": "invite",
                  "source": "invite"
                },
                {
                  "type": "mtd",
                  "data": [
                    {
                      "type": "var",
                      "data": "invites",
                      "source": "invites"
                    },
                    {
                      "type": "mtv",
                      "data": "getKeys",
                      "parameters": [],
                      "source": "getKeys()"
                    }
                  ],
                  "source": "invites.getKeys()"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "change_y",
                        "source": "change_y -45"
                      },
                      {
                        "type": "num",
                        "data": -45,
                        "source": "-45"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "square",
                        "source": "square frame.width - 30 30 10 : c#c_prim"
                      },
                      {
                        "type": "opr",
                        "data": "-",
                        "source": "-",
                        "left": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "frame",
                              "source": "frame"
                            },
                            {
                              "type": "var",
                              "data": "width",
                              "source": "width"
                            }
                          ],
                          "source": "frame.width"
                        },
                        "right": {
                          "type": "num",
                          "data": 30,
                          "source": "30"
                        }
                      },
                      {
                        "type": "num",
                        "data": 30,
                        "source": "30"
                      },
                      {
                        "type": "num",
                        "data": 10,
                        "source": "10"
                      },
                      {
                        "type": "mod",
                        "data": [
                          "c",
                          {
                            "type": "var",
                            "data": "c_prim",
                            "source": "c_prim"
                          }
                        ],
                        "source": "c#c_prim"
                      }
                    ],
                    [
                      {
                        "type": "cmd",
                        "data": "if",
                        "source": "if onclick (\n        sharing_tab = \"\"\n        tabs = tabs.filter(v -> (v.startsWith(\"^ \").not()))\n        joinEditSession(invites.[invite].val.room)\n        local file_data = invites.[invite].val.file_data\n        save_name = \"temp_\" ++ file_data.[14] ++ \".lvsh\"\n        save save_name \"set\" file_data.[4]\n        sharing_tab = save_name.saveGet(14)\n        \n        inputs.share = file_data.[4].split(\"\\n\")\n        last_inputs_share = inputs.share\n        \n        share_name = file_data.[2] ++ file_data.[1]\n        share_type = file_data.[1]\n        current_ohf = invites.[invite].val.ohf\n        if typeof(current_ohf) == \"object\" (\n          current_ohf = compileOHF(current_ohf)\n        ) else (\n          current_ohf = null\n        )\n        add_tab \"^ \" ++ file_data.[14]\n        invites = {}\n      )"
                      },
                      {
                        "type": "var",
                        "data": "onclick",
                        "source": "onclick"
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "sharing_tab = \"\"",
                              "left": {
                                "type": "var",
                                "data": "sharing_tab",
                                "source": "sharing_tab"
                              },
                              "right": {
                                "type": "str",
                                "data": "\"\"",
                                "source": "\"\""
                              }
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "tabs = tabs.filter(v -> (v.startsWith(\"^ \").not()))",
                              "left": {
                                "type": "var",
                                "data": "tabs",
                                "source": "tabs"
                              },
                              "right": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "tabs",
                                    "source": "tabs"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "filter",
                                    "parameters": [
                                      null
                                    ],
                                    "source": "filter(v -> (v.startsWith(\"^ \").not()))"
                                  }
                                ],
                                "source": "tabs.filter(v -> (v.startsWith(\"^ \").not()))"
                              }
                            }
                          ],
                          [
                            {
                              "type": "fnc",
                              "data": "joinEditSession",
                              "parameters": [
                                {
                                  "type": "asi",
                                  "data": "=??",
                                  "source": "invites.[invite].val.room",
                                  "left": {
                                    "type": "var",
                                    "data": "invites",
                                    "source": "invites"
                                  },
                                  "right": {
                                    "type": "mtd",
                                    "data": [
                                      {
                                        "type": "var",
                                        "data": "invites",
                                        "source": "invites"
                                      },
                                      {
                                        "type": "mtv",
                                        "data": "item",
                                        "parameters": [
                                          {
                                            "type": "var",
                                            "data": "invite",
                                            "source": "invite"
                                          }
                                        ],
                                        "source": "[invite]"
                                      },
                                      {
                                        "type": "var",
                                        "data": "val",
                                        "source": "val"
                                      },
                                      {
                                        "type": "var",
                                        "data": "room",
                                        "source": "room"
                                      }
                                    ],
                                    "source": "invites.[invite].val.room"
                                  }
                                }
                              ],
                              "source": "joinEditSession(invites.[invite].val.room)"
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "local file_data = invites.[invite].val.file_data",
                              "left": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "this",
                                    "source": "this"
                                  },
                                  {
                                    "type": "var",
                                    "data": "file_data",
                                    "source": "file_data"
                                  }
                                ],
                                "source": "this.file_data"
                              },
                              "right": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "invites",
                                    "source": "invites"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "item",
                                    "parameters": [
                                      {
                                        "type": "var",
                                        "data": "invite",
                                        "source": "invite"
                                      }
                                    ],
                                    "source": "[invite]"
                                  },
                                  {
                                    "type": "var",
                                    "data": "val",
                                    "source": "val"
                                  },
                                  {
                                    "type": "var",
                                    "data": "file_data",
                                    "source": "file_data"
                                  }
                                ],
                                "source": "invites.[invite].val.file_data"
                              }
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "save_name = \"temp_\" ++ file_data.[14] ++ \".lvsh\"",
                              "left": {
                                "type": "var",
                                "data": "save_name",
                                "source": "save_name"
                              },
                              "right": {
                                "type": "opr",
                                "data": "++",
                                "source": "++",
                                "left": {
                                  "type": "opr",
                                  "data": "++",
                                  "source": "++",
                                  "left": {
                                    "type": "str",
                                    "data": "\"temp_\"",
                                    "source": "\"temp_\""
                                  },
                                  "right": {
                                    "type": "mtd",
                                    "data": [
                                      {
                                        "type": "var",
                                        "data": "file_data",
                                        "source": "file_data"
                                      },
                                      {
                                        "type": "mtv",
                                        "data": "item",
                                        "parameters": [
                                          {
                                            "type": "num",
                                            "data": 14,
                                            "source": "14"
                                          }
                                        ],
                                        "source": "[14]"
                                      }
                                    ],
                                    "source": "file_data.[14]"
                                  }
                                },
                                "right": {
                                  "type": "str",
                                  "data": "\".lvsh\"",
                                  "source": "\".lvsh\""
                                }
                              }
                            }
                          ],
                          [
                            {
                              "type": "cmd",
                              "data": "save",
                              "source": "save save_name \"set\" file_data.[4]"
                            },
                            {
                              "type": "var",
                              "data": "save_name",
                              "source": "save_name"
                            },
                            {
                              "type": "str",
                              "data": "\"set\"",
                              "source": "\"set\""
                            },
                            {
                              "type": "mtd",
                              "data": [
                                {
                                  "type": "var",
                                  "data": "file_data",
                                  "source": "file_data"
                                },
                                {
                                  "type": "mtv",
                                  "data": "item",
                                  "parameters": [
                                    {
                                      "type": "num",
                                      "data": 4,
                                      "source": "4"
                                    }
                                  ],
                                  "source": "[4]"
                                }
                              ],
                              "source": "file_data.[4]"
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "sharing_tab = save_name.saveGet(14)",
                              "left": {
                                "type": "var",
                                "data": "sharing_tab",
                                "source": "sharing_tab"
                              },
                              "right": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "save_name",
                                    "source": "save_name"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "saveGet",
                                    "parameters": [
                                      {
                                        "type": "num",
                                        "data": 14,
                                        "source": "14"
                                      }
                                    ],
                                    "source": "saveGet(14)"
                                  }
                                ],
                                "source": "save_name.saveGet(14)"
                              }
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "inputs.share = file_data.[4].split(\"\\n\")",
                              "left": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "inputs",
                                    "source": "inputs"
                                  },
                                  {
                                    "type": "var",
                                    "data": "share",
                                    "source": "share"
                                  }
                                ],
                                "source": "inputs.share"
                              },
                              "right": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "file_data",
                                    "source": "file_data"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "item",
                                    "parameters": [
                                      {
                                        "type": "num",
                                        "data": 4,
                                        "source": "4"
                                      }
                                    ],
                                    "source": "[4]"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "split",
                                    "parameters": [
                                      {
                                        "type": "str",
                                        "data": "\"\\n\"",
                                        "source": "\"\\n\""
                                      }
                                    ],
                                    "source": "split(\"\\n\")"
                                  }
                                ],
                                "source": "file_data.[4].split(\"\\n\")"
                              }
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "last_inputs_share = inputs.share",
                              "left": {
                                "type": "var",
                                "data": "last_inputs_share",
                                "source": "last_inputs_share"
                              },
                              "right": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "inputs",
                                    "source": "inputs"
                                  },
                                  {
                                    "type": "var",
                                    "data": "share",
                                    "source": "share"
                                  }
                                ],
                                "source": "inputs.share"
                              }
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "share_name = file_data.[2] ++ file_data.[1]",
                              "left": {
                                "type": "var",
                                "data": "share_name",
                                "source": "share_name"
                              },
                              "right": {
                                "type": "opr",
                                "data": "++",
                                "source": "++",
                                "left": {
                                  "type": "mtd",
                                  "data": [
                                    {
                                      "type": "var",
                                      "data": "file_data",
                                      "source": "file_data"
                                    },
                                    {
                                      "type": "mtv",
                                      "data": "item",
                                      "parameters": [
                                        {
                                          "type": "num",
                                          "data": 2,
                                          "source": "2"
                                        }
                                      ],
                                      "source": "[2]"
                                    }
                                  ],
                                  "source": "file_data.[2]"
                                },
                                "right": {
                                  "type": "mtd",
                                  "data": [
                                    {
                                      "type": "var",
                                      "data": "file_data",
                                      "source": "file_data"
                                    },
                                    {
                                      "type": "mtv",
                                      "data": "item",
                                      "parameters": [
                                        {
                                          "type": "num",
                                          "data": 1,
                                          "source": "1"
                                        }
                                      ],
                                      "source": "[1]"
                                    }
                                  ],
                                  "source": "file_data.[1]"
                                }
                              }
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "share_type = file_data.[1]",
                              "left": {
                                "type": "var",
                                "data": "share_type",
                                "source": "share_type"
                              },
                              "right": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "file_data",
                                    "source": "file_data"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "item",
                                    "parameters": [
                                      {
                                        "type": "num",
                                        "data": 1,
                                        "source": "1"
                                      }
                                    ],
                                    "source": "[1]"
                                  }
                                ],
                                "source": "file_data.[1]"
                              }
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "current_ohf = invites.[invite].val.ohf",
                              "left": {
                                "type": "var",
                                "data": "current_ohf",
                                "source": "current_ohf"
                              },
                              "right": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "invites",
                                    "source": "invites"
                                  },
                                  {
                                    "type": "mtv",
                                    "data": "item",
                                    "parameters": [
                                      {
                                        "type": "var",
                                        "data": "invite",
                                        "source": "invite"
                                      }
                                    ],
                                    "source": "[invite]"
                                  },
                                  {
                                    "type": "var",
                                    "data": "val",
                                    "source": "val"
                                  },
                                  {
                                    "type": "var",
                                    "data": "ohf",
                                    "source": "ohf"
                                  }
                                ],
                                "source": "invites.[invite].val.ohf"
                              }
                            }
                          ],
                          [
                            {
                              "type": "cmd",
                              "data": "if",
                              "source": "if typeof(current_ohf) == \"object\" (\n          current_ohf = compileOHF(current_ohf)\n        ) else (\n          current_ohf = null\n        )"
                            },
                            {
                              "type": "cmp",
                              "data": "==",
                              "source": "==",
                              "left": {
                                "type": "fnc",
                                "data": "typeof",
                                "parameters": [
                                  {
                                    "type": "var",
                                    "data": "current_ohf",
                                    "source": "current_ohf"
                                  }
                                ],
                                "source": "typeof(current_ohf)"
                              },
                              "right": {
                                "type": "str",
                                "data": "\"object\"",
                                "source": "\"object\""
                              }
                            },
                            {
                              "type": "blk",
                              "data": [
                                [
                                  {
                                    "type": "asi",
                                    "data": "=",
                                    "source": "current_ohf = compileOHF(current_ohf)",
                                    "left": {
                                      "type": "var",
                                      "data": "current_ohf",
                                      "source": "current_ohf"
                                    },
                                    "right": {
                                      "type": "fnc",
                                      "data": "compileOHF",
                                      "parameters": [
                                        {
                                          "type": "var",
                                          "data": "current_ohf",
                                          "source": "current_ohf"
                                        }
                                      ],
                                      "source": "compileOHF(current_ohf)"
                                    }
                                  }
                                ]
                              ],
                              "source": "(\n          current_ohf = compileOHF(current_ohf)\n        )"
                            },
                            {
                              "type": "var",
                              "data": "else",
                              "source": "else"
                            },
                            {
                              "type": "blk",
                              "data": [
                                [
                                  {
                                    "type": "asi",
                                    "data": "=",
                                    "source": "current_ohf = null",
                                    "left": {
                                      "type": "var",
                                      "data": "current_ohf",
                                      "source": "current_ohf"
                                    },
                                    "right": {
                                      "type": "unk",
                                      "data": null,
                                      "source": "null"
                                    }
                                  }
                                ]
                              ],
                              "source": "(\n          current_ohf = null\n        )"
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "++",
                              "left": {
                                "type": "var",
                                "data": "add_tab",
                                "source": "add_tab"
                              },
                              "source": "add_tab \"^ \" ++ file_data.[14]"
                            }
                          ],
                          [
                            {
                              "type": "asi",
                              "data": "=",
                              "source": "invites = {}",
                              "left": {
                                "type": "var",
                                "data": "invites",
                                "source": "invites"
                              },
                              "right": {
                                "type": "obj",
                                "data": {},
                                "source": "{}"
                              }
                            }
                          ]
                        ],
                        "source": "(\n        sharing_tab = \"\"\n        tabs = tabs.filter(v -> (v.startsWith(\"^ \").not()))\n        joinEditSession(invites.[invite].val.room)\n        local file_data = invites.[invite].val.file_data\n        save_name = \"temp_\" ++ file_data.[14] ++ \".lvsh\"\n        save save_name \"set\" file_data.[4]\n        sharing_tab = save_name.saveGet(14)\n        \n        inputs.share = file_data.[4].split(\"\\n\")\n        last_inputs_share = inputs.share\n        \n        share_name = file_data.[2] ++ file_data.[1]\n        share_type = file_data.[1]\n        current_ohf = invites.[invite].val.ohf\n        if typeof(current_ohf) == \"object\" (\n          current_ohf = compileOHF(current_ohf)\n        ) else (\n          current_ohf = null\n        )\n        add_tab \"^ \" ++ file_data.[14]\n        invites = {}\n      )"
                      }
                    ],
                    [
                      {
                        "type": "asi",
                        "data": "++",
                        "left": {
                          "type": "var",
                          "data": "centext",
                          "source": "centext"
                        },
                        "source": "centext \"From \" ++ invites.[invite].origin.username 10 : c#c_text"
                      },
                      {
                        "type": "num",
                        "data": 10,
                        "source": "10"
                      },
                      {
                        "type": "mod",
                        "data": [
                          "c",
                          {
                            "type": "var",
                            "data": "c_text",
                            "source": "c_text"
                          }
                        ],
                        "source": "c#c_text"
                      }
                    ]
                  ],
                  "source": "(\n      change_y -45\n      square frame.width - 30 30 10 : c#c_prim\n      if onclick (\n        sharing_tab = \"\"\n        tabs = tabs.filter(v -> (v.startsWith(\"^ \").not()))\n        joinEditSession(invites.[invite].val.room)\n        local file_data = invites.[invite].val.file_data\n        save_name = \"temp_\" ++ file_data.[14] ++ \".lvsh\"\n        save save_name \"set\" file_data.[4]\n        sharing_tab = save_name.saveGet(14)\n        \n        inputs.share = file_data.[4].split(\"\\n\")\n        last_inputs_share = inputs.share\n        \n        share_name = file_data.[2] ++ file_data.[1]\n        share_type = file_data.[1]\n        current_ohf = invites.[invite].val.ohf\n        if typeof(current_ohf) == \"object\" (\n          current_ohf = compileOHF(current_ohf)\n        ) else (\n          current_ohf = null\n        )\n        add_tab \"^ \" ++ file_data.[14]\n        invites = {}\n      )\n      centext \"From \" ++ invites.[invite].origin.username 10 : c#c_text\n    )"
                }
              ]
            ],
            "source": "(\n    goto 0 40\n    centext \"Type a user's connection id to invite\" 10 : c#c_text\n    goto 0 20\n    centext \"Your id is: \" ++ connection.username 9\n    goto 0 -20\n    square 300 25 10 : c#c_prim\n    input 260 25 \"Invite\" \"Should look like: '06ec19ff33'\" : chx#-20\n    c sharing_tab == null ? c_seco c_text\n    icon \"send\" 0.8 : chx#150 tooltip#\"Send Invite to Edit\"\n    if onclick and sharing_tab != null (\n      edit_session = ouidNew()\n      host = true\n      rotur.pMessage(connection.room, \"ori-\" ++ inputs.Invite, {\n        cmd: \"join\",\n        ohf: getOHF(open(sharing_tab, [\"type\"]).[1]),\n        room: edit_session,\n        file_data: open(sharing_tab, \"all\")\n      })\n      \n      joinEditSession(edit_session)\n    )\n    c c_text\n    goto 0 -55\n    centext \"Recieved:\" 9\n    each invite invites.getKeys() (\n      change_y -45\n      square frame.width - 30 30 10 : c#c_prim\n      if onclick (\n        sharing_tab = \"\"\n        tabs = tabs.filter(v -> (v.startsWith(\"^ \").not()))\n        joinEditSession(invites.[invite].val.room)\n        local file_data = invites.[invite].val.file_data\n        save_name = \"temp_\" ++ file_data.[14] ++ \".lvsh\"\n        save save_name \"set\" file_data.[4]\n        sharing_tab = save_name.saveGet(14)\n        \n        inputs.share = file_data.[4].split(\"\\n\")\n        last_inputs_share = inputs.share\n        \n        share_name = file_data.[2] ++ file_data.[1]\n        share_type = file_data.[1]\n        current_ohf = invites.[invite].val.ohf\n        if typeof(current_ohf) == \"object\" (\n          current_ohf = compileOHF(current_ohf)\n        ) else (\n          current_ohf = null\n        )\n        add_tab \"^ \" ++ file_data.[14]\n        invites = {}\n      )\n      centext \"From \" ++ invites.[invite].origin.username 10 : c#c_text\n    )\n  )"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "frame",
            "source": "frame window.left + 45 window.top - 35 window.left + 300 window.bottom (\n    square frame.width - 25 frame.height - 25 15 : c#c_prim\n    square frame.width - 25 frame.height - 25 10 : c#window_colour\n    goto 0 frame.top + 15\n    each tab tabs (\n      if tab.len == 32 (\n        change_y -45\n        if sharing_tab == tab (\n          square frame.width - 30 30 15 : c#global_accent\n        )\n        square frame.width - 30 30 10 : c#c_prim\n        if clicked (\n          sharing_tab = tab\n        )\n        centext open(tab, [\"name\", \"type\"]).join(\"\") 10 : c#c_text\n      )\n    )\n  )"
          },
          {
            "type": "opr",
            "data": "+",
            "source": "+",
            "left": {
              "type": "mtd",
              "data": [
                {
                  "type": "var",
                  "data": "window",
                  "source": "window"
                },
                {
                  "type": "var",
                  "data": "left",
                  "source": "left"
                }
              ],
              "source": "window.left"
            },
            "right": {
              "type": "num",
              "data": 45,
              "source": "45"
            }
          },
          {
            "type": "opr",
            "data": "-",
            "source": "-",
            "left": {
              "type": "mtd",
              "data": [
                {
                  "type": "var",
                  "data": "window",
                  "source": "window"
                },
                {
                  "type": "var",
                  "data": "top",
                  "source": "top"
                }
              ],
              "source": "window.top"
            },
            "right": {
              "type": "num",
              "data": 35,
              "source": "35"
            }
          },
          {
            "type": "opr",
            "data": "+",
            "source": "+",
            "left": {
              "type": "mtd",
              "data": [
                {
                  "type": "var",
                  "data": "window",
                  "source": "window"
                },
                {
                  "type": "var",
                  "data": "left",
                  "source": "left"
                }
              ],
              "source": "window.left"
            },
            "right": {
              "type": "num",
              "data": 300,
              "source": "300"
            }
          },
          {
            "type": "mtd",
            "data": [
              {
                "type": "var",
                "data": "window",
                "source": "window"
              },
              {
                "type": "var",
                "data": "bottom",
                "source": "bottom"
              }
            ],
            "source": "window.bottom"
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "cmd",
                  "data": "square",
                  "source": "square frame.width - 25 frame.height - 25 15 : c#c_prim"
                },
                {
                  "type": "opr",
                  "data": "-",
                  "source": "-",
                  "left": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "frame",
                        "source": "frame"
                      },
                      {
                        "type": "var",
                        "data": "width",
                        "source": "width"
                      }
                    ],
                    "source": "frame.width"
                  },
                  "right": {
                    "type": "num",
                    "data": 25,
                    "source": "25"
                  }
                },
                {
                  "type": "opr",
                  "data": "-",
                  "source": "-",
                  "left": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "frame",
                        "source": "frame"
                      },
                      {
                        "type": "var",
                        "data": "height",
                        "source": "height"
                      }
                    ],
                    "source": "frame.height"
                  },
                  "right": {
                    "type": "num",
                    "data": 25,
                    "source": "25"
                  }
                },
                {
                  "type": "num",
                  "data": 15,
                  "source": "15"
                },
                {
                  "type": "mod",
                  "data": [
                    "c",
                    {
                      "type": "var",
                      "data": "c_prim",
                      "source": "c_prim"
                    }
                  ],
                  "source": "c#c_prim"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "square",
                  "source": "square frame.width - 25 frame.height - 25 10 : c#window_colour"
                },
                {
                  "type": "opr",
                  "data": "-",
                  "source": "-",
                  "left": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "frame",
                        "source": "frame"
                      },
                      {
                        "type": "var",
                        "data": "width",
                        "source": "width"
                      }
                    ],
                    "source": "frame.width"
                  },
                  "right": {
                    "type": "num",
                    "data": 25,
                    "source": "25"
                  }
                },
                {
                  "type": "opr",
                  "data": "-",
                  "source": "-",
                  "left": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "frame",
                        "source": "frame"
                      },
                      {
                        "type": "var",
                        "data": "height",
                        "source": "height"
                      }
                    ],
                    "source": "frame.height"
                  },
                  "right": {
                    "type": "num",
                    "data": 25,
                    "source": "25"
                  }
                },
                {
                  "type": "num",
                  "data": 10,
                  "source": "10"
                },
                {
                  "type": "mod",
                  "data": [
                    "c",
                    {
                      "type": "var",
                      "data": "window_colour",
                      "source": "window_colour"
                    }
                  ],
                  "source": "c#window_colour"
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "goto",
                  "source": "goto 0 frame.top + 15"
                },
                {
                  "type": "num",
                  "data": 0,
                  "source": "0"
                },
                {
                  "type": "opr",
                  "data": "+",
                  "source": "+",
                  "left": {
                    "type": "mtd",
                    "data": [
                      {
                        "type": "var",
                        "data": "frame",
                        "source": "frame"
                      },
                      {
                        "type": "var",
                        "data": "top",
                        "source": "top"
                      }
                    ],
                    "source": "frame.top"
                  },
                  "right": {
                    "type": "num",
                    "data": 15,
                    "source": "15"
                  }
                }
              ],
              [
                {
                  "type": "cmd",
                  "data": "each",
                  "source": "each tab tabs (\n      if tab.len == 32 (\n        change_y -45\n        if sharing_tab == tab (\n          square frame.width - 30 30 15 : c#global_accent\n        )\n        square frame.width - 30 30 10 : c#c_prim\n        if clicked (\n          sharing_tab = tab\n        )\n        centext open(tab, [\"name\", \"type\"]).join(\"\") 10 : c#c_text\n      )\n    )"
                },
                {
                  "type": "str",
                  "data": "tab",
                  "source": "tab"
                },
                {
                  "type": "var",
                  "data": "tabs",
                  "source": "tabs"
                },
                {
                  "type": "blk",
                  "data": [
                    [
                      {
                        "type": "cmd",
                        "data": "if",
                        "source": "if tab.len == 32 (\n        change_y -45\n        if sharing_tab == tab (\n          square frame.width - 30 30 15 : c#global_accent\n        )\n        square frame.width - 30 30 10 : c#c_prim\n        if clicked (\n          sharing_tab = tab\n        )\n        centext open(tab, [\"name\", \"type\"]).join(\"\") 10 : c#c_text\n      )"
                      },
                      {
                        "type": "cmp",
                        "data": "==",
                        "source": "==",
                        "left": {
                          "type": "mtd",
                          "data": [
                            {
                              "type": "var",
                              "data": "tab",
                              "source": "tab"
                            },
                            {
                              "type": "var",
                              "data": "len",
                              "source": "len"
                            }
                          ],
                          "source": "tab.len"
                        },
                        "right": {
                          "type": "num",
                          "data": 32,
                          "source": "32"
                        }
                      },
                      {
                        "type": "blk",
                        "data": [
                          [
                            {
                              "type": "cmd",
                              "data": "change_y",
                              "source": "change_y -45"
                            },
                            {
                              "type": "num",
                              "data": -45,
                              "source": "-45"
                            }
                          ],
                          [
                            {
                              "type": "cmd",
                              "data": "if",
                              "source": "if sharing_tab == tab (\n          square frame.width - 30 30 15 : c#global_accent\n        )"
                            },
                            {
                              "type": "cmp",
                              "data": "==",
                              "source": "==",
                              "left": {
                                "type": "var",
                                "data": "sharing_tab",
                                "source": "sharing_tab"
                              },
                              "right": {
                                "type": "var",
                                "data": "tab",
                                "source": "tab"
                              }
                            },
                            {
                              "type": "blk",
                              "data": [
                                [
                                  {
                                    "type": "cmd",
                                    "data": "square",
                                    "source": "square frame.width - 30 30 15 : c#global_accent"
                                  },
                                  {
                                    "type": "opr",
                                    "data": "-",
                                    "source": "-",
                                    "left": {
                                      "type": "mtd",
                                      "data": [
                                        {
                                          "type": "var",
                                          "data": "frame",
                                          "source": "frame"
                                        },
                                        {
                                          "type": "var",
                                          "data": "width",
                                          "source": "width"
                                        }
                                      ],
                                      "source": "frame.width"
                                    },
                                    "right": {
                                      "type": "num",
                                      "data": 30,
                                      "source": "30"
                                    }
                                  },
                                  {
                                    "type": "num",
                                    "data": 30,
                                    "source": "30"
                                  },
                                  {
                                    "type": "num",
                                    "data": 15,
                                    "source": "15"
                                  },
                                  {
                                    "type": "mod",
                                    "data": [
                                      "c",
                                      {
                                        "type": "var",
                                        "data": "global_accent",
                                        "source": "global_accent"
                                      }
                                    ],
                                    "source": "c#global_accent"
                                  }
                                ]
                              ],
                              "source": "(\n          square frame.width - 30 30 15 : c#global_accent\n        )"
                            }
                          ],
                          [
                            {
                              "type": "cmd",
                              "data": "square",
                              "source": "square frame.width - 30 30 10 : c#c_prim"
                            },
                            {
                              "type": "opr",
                              "data": "-",
                              "source": "-",
                              "left": {
                                "type": "mtd",
                                "data": [
                                  {
                                    "type": "var",
                                    "data": "frame",
                                    "source": "frame"
                                  },
                                  {
                                    "type": "var",
                                    "data": "width",
                                    "source": "width"
                                  }
                                ],
                                "source": "frame.width"
                              },
                              "right": {
                                "type": "num",
                                "data": 30,
                                "source": "30"
                              }
                            },
                            {
                              "type": "num",
                              "data": 30,
                              "source": "30"
                            },
                            {
                              "type": "num",
                              "data": 10,
                              "source": "10"
                            },
                            {
                              "type": "mod",
                              "data": [
                                "c",
                                {
                                  "type": "var",
                                  "data": "c_prim",
                                  "source": "c_prim"
                                }
                              ],
                              "source": "c#c_prim"
                            }
                          ],
                          [
                            {
                              "type": "cmd",
                              "data": "if",
                              "source": "if clicked (\n          sharing_tab = tab\n        )"
                            },
                            {
                              "type": "var",
                              "data": "clicked",
                              "source": "clicked"
                            },
                            {
                              "type": "blk",
                              "data": [
                                [
                                  {
                                    "type": "asi",
                                    "data": "=",
                                    "source": "sharing_tab = tab",
                                    "left": {
                                      "type": "var",
                                      "data": "sharing_tab",
                                      "source": "sharing_tab"
                                    },
                                    "right": {
                                      "type": "var",
                                      "data": "tab",
                                      "source": "tab"
                                    }
                                  }
                                ]
                              ],
                              "source": "(\n          sharing_tab = tab\n        )"
                            }
                          ],
                          [
                            {
                              "type": "cmd",
                              "data": "centext",
                              "source": "centext open(tab, [\"name\", \"type\"]).join(\"\") 10 : c#c_text"
                            },
                            {
                              "type": "mtd",
                              "data": [
                                {
                                  "type": "fnc",
                                  "data": "open",
                                  "parameters": [
                                    {
                                      "type": "var",
                                      "data": "tab",
                                      "source": "tab"
                                    },
                                    {
                                      "type": "arr",
                                      "data": [
                                        {
                                          "type": "str",
                                          "data": "\"name\"",
                                          "source": "\"name\""
                                        },
                                        {
                                          "type": "str",
                                          "data": "\"type\"",
                                          "source": "\"type\""
                                        }
                                      ],
                                      "source": "[\"name\", \"type\"]"
                                    }
                                  ],
                                  "source": "open(tab, [\"name\", \"type\"])"
                                },
                                {
                                  "type": "mtv",
                                  "data": "join",
                                  "parameters": [
                                    {
                                      "type": "str",
                                      "data": "\"\"",
                                      "source": "\"\""
                                    }
                                  ],
                                  "source": "join(\"\")"
                                }
                              ],
                              "source": "open(tab, [\"name\", \"type\"]).join(\"\")"
                            },
                            {
                              "type": "num",
                              "data": 10,
                              "source": "10"
                            },
                            {
                              "type": "mod",
                              "data": [
                                "c",
                                {
                                  "type": "var",
                                  "data": "c_text",
                                  "source": "c_text"
                                }
                              ],
                              "source": "c#c_text"
                            }
                          ]
                        ],
                        "source": "(\n        change_y -45\n        if sharing_tab == tab (\n          square frame.width - 30 30 15 : c#global_accent\n        )\n        square frame.width - 30 30 10 : c#c_prim\n        if clicked (\n          sharing_tab = tab\n        )\n        centext open(tab, [\"name\", \"type\"]).join(\"\") 10 : c#c_text\n      )"
                      }
                    ]
                  ],
                  "source": "(\n      if tab.len == 32 (\n        change_y -45\n        if sharing_tab == tab (\n          square frame.width - 30 30 15 : c#global_accent\n        )\n        square frame.width - 30 30 10 : c#c_prim\n        if clicked (\n          sharing_tab = tab\n        )\n        centext open(tab, [\"name\", \"type\"]).join(\"\") 10 : c#c_text\n      )\n    )"
                }
              ]
            ],
            "source": "(\n    square frame.width - 25 frame.height - 25 15 : c#c_prim\n    square frame.width - 25 frame.height - 25 10 : c#window_colour\n    goto 0 frame.top + 15\n    each tab tabs (\n      if tab.len == 32 (\n        change_y -45\n        if sharing_tab == tab (\n          square frame.width - 30 30 15 : c#global_accent\n        )\n        square frame.width - 30 30 10 : c#c_prim\n        if clicked (\n          sharing_tab = tab\n        )\n        centext open(tab, [\"name\", \"type\"]).join(\"\") 10 : c#c_text\n      )\n    )\n  )"
          }
        ]
      ],
      "source": "(\n  window \"responsive\" true\n  frame window.left + 300 window.top - 40 window.right window.bottom (\n    goto 0 40\n    centext \"Type a user's connection id to invite\" 10 : c#c_text\n    goto 0 20\n    centext \"Your id is: \" ++ connection.username 9\n    goto 0 -20\n    square 300 25 10 : c#c_prim\n    input 260 25 \"Invite\" \"Should look like: '06ec19ff33'\" : chx#-20\n    c sharing_tab == null ? c_seco c_text\n    icon \"send\" 0.8 : chx#150 tooltip#\"Send Invite to Edit\"\n    if onclick and sharing_tab != null (\n      edit_session = ouidNew()\n      host = true\n      rotur.pMessage(connection.room, \"ori-\" ++ inputs.Invite, {\n        cmd: \"join\",\n        ohf: getOHF(open(sharing_tab, [\"type\"]).[1]),\n        room: edit_session,\n        file_data: open(sharing_tab, \"all\")\n      })\n      \n      joinEditSession(edit_session)\n    )\n    c c_text\n    goto 0 -55\n    centext \"Recieved:\" 9\n    each invite invites.getKeys() (\n      change_y -45\n      square frame.width - 30 30 10 : c#c_prim\n      if onclick (\n        sharing_tab = \"\"\n        tabs = tabs.filter(v -> (v.startsWith(\"^ \").not()))\n        joinEditSession(invites.[invite].val.room)\n        local file_data = invites.[invite].val.file_data\n        save_name = \"temp_\" ++ file_data.[14] ++ \".lvsh\"\n        save save_name \"set\" file_data.[4]\n        sharing_tab = save_name.saveGet(14)\n        \n        inputs.share = file_data.[4].split(\"\\n\")\n        last_inputs_share = inputs.share\n        \n        share_name = file_data.[2] ++ file_data.[1]\n        share_type = file_data.[1]\n        current_ohf = invites.[invite].val.ohf\n        if typeof(current_ohf) == \"object\" (\n          current_ohf = compileOHF(current_ohf)\n        ) else (\n          current_ohf = null\n        )\n        add_tab \"^ \" ++ file_data.[14]\n        invites = {}\n      )\n      centext \"From \" ++ invites.[invite].origin.username 10 : c#c_text\n    )\n  )\n  frame window.left + 45 window.top - 35 window.left + 300 window.bottom (\n    square frame.width - 25 frame.height - 25 15 : c#c_prim\n    square frame.width - 25 frame.height - 25 10 : c#window_colour\n    goto 0 frame.top + 15\n    each tab tabs (\n      if tab.len == 32 (\n        change_y -45\n        if sharing_tab == tab (\n          square frame.width - 30 30 15 : c#global_accent\n        )\n        square frame.width - 30 30 10 : c#c_prim\n        if clicked (\n          sharing_tab = tab\n        )\n        centext open(tab, [\"name\", \"type\"]).join(\"\") 10 : c#c_text\n      )\n    )\n  )\n)"
    }
  ],
  [
    {
      "type": "cmd",
      "data": "if",
      "source": "if change_focus (\n  if current_tab == \"> Welcome\" (\n    current_studio_page = \"Home\"\n  ) else if current_tab == \"> Invite\" (\n    current_studio_page = \"Invite\"\n  ) else (\n    current_studio_page = current_tab\n  )\n)"
    },
    {
      "type": "var",
      "data": "change_focus",
      "source": "change_focus"
    },
    {
      "type": "blk",
      "data": [
        [
          {
            "type": "cmd",
            "data": "if",
            "source": "if current_tab == \"> Welcome\" (\n    current_studio_page = \"Home\"\n  ) else if current_tab == \"> Invite\" (\n    current_studio_page = \"Invite\"\n  ) else (\n    current_studio_page = current_tab\n  )"
          },
          {
            "type": "cmp",
            "data": "==",
            "source": "==",
            "left": {
              "type": "var",
              "data": "current_tab",
              "source": "current_tab"
            },
            "right": {
              "type": "str",
              "data": "\"> Welcome\"",
              "source": "\"> Welcome\""
            }
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "current_studio_page = \"Home\"",
                  "left": {
                    "type": "var",
                    "data": "current_studio_page",
                    "source": "current_studio_page"
                  },
                  "right": {
                    "type": "str",
                    "data": "\"Home\"",
                    "source": "\"Home\""
                  }
                }
              ]
            ],
            "source": "(\n    current_studio_page = \"Home\"\n  )"
          },
          {
            "type": "var",
            "data": "else",
            "source": "else"
          },
          {
            "type": "var",
            "data": "if",
            "source": "if"
          },
          {
            "type": "cmp",
            "data": "==",
            "source": "==",
            "left": {
              "type": "var",
              "data": "current_tab",
              "source": "current_tab"
            },
            "right": {
              "type": "str",
              "data": "\"> Invite\"",
              "source": "\"> Invite\""
            }
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "current_studio_page = \"Invite\"",
                  "left": {
                    "type": "var",
                    "data": "current_studio_page",
                    "source": "current_studio_page"
                  },
                  "right": {
                    "type": "str",
                    "data": "\"Invite\"",
                    "source": "\"Invite\""
                  }
                }
              ]
            ],
            "source": "(\n    current_studio_page = \"Invite\"\n  )"
          },
          {
            "type": "var",
            "data": "else",
            "source": "else"
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "asi",
                  "data": "=",
                  "source": "current_studio_page = current_tab",
                  "left": {
                    "type": "var",
                    "data": "current_studio_page",
                    "source": "current_studio_page"
                  },
                  "right": {
                    "type": "var",
                    "data": "current_tab",
                    "source": "current_tab"
                  }
                }
              ]
            ],
            "source": "(\n    current_studio_page = current_tab\n  )"
          }
        ]
      ],
      "source": "(\n  if current_tab == \"> Welcome\" (\n    current_studio_page = \"Home\"\n  ) else if current_tab == \"> Invite\" (\n    current_studio_page = \"Invite\"\n  ) else (\n    current_studio_page = current_tab\n  )\n)"
    }
  ],
  [
    {
      "type": "cmd",
      "data": "draw_buttons",
      "source": "draw_buttons"
    }
  ],
  [
    {
      "type": "cmd",
      "data": "frame",
      "source": "frame window.left + 50 window.top - 40 window.right - 5 window.bottom + 5"
    },
    {
      "type": "opr",
      "data": "+",
      "source": "+",
      "left": {
        "type": "mtd",
        "data": [
          {
            "type": "var",
            "data": "window",
            "source": "window"
          },
          {
            "type": "var",
            "data": "left",
            "source": "left"
          }
        ],
        "source": "window.left"
      },
      "right": {
        "type": "num",
        "data": 50,
        "source": "50"
      }
    },
    {
      "type": "opr",
      "data": "-",
      "source": "-",
      "left": {
        "type": "mtd",
        "data": [
          {
            "type": "var",
            "data": "window",
            "source": "window"
          },
          {
            "type": "var",
            "data": "top",
            "source": "top"
          }
        ],
        "source": "window.top"
      },
      "right": {
        "type": "num",
        "data": 40,
        "source": "40"
      }
    },
    {
      "type": "opr",
      "data": "-",
      "source": "-",
      "left": {
        "type": "mtd",
        "data": [
          {
            "type": "var",
            "data": "window",
            "source": "window"
          },
          {
            "type": "var",
            "data": "right",
            "source": "right"
          }
        ],
        "source": "window.right"
      },
      "right": {
        "type": "num",
        "data": 5,
        "source": "5"
      }
    },
    {
      "type": "opr",
      "data": "+",
      "source": "+",
      "left": {
        "type": "mtd",
        "data": [
          {
            "type": "var",
            "data": "window",
            "source": "window"
          },
          {
            "type": "var",
            "data": "bottom",
            "source": "bottom"
          }
        ],
        "source": "window.bottom"
      },
      "right": {
        "type": "num",
        "data": 5,
        "source": "5"
      }
    }
  ],
  [
    {
      "type": "cmd",
      "data": "if",
      "source": "if current_tab.startsWith(\"^\") (\n  sidebar.frameInnerRender(editor.renderShare)\n  frame \"clear\"\n  \n  loc 2 2 23 -23\n  c c_text\n  if sharing_tab != \"\" (\n    sidebarButtons(sharing_tab, \"share\")\n  )\n) else if current_tab == current_studio_page (\n  sidebar.frameInnerRender(editor.renderNorm)\n  \n  frame \"clear\"\n  loc 2 2 23 -23\n  sidebarButtons(current_tab, current_tab)\n)"
    },
    {
      "type": "mtd",
      "data": [
        {
          "type": "var",
          "data": "current_tab",
          "source": "current_tab"
        },
        {
          "type": "mtv",
          "data": "startsWith",
          "parameters": [
            {
              "type": "str",
              "data": "\"^\"",
              "source": "\"^\""
            }
          ],
          "source": "startsWith(\"^\")"
        }
      ],
      "source": "current_tab.startsWith(\"^\")"
    },
    {
      "type": "blk",
      "data": [
        [
          {
            "type": "asi",
            "data": "=??",
            "source": "sidebar.frameInnerRender(editor.renderShare)",
            "left": {
              "type": "var",
              "data": "sidebar",
              "source": "sidebar"
            },
            "right": {
              "type": "mtd",
              "data": [
                {
                  "type": "var",
                  "data": "sidebar",
                  "source": "sidebar"
                },
                {
                  "type": "mtv",
                  "data": "frameInnerRender",
                  "parameters": [
                    {
                      "type": "mtd",
                      "data": [
                        {
                          "type": "var",
                          "data": "editor",
                          "source": "editor"
                        },
                        {
                          "type": "var",
                          "data": "renderShare",
                          "source": "renderShare"
                        }
                      ],
                      "source": "editor.renderShare"
                    }
                  ],
                  "source": "frameInnerRender(editor.renderShare)"
                }
              ],
              "source": "sidebar.frameInnerRender(editor.renderShare)"
            }
          }
        ],
        [
          {
            "type": "cmd",
            "data": "frame",
            "source": "frame \"clear\""
          },
          {
            "type": "str",
            "data": "\"clear\"",
            "source": "\"clear\""
          }
        ],
        [
          {
            "type": "cmd",
            "data": "loc",
            "source": "loc 2 2 23 -23"
          },
          {
            "type": "num",
            "data": 2,
            "source": "2"
          },
          {
            "type": "num",
            "data": 2,
            "source": "2"
          },
          {
            "type": "num",
            "data": 23,
            "source": "23"
          },
          {
            "type": "num",
            "data": -23,
            "source": "-23"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "c",
            "source": "c c_text"
          },
          {
            "type": "var",
            "data": "c_text",
            "source": "c_text"
          }
        ],
        [
          {
            "type": "cmd",
            "data": "if",
            "source": "if sharing_tab != \"\" (\n    sidebarButtons(sharing_tab, \"share\")\n  )"
          },
          {
            "type": "cmp",
            "data": "!=",
            "source": "!=",
            "left": {
              "type": "var",
              "data": "sharing_tab",
              "source": "sharing_tab"
            },
            "right": {
              "type": "str",
              "data": "\"\"",
              "source": "\"\""
            }
          },
          {
            "type": "blk",
            "data": [
              [
                {
                  "type": "fnc",
                  "data": "sidebarButtons",
                  "parameters": [
                    {
                      "type": "var",
                      "data": "sharing_tab",
                      "source": "sharing_tab"
                    },
                    {
                      "type": "str",
                      "data": "\"share\"",
                      "source": "\"share\""
                    }
                  ],
                  "source": "sidebarButtons(sharing_tab, \"share\")"
                }
              ]
            ],
            "source": "(\n    sidebarButtons(sharing_tab, \"share\")\n  )"
          }
        ]
      ],
      "source": "(\n  sidebar.frameInnerRender(editor.renderShare)\n  frame \"clear\"\n  \n  loc 2 2 23 -23\n  c c_text\n  if sharing_tab != \"\" (\n    sidebarButtons(sharing_tab, \"share\")\n  )\n)"
    },
    {
      "type": "var",
      "data": "else",
      "source": "else"
    },
    {
      "type": "var",
      "data": "if",
      "source": "if"
    },
    {
      "type": "cmp",
      "data": "==",
      "source": "==",
      "left": {
        "type": "var",
        "data": "current_tab",
        "source": "current_tab"
      },
      "right": {
        "type": "var",
        "data": "current_studio_page",
        "source": "current_studio_page"
      }
    },
    {
      "type": "blk",
      "data": [
        [
          {
            "type": "asi",
            "data": "=??",
            "source": "sidebar.frameInnerRender(editor.renderNorm)",
            "left": {
              "type": "var",
              "data": "sidebar",
              "source": "sidebar"
            },
            "right": {
              "type": "mtd",
              "data": [
                {
                  "type": "var",
                  "data": "sidebar",
                  "source": "sidebar"
                },
                {
                  "type": "mtv",
                  "data": "frameInnerRender",
                  "parameters": [
                    {
                      "type": "mtd",
                      "data": [
                        {
                          "type": "var",
                          "data": "editor",
                          "source": "editor"
                        },
                        {
                          "type": "var",
                          "data": "renderNorm",
                          "source": "renderNorm"
                        }
                      ],
                      "source": "editor.renderNorm"
                    }
                  ],
                  "source": "frameInnerRender(editor.renderNorm)"
                }
              ],
              "source": "sidebar.frameInnerRender(editor.renderNorm)"
            }
          }
        ],
        [
          {
            "type": "cmd",
            "data": "frame",
            "source": "frame \"clear\""
          },
          {
            "type": "str",
            "data": "\"clear\"",
            "source": "\"clear\""
          }
        ],
        [
          {
            "type": "cmd",
            "data": "loc",
            "source": "loc 2 2 23 -23"
          },
          {
            "type": "num",
            "data": 2,
            "source": "2"
          },
          {
            "type": "num",
            "data": 2,
            "source": "2"
          },
          {
            "type": "num",
            "data": 23,
            "source": "23"
          },
          {
            "type": "num",
            "data": -23,
            "source": "-23"
          }
        ],
        [
          {
            "type": "fnc",
            "data": "sidebarButtons",
            "parameters": [
              {
                "type": "var",
                "data": "current_tab",
                "source": "current_tab"
              },
              {
                "type": "var",
                "data": "current_tab",
                "source": "current_tab"
              }
            ],
            "source": "sidebarButtons(current_tab, current_tab)"
          }
        ]
      ],
      "source": "(\n  sidebar.frameInnerRender(editor.renderNorm)\n  \n  frame \"clear\"\n  loc 2 2 23 -23\n  sidebarButtons(current_tab, current_tab)\n)"
    }
  ]
]